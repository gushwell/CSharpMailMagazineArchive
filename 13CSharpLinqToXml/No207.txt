■━ [C#プログラミングレッスン] ━━━━━━━━━━━━━ No.207 ━□
  
   「LINQ to XML編」 -- ハローウィーン問題
                                                         by Gushwell  
□━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━■

前回までで、LINQ to XMLの機能については、ほぼ解説しつくしたと思います。
今回は、LINQ to XMLを利用する上で注意しなければならない、「 ハロ―ウィ
―ン問題」について説明したいと思います。

■□─────────────────────────────────
■□ハローウィーン問題とは
 
LINQ to XMLを利用する上で注意しなければならない点があります。以下のコ
―ドがどうなるかを想像してみてくださし。
  
  XElement root = new XElement("Root",
     new XElement("A", "1"),
     new XElement("B", "2"),
     new XElement("C", "3")
 );
 // A,B,Cに対して、同じものを最後尾に追加する。
 foreach (XElement e in root.Elements()) {
     root.Add(new XElement(e.Name, (string)e.Value));
 }
 foreach (var e in root.Elements()) {
     Console.WriteLine(e.Name + " " + e.Value);
 }
 

真ん中の foreach文に注目です。ここでは、A, B, C という３つの要素に対し、
処理を行いたいという意図です。つまり３回ル―プすることを期待しているわ
けですが、実際には、無限ル―プしてしまいます。

初期状態では、Root要素には、 A,B,Cの３つの要素があります。最初のル―プ
処理で、Aをroot要素に追加しているわけですから、Root要素には、 A,A,B,C
の４つの要素が存在ます。

ル―プ処理では、２つめの要素に移動しますが、これは追加された Aに移動す
ることになります。これが繰り返されるので、B要素に辿りつくことはありま
せん。結局、永遠に処理が終わらないことになってしまいます。

これは、Elements()メソッドは、IEnumerable<XElement>が戻り値なのですが、
その中では、yield returnによる反復処理が行われています。この反復処理中
に要素の追加や削除を行うと整合性が取れなくなり、意図した動作にはなりま
せん。（もちろん、コードは書かれた通りに動くのですが）


■□─────────────────────────────────
■□ハローウィーン問題を回避する

これを回避するには、

 foreach (XElement e in root.Elements().ToList()) {
     root.Add(new XElement(e.Name, (string)e.Value));
 }
            
として、リストコレクションを作成し、Root要素から切り離してあげる必要が
あります。

この問題は、"ハロウィ―ン問題" と呼ばれているようです。

同様の問題は、Addメソッドだけではなく、Removeメソッドでも起こります。

 XElement root = new XElement("Root",
     new XElement("A", "1"),
     new XElement("B", "2"),
     new XElement("C", "3")
 );
 foreach (XElement e in root.Elements()) {
     if ((int)e <= 2)
         e.Remove();
 }
 Console.WriteLine(root);
 

このコ―ドは、要素の値が 2以下である、AとBが削除されることを意図してい
ますが、実際にはそうなりません。

Aを削除し、次の要素を見つけようとしますが、Aが削除されてしまうため、
「Aの次」が求められないため、この時点でル―プから抜けてしまいます。

結果、

 <Root>
   <B>2</B>
   <C>3</C>
 </Root>

が表示されることになります。

───────────────────────────────────
『C#プログラミングレッスン』  (ぼぼ週刊）                             
───────────────────────────────────
 Published by Gushwell.                                               
   Copyright (C) 2004-2009 Gushwell All rights reserved.              
   Microsoft MVP - Visual C#(Apr 2005 - Mar 2010)                     

 <<■ Gushwell's Page ■>>
 窓際プログラマ―の独り言  ：http://blog.livedoor.jp/gushwell/        
 窓際プログラマ―の読書三昧：http://gushwell.jugem.jp/                
 Gushwell's F# Programming Diary : http://techbank.jp/gushwell/ 
 Gushwell's C# Programming Page  ：http://gushwell.ifdef.jp/  
   C#デザインパタ―ン : http://gushwell.ifdef.jp/dp/csdpindex.html
───────────────────────────────────