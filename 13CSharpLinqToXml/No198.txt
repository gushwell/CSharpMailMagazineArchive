■━ [C#プログラミングレッスン] ━━━━━━━━━━━━━ No.198 ━□
  
   「LINQ to XML編」 -- XMLのドキュメントツリ―をたどる
                                                         by Gushwell  
□━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━■


■□―――――――――――――――――――――――――――――――――
■□ XMLのドキュメントツリ―をたどる

前回までは、XMLにどんなタグがあるかが事前に分かっているXMLファイルの読
み込みの例でした。今度は、DOMのサンプルとしてよく出ている、XMLのドキュ
メントツリ―をたどるコ―ドを書いてみます。
コードの見かけは、全然LINQっぽくありませんが、これも立派な LINQ to XML
のコードであり、LINQ to XMLの守備範囲の広さを示す例だと思います。

 private static void ReadXml() {
     XDocument xdoc = XDocument.Load("sample.xml");
     HandleElement(xdoc.Root, 0);
 }

 private static void HandleElement(XElement element, int indent) {
     Console.WriteLine("{0}[{1}]", Ind(indent), element.Name);
     if (element.HasElements) {
         foreach (var e in element.Elements()) {
             HandleElement(e, indent+1);
         }
     } else {
         Console.WriteLine("{0}{1}", Ind(indent + 1), element.Value);
     }
 }
        
 private static string Ind(int indent) {
     return new string(' ', indent*2);
 }
        
 ※ sample.xmlは、http://gushwell.ifdef.jp/mailmag/sample.xmlに掲載し
    てあります。
                
このプログラムでは、再帰処理を使ってXMLの要素をたどっています。
HandleElementメソッドの中で、HandleElementメソッドを呼び出しています。
Root要素を処理するHandleElementメソッドを呼び出し、その要素の処理をし
たら、直接の子要素を新たなRootとみなして、HandleElementメソッドを呼び
出すことで、階層構造をどんどん辿っていっています。

結果の一部を示します。

[books]
  [book]
    [title]
      XML Hacks
    [publisher]
      Oreilly
    [authers]
      [auther]
        Michael Fitzgerald
    [price]
      3360
  [book]
    [title]
      C# CookBook
    [publisher]
      Oreilly
    [authers]
      [auther]
        Jay Hilyard
      [auther]
        Stephen Teilhet
    [price]
      5200


■□―――――――――――――――――――――――――――――――――
■□コ―ドの解説

もう少しHandleElementメソッドの内容について補足しておきましょう。
まず、引数には、XElement型のelement と int型の indentを受け取ります。
elementは、たどりたいXMLの要素を渡します。indentは、ツリ―の深さを表し
ます。この indentは、字下げに利用します。

 HandleElement(xdoc.Root, 0);

ReadXml()メソッドでの、このコ―ドは、読み込んだXMLドキュメントのル―ト
要素を渡しています。indentは、最初なので0とします。

HandleElementの中では、最初に、

  Console.WriteLine("{0}[{1}]", Ind(indent), element.Name);

で、要素の名前をカギカッコつきで表示しています。その時、Indメソッドを
呼び出し、字下げ分の空白文字列を得ています。
次に

  if (element.HasElements) {
     
で、引数で渡ってきた要素に、子要素があるかを見ています。
子要素があれば、
     
  foreach (var e in element.Elements()) {
      HandleElement(e, indent+1);
  }
         
で、子要素の数だけ、子要素を引数にしてHandleElementを再帰的に呼び出し
ています。

子要素がない場合は、

  Console.WriteLine("{0}{1}", Ind(indent + 1), element.Value);

で、要素の値を出力しています。
書籍名や出版社名、価格などの実際の値は、ここで表示されます。

なかなかすっきりした簡潔なコ―ドですね。
再帰処理に慣れていない方は、混乱するかも知れませんが、ぜひじっくりとコ
ードを読み解いてください。

■□―――――――――――――――――――――――――――――――――
■□ 属性を含めた読み込み

先ほどのコ―ドに属性の取得も含めて見ましょう。

 private static void ReadXml() {
     XDocument xdoc = XDocument.Load("sample.xml");
     HandleElement(xdoc.Root, 0);
 }

 private static void HandleElement(XElement element, int indent) {
     Console.WriteLine("{0}[{1}]", Ind(indent), element.Name);
     if (element.HasAttributes)
         HandleAttribute(element.Attributes(), indent + 1);
     if (element.HasElements) {
         foreach (var e in element.Elements()) {
             HandleElement(e, indent + 1);
         }
     } else {
         Console.WriteLine("{0}{1}", Ind(indent + 1), element.Value);
     }
 }

 private static void HandleAttribute(IEnumerable<XAttribute> attrs,
                                     int indent) {
     foreach (var attr in attrs)
         Console.WriteLine("{0}{1}={2}", 
                           Ind(indent), attr.Name, attr.Value);
 }
 

HandleElementの中で、HasAttributeプロパティを使い、属性があるかどうか
を調べ、属性があった場合は、HandleAttributeメソッドを呼び出して、属性
を表示しています。

───────────────────────────────────
『C#プログラミングレッスン』  (ぼぼ週刊）                             
───────────────────────────────────
 Published by Gushwell.                                               
   Copyright (C) 2004-2009 Gushwell All rights reserved.              
   Microsoft MVP - Visual C#(Apr 2005 - Mar 2009)                     

 <<■ Gushwell's Page ■>>
 窓際プログラマ―の独り言  ：http://blog.livedoor.jp/gushwell/        
 窓際プログラマ―の読書三昧：http://gushwell.jugem.jp/                
 Gushwell's C# Programming Page：http://gushwell.ifdef.jp/            
 C#デザインパタ―ン :                                                 
  『増補改訂版Java言語で学ぶデザインパタ―ン入門 / 結城 浩(著)』      
   のサンプルコ―ドをC#に移植したものを掲載しています。               
   移植後のコ―ドの公開は、結城氏の了解を得ています。                 
   http://gushwell.ifdef.jp/dp/csdpindex.html                         
───────────────────────────────────