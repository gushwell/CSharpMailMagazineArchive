■━ [C#プログラミングレッスン] ━━━━━━━━━━━━━ No.203 ━□
  
   「LINQ to XML編」 -- 要素の追加と削除
                                                         by Gushwell  
□━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━■


■□─────────────────────────────────
■□要素の追加


今度は、要素を追加してみます。

 XDocument doc = XDocument.Load("sample.xml");
 XElement book = new XElement("book",
     new XAttribute("isbn", "978-4873112214"),
     new XElement("title", "XML Hacks2"),
     new XElement("publisher", "Oreilly2"),
     new XElement("authers",
         new XElement("auther", "Michael Fitzgerald2")),
     new XElement("price", 2600)
 );
 doc.Root.Add(book);
 doc.Save("result.xml");
            
 ※ sample.xmlは、http://gushwell.ifdef.jp/mailmag/sample.xmlに掲載し
    てあります。

このコードは、sample.xmlを読み込み、新たな書籍情報（１冊分）を

 doc.Root.Add(book);

の部分で、追加しています。追加される位置は最後です。

先頭に追加したい場合は、

 doc.Root.AddFirst(book);

とします。

■□─────────────────────────────────
■□条件に一致した要素を抜き出しXDocumentを作成する

次は、条件に一致した書籍を抜き出し、新たなXMLファイルを作成するコ―ド
です。これは、今までの知識を使えば書けますね。
クエリ式を使ってより、LINQらしいコードになっています。

 XDocument doc = XDocument.Load("sample.xml");
 XDocument newdoc = new XDocument();
 var query = from e in doc.Root.Elements()
             where (int)e.Element("price") < 4000
             select e;
 newdoc.Add(new XElement("books"));
 newdoc.Root.Add(query);
 newdoc.Save("result1.xml");

sample.xmlを読み込み、priceが4000未満の書籍を抜き出します。
この抜き出した書籍を新たに生成したnewdocに追加するわけですが、その前に、
books要素を追加し、このbooks要素の下位要素としてクエリの結果を追加して
います。

■□─────────────────────────────────
■□条件に一致した要素を抜き出しXDocumentを作成する

要素の置き換えです。
ある条件に一致した要素（ひとつ）を別の要素に置き換えるコ―ドです。

  XDocument doc = XDocument.Load("sample.xml");
  var query = from e in doc.Root.Elements()
              where (string)e.Attribute("isbn") == "978-4873112213"
              select e;
  query.Single().ReplaceWith(
      new XElement("book",
          new XAttribute("isbn", "978-4873112213"),
          new XElement("title", "XML Hacks2"),
          new XElement("publisher", "Oreilly2"),
          new XElement("authers",
              new XElement("auther", "Michael Fitzgerald2")),
          new XElement("price", 8600)
      )
  );
  doc.Save("result2.xml");

isbnが"978-4873112213"である書籍をクエリ式を使い探しています。
一致するのは、一つのはずなので、Singleメソッドを使い、XElement型のし、
ReplaceWithメソッドで要素の置き換えをやっています。

自分自身を別のものに置き換えるというこのメソッドを知った時は、不思議な
気持ちになりました。普通ならば、Replace(a,b)のようなメソッドにし、aをb
に置き換えるというメソッドを作ると思うんですが、なかなか気の利いたメソ
ッドですよね。
XElementは、上位要素に向かってツリ―を辿ることができるので、こういった
ことが可能なんですね。
「LINQ to XMLやるなー」と思いました。

ここでは、Book要素を置き換えるコ―ドとなっていますが、価格を変更するコ
―ドもこれを応用すればできますね。

 XDocument doc = XDocument.Load("sample.xml");
 var query = from e in doc.Root.Elements()
             where (string)e.Attribute("isbn") == "978-4873112213"
             select e;
 var price = query.Single().Element("price");
 price.ReplaceWith(new XElement("price", 1000));
 doc.Save("result21.xml");
            
しかし、この場合は、もっと簡単な方法があります。

 XDocument doc = XDocument.Load("sample.xml");
 var query = from e in doc.Root.Elements()
             where (string)e.Attribute("isbn") == "978-4873112213"
             select e;
 query.Single().Element("price").Value = "1000";
 doc.Save("result3.xml");
            
このように、Valueプロパティに直接値を代入することで、価格を置き換える
ことが可能です。


■□─────────────────────────────────
■□要素を削除する

では、最後に、要素を削除するコードをお見せします。

 XDocument doc = XDocument.Load("sample.xml");
 var query = from e in doc.Root.Elements()
             where (string)e.Attribute("isbn") == "978-4873112213"
             select e;
 query.Single().Remove();
 doc.Save("result4.xml");                                             
               
条件に一致した要素を見つけ、その要素を削除しています。

慣れないうちは、

 doc.Root.Remove(element);

といったインタ―フェ―スを期待してしまうのですが、ReplaceWithと同様に
「自分自身を削除する」というコ―ドを書くことになります。


───────────────────────────────────
『C#プログラミングレッスン』  (ぼぼ週刊）                             
───────────────────────────────────
 Published by Gushwell.                                               
   Copyright (C) 2004-2009 Gushwell All rights reserved.              
   Microsoft MVP - Visual C#(Apr 2005 - Mar 2010)                     

 <<■ Gushwell's Page ■>>
 窓際プログラマ―の独り言  ：http://blog.livedoor.jp/gushwell/        
 窓際プログラマ―の読書三昧：http://gushwell.jugem.jp/                
 Gushwell's C# Programming Page：http://gushwell.ifdef.jp/            
 C#デザインパタ―ン :                                                 
  『増補改訂版Java言語で学ぶデザインパタ―ン入門 / 結城 浩(著)』      
   のサンプルコ―ドをC#に移植したものを掲載しています。               
   移植後のコ―ドの公開は、結城氏の了解を得ています。                 
   http://gushwell.ifdef.jp/dp/csdpindex.html                         
───────────────────────────────────