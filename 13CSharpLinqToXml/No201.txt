■━ [C#プログラミングレッスン] ━━━━━━━━━━━━━ No.201 ━□
  
   「LINQ to XML編」 -- 空白の扱い
                                                         by Gushwell  
□━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━■

前回Saveメソッドが出てきたので、今回はファイルへ保存する際の空白の扱い
について説明します。

■□─────────────────────────────────
■□save時の空白の扱い。

Saveメソッドには、SaveOptionsを第２引数にとるメソッドがオ―バ―ロ―ドさ
れています。このオプションを指定することで、空白の扱いの指定ができます。

XMLファイルを扱うシナリオでは、

 1. インデントされた XML を読み取り、メモリ内に空白のテキスト ノ―ドな
    しで (つまり空白を維持せずに) XML ツリ―を作成する。

 2. XML に対して何らかの操作を実行する。

 3. インデント付きで XML を保存する。

が一般的な手順かと思われます。
これが LINQ to XMLの既定の動作です。しかし、他ソフトとデ―タのやり取り
をするのに、インデントをしてはまずい場合もあります。そのような場合は、

 doc.Save("result1.xml", SaveOptions.DisableFormatting);

とすることで、インデントを抑制することができます。作成されたファイルを
実際に見てみれば、空白文字（改行含む）が取り除かれているのがわかります。


■□─────────────────────────────────
■□Load時の空白の扱い。

ファイルから読み込む時にも、空白をどのように扱うのかを指定できます。

 XDocument doc3 = XDocument.Load("sample.xml", 
                                  LoadOptions.PreserveWhitespace);

と、LoadOptions.PreserveWhitespaceを第２引数に指定すれば、すべての空白
を読み込むことができます。
このオプションの動作を確かめてみるには、ノ―ドに対してプログラミングし
ます。今回も再帰処理を行い、Treeをたどっています。


 private static void ReadXml() {
     XDocument xdoc = XDocument.Load("sample.xml", 
                                     LoadOptions.PreserveWhitespace);
     HandleElement(xdoc.Root, 0);
 }

 private static void HandleElement(XElement element, int indent) {
     Console.WriteLine("{0}<{1}>", Ind(indent), element.Name);
     // Elenmentにぶら下がっている直下のNodeに対して、HandleNode
     // を呼び出しています。
     var node = element.FirstNode;
     while (node != null) {
         HandleNode(node, indent);
         node = node.NextNode;
     }
 }

 private static void HandleNode(XNode node, int indent) {
     indent++;
     switch (node.NodeType) {
         case XmlNodeType.Element:
             // NodeのTypeがElementの場合は、再帰的に
             // handleElementを呼び出しています。
             XElement elem = node as XElement;
             HandleElement(elem, indent);
             break;
         case XmlNodeType.Text:
             // Textならば、その値を表示します。
             XText text = node as XText;
             Console.WriteLine("{0}[{1}]", Ind(indent), text.Value);
             break;
     }
 }

 private static string Ind(int indent) {
     return new string(' ', indent*2);
 }


これまではすべてXElementについて操作するコードでしたが、上記サンプル
はNodeについて操作するサンプルにもなっています。

このコ―ドを実行してみればわかりますが、意味のないTextノ―ドも含めて読
み込んでいるのがわかると思います。まあ、普通は使わないですね。

───────────────────────────────────
『C#プログラミングレッスン』  (ぼぼ週刊）                             
───────────────────────────────────
 Published by Gushwell.                                               
   Copyright (C) 2004-2009 Gushwell All rights reserved.              
   Microsoft MVP - Visual C#(Apr 2005 - Mar 2009)                     

 <<■ Gushwell's Page ■>>
 窓際プログラマ―の独り言  ：http://blog.livedoor.jp/gushwell/        
 窓際プログラマ―の読書三昧：http://gushwell.jugem.jp/                
 Gushwell's C# Programming Page：http://gushwell.ifdef.jp/            
 C#デザインパタ―ン :                                                 
  『増補改訂版Java言語で学ぶデザインパタ―ン入門 / 結城 浩(著)』      
   のサンプルコ―ドをC#に移植したものを掲載しています。               
   移植後のコ―ドの公開は、結城氏の了解を得ています。                 
   http://gushwell.ifdef.jp/dp/csdpindex.html                         
───────────────────────────────────
