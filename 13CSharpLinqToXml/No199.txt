■━ [C#プログラミングレッスン] ━━━━━━━━━━━━━ No.199 ━□
  
   「LINQ to XML編」 -- 子孫要素を取り出す。
                                                         by Gushwell  
□━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━■

■□─────────────────────────────────
■□子孫要素を取り出す

No197の「XMLをカスタムクラスに変換する」でも触れましたが、
book要素には、authers要素があり、その子要素として複数のauther要素を持
っています。（以下のXML参照）

<books>
  ...
  <book isbn="978-0596516109">
    <title>C# CookBook</title>
    <publisher>Oreilly</publisher>
    <authers>
      <auther>Jay Hilyard</auther>
      <auther>Stephen Teilhet</auther>
    </authers>
    <price>5200</price>
  </book>
  ...

このauthorの一覧を作りたいとします。どのようなコードを書けばよいのでし
ょうか。これ、これまでの連載で扱った知識でやろうとすると、簡単そうで結
構難しいです。

まず、僕が最初に書いたコードをお見せします。

 XDocument xdoc = XDocument.Load("sample.xml");
 var query = from xbook in xdoc.Root.Elements()
             select xbook.Elements("authers");
 foreach (var xauthers in query) {
     var query2 = from xauther in xauthers.Elements("auther")
                  select xauther.Value;
     foreach (var name in query2)
         Console.WriteLine(name);
 }

まず、最初のクエリで、book要素ごとにあるauthers要素を抜き出します。変
数queryは、IEnumerable<IEnumerable<XElement>>型です。

その次に、複数ある authers要素を foreachでひとつづつ取り出します。取り
出したauthers要素(変数xauthers)は、IEnumerable<XElement>となります。こ
のxauthersに対し、再度クエリを使い、auther要素の値を抜き出します。つま
り、query2には、IEnumerable<string>型となります。

最後は、このquery2に対し、foreachで著者名をひとつづつ取り出し、表示し
ています。

結構複雑ですね。

結果は、

 Michael Fitzgerald
 Jay Hilyard
 Stephen Teilhet
 Judith Bishop
 Fabrice Marguerie
 Steve Eichert
 Jim Wooley
 Simon St. Laurent
 Michael Fitzgerald

となります。


■□─────────────────────────────────
■□子孫要素から重複を取り除く

同じ著者が複数ありますね、これを除外したいですね。どうやったらいいんで
しょう。Distinctで除外したいところですが、先ほどのコードだとうまくいき
ません。
無理やり書いたコードを以下に示します。

 XDocument xdoc = XDocument.Load("sample.xml");
 var query = from xbook in xdoc.Root.Elements()
             select xbook.Elements("authers");
 List<string> list = new List<string>();
 foreach (var xauthers in query) {
     var query2 = from xauther in xauthers.Elements("auther")
                  select xauther.Value;
     foreach (var name in query2)
         list.Add(name);
 }
 foreach (var name in list.Distinct())
     Console.WriteLine(name);

うーーん、全然イケてないですね。
もうすこし、LINQっぽく書けないものでしょうか。SelectManyメソッドを使う
ともう少しすっきりと書けそうです。
SelectManyメソッドは、クエリ式では、２つのfrom句として書けます。

 var query = from xbook in xdoc.Root.Elements()
             select xbook.Elements("authers");
 var names = (from xauthers in query
              from auther in xauthers.Elements("auther")
              select auther.Value).Distinct();
 foreach (var name in names)
     Console.WriteLine(name);

どうです。先ほどのコードよりずっとすっきりしましたね。

■□─────────────────────────────────
■□Descendantsメソッド

実は、目的を達成するコードはもっと簡単に書けるんです。
それには、XElementクラスのDescendants()メソッドを使います。
実は、僕はこのメソッドの存在をずーっと知らずに面倒なコードを書いていま
した。LINQ to Objectの知識が邪魔をしてしまったのだと思います。

Descendantsメソッドは、要素の[子孫]要素のフィルタ処理されたコレクショ
ンをドキュメント順に返します。つまり、孫、その孫まですべての要素が対象
になっているということです。

さて、コードを示しましょう。

 XDocument xdoc = XDocument.Load("sample.xml");
 var query = (from xAuther in xdoc.Root.Descendants("auther")
              select xAuther.Value).Distinct();
 foreach (var name in query)
     Console.WriteLine(name);

たったこれだけで、目的が達成できました。
知っていると知らないとで、これだけの差が出てしまうって、最近のプログラ
ミングは怖いですね。

───────────────────────────────────
『C#プログラミングレッスン』  (ぼぼ週刊）                             
───────────────────────────────────
 Published by Gushwell.                                               
   Copyright (C) 2004-2009 Gushwell All rights reserved.              
   Microsoft MVP - Visual C#(Apr 2005 - Mar 2009)                     

 <<■ Gushwell's Page ■>>
 窓際プログラマ―の独り言  ：http://blog.livedoor.jp/gushwell/        
 窓際プログラマ―の読書三昧：http://gushwell.jugem.jp/                
 Gushwell's C# Programming Page：http://gushwell.ifdef.jp/            
 C#デザインパタ―ン :                                                 
  『増補改訂版Java言語で学ぶデザインパタ―ン入門 / 結城 浩(著)』      
   のサンプルコ―ドをC#に移植したものを掲載しています。               
   移植後のコ―ドの公開は、結城氏の了解を得ています。                 
   http://gushwell.ifdef.jp/dp/csdpindex.html                         
───────────────────────────────────
