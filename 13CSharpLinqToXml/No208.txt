■━ [C#プログラミングレッスン] ━━━━━━━━━━━━━ No.208 ━□
  
   「LINQ to XML編」 -- 巨大な大きな XMLドキュメントを扱うには
                                                         by Gushwell  
□━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━■

「LINQ to XML編」の最後は、巨大なXMLを扱う際のテクニックについて紹介し
ます。

■□─────────────────────────────────
■□XML ドキュメントのストリ―ミング変換

今回紹介する手法は、MSDNライブラリの

「大きな XML ドキュメントのストリ―ミング変換を実行する」
 http://msdn.microsoft.com/ja-jp/library/bb387013.aspx

に掲載されているものですが、サンプルコ―ドが少々複雑なので、ここでは、
その本質部分だけを抜き出し、かなり単純化したコ―ドをお見せします。その
ほうが、理解の助けになると思うので。

以下のようなXMLを例にとり、巨大なXMLを扱う方法について説明します。

 <root>
     <company>
         <code>1234</code>
         <name>Microsoft</name>
     </company>
     <company>
         <code>2345</code>
         <name>IBM</name>
     </company>
     <company>
         <code>3456</code>
         <name>Apple</name>
     </company>
     ....  // company要素が大量に続く
 </root>


このXMLを、以下のような形式に変換したいとします。

 <root>
   <product code="1234">Microsoft</product>
   <product code="2345">IBM</product>
   <product code="3456">Apple</product>
   ...
 </root>
  
普通に書くと、

 XDocument xdoc = XDocument.Load("sample.xml");
 var query = from el in xdoc.Root.Elements()
             select new XElement("product",
                  new XAttribute("code", (string)el.Element("code")),
                  (string)el.Element("name"));
 XElement root = new XElement("root", query);
 root.Save("Test.xml");
 Console.WriteLine("Total Memory: {0}", GC.GetTotalMemory(true));
            
といったコ―ドになるでしょうか。
最後の行は、使用メモリを確かめるためのコ―ドです。

普通はこれで十分だと思いますが、非常に大きな XML ファイルの場合は、こ
のコ―ドでは、ファイルのサイズに比例してメモリが過剰に使用されてしまい
ます。

これを回避する一つの手法に、XStreamingElementを使う方法があります。先
ほどのコ―ドの下から３行目を

  XStreamingElement root = new XStreamingElement("root", query);

と書き換えます。
これで、実行し、GC.GetTotalMemory(true) の出力を見てみると、わずかにサ
イズが小さくなっていることがわかります。しかし、これだけでは、サイズに
比例して使用メモリが増えていってしまう部分は変わりありません。

そこで、XmlReaderを使い、さらに工夫をします。

 private void Sample() {
     var query = from el in StreamCompanies("sample.xml")
                 select new XElement("product",
                      new XAttribute("code", (string)el.Element("code")),
                      (string)el.Element("name"));
     XStreamingElement root = new XStreamingElement("root", query);

     root.Save("Test.xml");
 }

 static IEnumerable<XElement> StreamCompanies(string uri) {
     using (XmlReader reader = XmlReader.Create(uri)) {
         while (reader.Read()) {
             if (IsElement(reader, "company"))
                 yield return XElement.ReadFrom(reader) as XElement;
         }
     }
 }
            
XDocument.Load("sample.xml")をする代わりに、XmlReaderを使い、ひとつひ
とつ要素を読み込むようにします。このとき、yield return を使い、一度に
あつかう要素を１つのcompany要素に限定します。

このコードの最大の利点は、yield return を使った別メソッドを作成するこ
とで、本体のコードにはほとんど手を加えていないことです。本質部分のプロ
グラミングに集中できるということですね。

できれば、このコードも実際に動かして、使用メモリを確かめてください。
先ほどのコ―ドに比べ、かなり小さくなっているのがわかると思います。


■□─────────────────────────────────
■□おまけ、XPathSelectElements

LINQ to XML の最後の話題として、XPathSelectElementsメソッドについて
触れたいと思います。
名前空間 System.Xml.XPath を usingすることで、XPATHを LINQ to XMLの中
で使えるようになります。

  XDocument xdoc = XDocument.Load("people.xml");
  var q = from x in 
               xdoc.XPathSelectElements(@"//Person[@IsReal='false']")
          select x;
  q.ToList().ForEach(x => Console.WriteLine(x.Value));


XPATHに慣れている方は、こういった書き方も有りだと思いますが、XPATH得意
じゃ無い僕は、純粋なLINQ to XMLのほうが遥に楽です。


───────────────────────────────────
『C#プログラミングレッスン』  (ぼぼ週刊）                             
───────────────────────────────────
 Published by Gushwell.                                               
   Copyright (C) 2004-2009 Gushwell All rights reserved.              
   Microsoft MVP - Visual C#(Apr 2005 - Mar 2010)                     

 <<■ Gushwell's Page ■>>
 窓際プログラマ―の独り言  ：http://blog.livedoor.jp/gushwell/        
 窓際プログラマ―の読書三昧：http://gushwell.jugem.jp/                
 Gushwell's F# Programming Diary : http://techbank.jp/gushwell/ 
 Gushwell's C# Programming Page  ：http://gushwell.ifdef.jp/  
   C#デザインパタ―ン : http://gushwell.ifdef.jp/dp/csdpindex.html

 ☆メールマガジンの感想お待ちしています☆
   http://gushwell.ifdef.jp/mail.html
───────────────────────────────────
