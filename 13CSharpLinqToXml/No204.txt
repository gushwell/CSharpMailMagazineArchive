■━ [C#プログラミングレッスン] ━━━━━━━━━━━━━ No.204 ━□
  
   「LINQ to XML編」 -- ペア情報を管理する
                                                         by Gushwell  
□━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━■


■□─────────────────────────────────
■□ペア情報を子要素のセットとして保持する

多くのアプリケ―ションでは、名前と値のペアでデ―タを保持したい場合があ
ります。
LINQ to XML では、名前と値のペアのセットを簡単に保持できるようにするメ
ソッドがありますので、このようなXMLを簡単に作成できます。

以下のようなXMLを例に考えましょう。

 <?xml version="1.0" encoding="utf-8"?>
 <root>
   <left>10</left>
   <top>20</top>
   <width>120</width>
   <height>80</height>
   <Text>Hello</Text>
 </root> 

このXMLを作成するコードを示します。

 XDocument doc = new XDocument();
 XElement root = new XElement("root");
 doc.Add(root);
 root.SetElementValue("left", 10);
 root.SetElementValue("top", 20);
 root.SetElementValue("width", 120);
 root.SetElementValue("height", 80);
 root.SetElementValue("Text", "Hello");
 doc.Save("sample.xml");
 
SetElementValueメソッドを利用することで、名前と値をペアで保持する
XElementを要素に追加できます。
引数に、タグの名前と値を指定するだけです。最後に、Saveメソッドで保存し
てできあがりです。


■□─────────────────────────────────
■□ペア情報を属性として保持する

情報を（子要素ではなく）属性として保持することもできます。

属性として保持するにはSetAttributeValueメソッドを使います。
使い方は、SetElementValueメソッドと同じです。

 XDocument doc = new XDocument();
 XElement root = new XElement("root");
 doc.Add(root);
 root.SetAttributeValue("left", 10);
 root.SetAttributeValue("top", 20);
 root.SetAttributeValue("width", 120);
 root.SetAttributeValue("height", 80);
 root.SetAttributeValue("Text", "Hello");
 doc.Save("sample2.xml");


■□─────────────────────────────────
■□ペア情報を読み込む
     
今度は、これらのXMLを読み込んでみます。まずは、子要素として値を保持し
ているXMLから読み込むコードです。
     
 XDocument doc = XDocument.Load("sample.xml");
 var root = doc.Root;
 Console.WriteLine(root.Element("left").Value);
 Console.WriteLine(root.Element("top").Value);
 Console.WriteLine(root.Element("width").Value);
 Console.WriteLine(root.Element("height").Value);
 Console.WriteLine(root.Element("Text").Value);

次は、属性バージョンんです。

 XDocument doc = XDocument.Load("sample2.xml");
 var root = doc.Root;
 Console.WriteLine(root.Attribute("left").Value);
 Console.WriteLine(root.Attribute("top").Value);
 Console.WriteLine(root.Attribute("width").Value);
 Console.WriteLine(root.Attribute("height").Value);
 Console.WriteLine(root.Attribute("Text").Value);

これらのコ―ドは、今までの知識で理解できますね。

ここでは、単にコンソールに表示しているだけなので、データの型の違いにつ
いては意識していませんが、実際に、数値データとして取り出すのは、どうや
ってやるんだっけ？と思った方は、是非、再度、バックナンバーNo196を読み
返してください。

バックバンバー No196「条件指定でXML要素を取り出す」
http://archive.mag2.com/0000141533/20090217070000000.html


───────────────────────────────────
『C#プログラミングレッスン』  (ぼぼ週刊）                             
───────────────────────────────────
 Published by Gushwell.                                               
   Copyright (C) 2004-2009 Gushwell All rights reserved.              
   Microsoft MVP - Visual C#(Apr 2005 - Mar 2010)                     

 <<■ Gushwell's Page ■>>
 窓際プログラマ―の独り言  ：http://blog.livedoor.jp/gushwell/        
 窓際プログラマ―の読書三昧：http://gushwell.jugem.jp/                
 Gushwell's C# Programming Page：http://gushwell.ifdef.jp/            
 C#デザインパタ―ン :                                                 
  『増補改訂版Java言語で学ぶデザインパタ―ン入門 / 結城 浩(著)』      
   のサンプルコ―ドをC#に移植したものを掲載しています。               
   移植後のコ―ドの公開は、結城氏の了解を得ています。                 
   http://gushwell.ifdef.jp/dp/csdpindex.html                         
───────────────────────────────────
