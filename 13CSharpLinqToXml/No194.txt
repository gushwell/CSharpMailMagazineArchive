■━ [C#プログラミングレッスン] ━━━━━━━━━━━━━ No.194 ━□

   「LINQ to XML編」 -- 簡単なクエリ(2)
                                                         by Gushwell 
□━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━■

前回に引き続き、LINQ to XMLを使った簡単なクエリについて説明します。

■□―――――――――――――――――――――――――――――――――
■□ 匿名クラスを使う

今度は、書籍名に加え、価格も取り出したいと思います。

 XDocument xdoc = XDocument.Load("sample.xml");
 foreach (var xbook in xdoc.Root.Elements()) {
     XElement xtitile = xbook.Element("title");
     XElement xprice = xbook.Element("price");
     Console.WriteLine("{0} ({1})", xtitile.Value, xprice.Value);
 }

※ sample.xmlは、http://gushwell.ifdef.jp/mailmag/sample.xmlに掲載して
   あります。

前回のコ―ドが理解できていれば、このコ―ドは特に解説する必要はないでし
ょう。

実行すると、以下のような出力が得られます。

 XML Hacks (3360)
 C# CookBook (5200)
 C# 3.0 Design Patterns (4200)
 Linq in Action (4630)
 Xml Pocket Reference (1160)


これをクエリ式を使って書き直してみます。

 XDocument xdoc = XDocument.Load("sample.xml");
 var query = from xbook in xdoc.Root.Elements()
             select new {
                 Title = xbook.Element("title").Value,
                 Price = xbook.Element("price").Value
             };
 foreach (var book in query)
     Console.WriteLine("{0} ({1})", book.Title, book.Price);

select句では、匿名クラスを利用しています。これで、処理に必要な要素だけ
を取り出すことができます。
LINQ to Objectとは違い、匿名クラスのメンバ―であるプロパティ名は、既定
のプロパティ名を設定できませんので、上のコ―ドのように明示してあげる必
要があります。


■□―――――――――――――――――――――――――――――――――
■□ 並べ替え  orderby演算子

さらに、価格順に並べ替えてみましょう。

 XDocument xdoc = XDocument.Load("sample.xml");
 var query = from xbook in xdoc.Root.Elements()
             orderby (int)xbook.Element("price")
             select new {
                 Title = xbook.Element("title").Value,
                 Price = xbook.Element("price").Value
             };
 foreach (var book in query)
     Console.WriteLine("{0} ({1})", book.Title, book.Price);

先ほどのコ―ドにorderby句を付加しただけです。LINQ to XMLでは、XMLの要
素の値は、XElement型として取り扱いますが、

 (int)xbook.Element("price")

のようにキャストすることで、目的の型にキャストすることができるようにな
っています。

以下、実行した結果です。価格の昇順で並び変えがされています。

 Xml Pocket Reference (1160)
 XML Hacks (3360)
 C# 3.0 Design Patterns (4200)
 Linq in Action (4630)
 C# CookBook (5200)

このコ―ドをクエリ式を使わない拡張メソッド方式のコ―ドに直してみました。

 XDocument xdoc = XDocument.Load("sample.xml");
 var sortedBooks = xdoc.Root.Elements()
                       .OrderBy(e => (int)e.Element("price"));
 foreach (var xbook in sortedBooks) {
     XElement xtitile = xbook.Element("title");
     XElement xprice = xbook.Element("price");
     Console.WriteLine("{0} ({1})", xtitile.Value, xprice.Value);
 }

Slelect拡張メソッドを使えば、クエリ式と同じになりますが、あえて、ソ―
ト済みの Book要素のシ―ケンスを取り出すようにしてみました。
その後の処理でBook要素のすべての子要素を利用するのならば、これでも良い
かもしれませんが、一部の要素だけを参照しないのならば、Select句で必要な
要素だけを取り出すようにしたほうが可読性を高められると思います。

───────────────────────────────────
『C#プログラミングレッスン』  (ぼぼ週刊）                             
───────────────────────────────────
 Published by Gushwell.                                               
   Copyright (C) 2004-2009 Gushwell All rights reserved.              
   Microsoft MVP - Visual C#(Apr 2005 - Mar 2009)                     

 <<■ Gushwell's Page ■>>
 窓際プログラマ―の独り言  ：http://blog.livedoor.jp/gushwell/        
 窓際プログラマ―の読書三昧：http://gushwell.jugem.jp/                
 Gushwell's C# Programming Page：http://gushwell.ifdef.jp/            
 C#デザインパタ―ン :                                                 
  『増補改訂版Java言語で学ぶデザインパタ―ン入門 / 結城 浩(著)』      
   のサンプルコ―ドをC#に移植したものを掲載しています。               
   移植後のコ―ドの公開は、結城氏の了解を得ています。                 
   http://gushwell.ifdef.jp/dp/csdpindex.html                         
───────────────────────────────────
