┏━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━┳━┳━┓
┃☆┃ C#プログラミングレッスン                         ┃＿┃□┃×┃
┣━┻━━━━━━━━━━━━━━━━━━━━━━━━━┻━┻━┻━┫
┃ C#3.0-ラムダ式(2)                                          No.161┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

List<T>クラスを例にとり、ラムダ式の使い方を見ていきましょう。

■──────────────────────────────────
■ List<T>クラスとラムダ式の組み合わせ

List<T> クラスは、delegateを受け取るメソッドがたくさん用意されています
が、List<T>とラムダ式の組み合わせ見ていきましょう。
たくさんの例を見ることで、ラムダ式のイメージがつかめると思います。

 var list = new List<string> { 
      "Microsoft", "Apple", "IBM", "Google", "HP"
 };

というList<string>のコレクションに対するラムダ式を使った例を示します。
結果はあえて載せませんので、ご自身で動かして確かめてください。

■Findメソッド

 var name = list.Find(s => s.Length == 3);
 Console.WriteLine(name);

これは、長さが 3 である文字列を求めています。
コレクションの要素一つ一つが、s に代入され、比較を行っているわけですね。

■Existsメソッド

 var b = list.Exists(s => s[0] == 'D');
 Console.WriteLine(b);

最初の文字が、'D'である文字列が、コレクションにあるかどうかを調べてい
ます。

■FindIndexメソッド

 int index = list.FindIndex(s => s == "Apple");
 Console.WriteLine(index);

文字列 "Apple"が、格納されているインデックスを調べています。

■ForEachメソッド

 list.ForEach(s => Console.WriteLine(s));

すべての要素を、Consoleに出力しています。

 foreach ( var s in list )
     Console.WriteLine(s);

と同等のコードです。

■Sortメソッド

 list.Sort((x, y) => x.Length - y.Length);
 list.ForEach(s => Console.WriteLine(s));

list を文字列の長さの順（短い順）にソートし、その結果を順に表示してい
ます。

■ConvertAllメソッド

 var list2 = list.ConvertAll(s => s.ToLower());
 list2.ForEach(s => Console.WriteLine(s));

list内のすべての要素をToLowerで小文字に変換し、その結果を新たなリスト
に代入しています。
listそのものは変化しません。


---------------------------------------
さて、次回からはいよいよ LINQ to Object について説明に入っていきます。
２，３週お休みいただいた後、再開いたしますので、ご期待ください。

┌─┬─────────────────────────┬─┬─┬─┐
│☆│ C#プログラミングレッスン  (ぼぼ週刊）            │＿│□│×│
├─┴─────────────────────────┴─┴─┴─┤
│ Published by Gushwell.                                           │
│ Copyright (C) 2004-2007 Gushwell All rights reserved.            │
│ Microsoft MVP Visual Developer - Visual C#(Apr 2005 - Mar 2009)  │
│-------------------- Gushwell's Page ---------------------------- │
│ 窓際プログラマーの独り言  ：http://blog.livedoor.jp/gushwell/    │
│ 窓際プログラマーの読書三昧：http://gushwell.jugem.jp/            │
│ Gushwell's C# Programing Page：http://gushwell.ifdef.jp/         │
│ C#デザインパターン :                                             │
│  『増補改訂版Java言語で学ぶデザインパターン入門 / 結城 浩(著)』  │
│   のサンプルコードをC#に移植したものを掲載しています。           │
│   移植後のコードの公開は、結城氏の了解を得ています。             │
│   http://blog.livedoor.jp/gushwell/archives/50333227.html        │
└─────────────────────────────────┘

