┏━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━┳━┳━┓
┃☆┃ C#プログラミングレッスン                         ┃＿┃□┃×┃
┣━┻━━━━━━━━━━━━━━━━━━━━━━━━━┻━┻━┻━┫
┃ C#3.0-ラムダ式(1)                                          No.160┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

ラムダ式とは何か？　小難しい説明は抜きにして、C#1.xの記法から C#3.0の
ラムダ式を使った記法までの遷移を見てゆくことで、ラムダ式を理解しましょ
う。

■──────────────────────────────────
■ C#2.0までの記法

まずは、C#1.xのdelegateの復習から。

 delegate int MyFunction(int i);

 int Triple(int n) {
     return n * 3;
 }

  void TestDelegate() {
     // C#1.x
     MyFunction f = new MyFunction(Triple);
     int n = f(11);
     Console.WriteLine(n);
 }

このコードは、ほとんど意味がないコードですが、delegateの動きを説明した
ものとなっています。
TestDelegateメソッドでは、まず、Tripleメソッドを、MyFunctionデリゲート
インスタンスとして記憶します。
その後、f(11); の部分で、間接的にTripleメソッドを呼び出しています。


これが、C#2.0の匿名メソッドを使うと、こんな書き方になります。

 delegate int MyFunction(int i);

 void TestAnonymous() {
     // C#2.0 匿名メソッド
     MyFunction f = delegate(int x) { return x * 3; };
     n = f(20);
     Console.WriteLine(n);
 }

わざわざ Tripleというメソッドを定義する必要がなくなったわけですね。


■──────────────────────────────────
■ ラムダ式を使った記法

C#3.0では、前述のコードが、

 delegate int MyFunction(int i);

 void TestRamda() {
     // C#3.0 ラムダ式
     MyFunction f = (int x) => { return x * 3; };   // (*)
     n = f(30);
     Console.WriteLine(n);
 }

と書けます。C#2.0 と C#3.0 とでは、記述方法が変化しただけと見ることも
できます。
delegateが無くなり、その代わりに => が使われています。
int型の引数xを受け取って、x * 3 の結果を返す名前なしのメソッドを f に
代入していると考えればよいでしょう。

この (*)の記述は、さらに、以下のように、短くしてゆくことができます。

    MyFunction f = (int x) => return x * 3;  

    MyFunction f = (int x) => x * 3;

    MyFunction f = (x) => x * 3;

    MyFunction f = x => x * 3;

最終的には、以下のようになります。

 delegate int MyFunction(int i);

 void TestRamda() {
     // C#3.0 ラムダ式
     MyFunction f = x => x * 3;
     n = f(30);
     Console.WriteLine(n);
 }

最初のC#1.xだと、10行程度のコードが必要でしたが、C#3.0では、その半分く
らいに減っています。

┌─┬─────────────────────────┬─┬─┬─┐
│☆│ C#プログラミングレッスン  (ぼぼ週刊）            │＿│□│×│
├─┴─────────────────────────┴─┴─┴─┤
│ Published by Gushwell.                                           │
│ Copyright (C) 2004-2007 Gushwell All rights reserved.            │
│ Microsoft MVP Visual Developer - Visual C#(Apr 2005 - Mar 2008)  │
│-------------------- Gushwell's Page ---------------------------- │
│ 窓際プログラマーの独り言  ：http://blog.livedoor.jp/gushwell/    │
│ 窓際プログラマーの読書三昧：http://gushwell.jugem.jp/            │
│ Gushwell's C# Programing Page：http://gushwell.ifdef.jp/         │
│ C#デザインパターン :                                             │
│  『増補改訂版Java言語で学ぶデザインパターン入門 / 結城 浩(著)』  │
│   のサンプルコードをC#に移植したものを掲載しています。           │
│   移植後のコードの公開は、結城氏の了解を得ています。             │
│   http://blog.livedoor.jp/gushwell/archives/50333227.html        │
└─────────────────────────────────┘
