┏━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━┳━┳━┓
┃☆┃ C#プログラミングレッスン                         ┃＿┃□┃×┃
┣━┻━━━━━━━━━━━━━━━━━━━━━━━━━┻━┻━┻━┫
┃ C#3.0-コレクション初期化子　　　　　　                     No.156┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

地味な話が続きますが、ご勘弁を。

■──────────────────────────────────
■コレクション初期化以前

まずは、intの配列を初期化するコードを考えてみましょう。

 int[] nums = { 1, 2, 3, 4 };

とすれば、OKですね。
では、同じ事を List<int>では、どうやれば良いんでしょうか。

C#2.0では、２つの方法がありました。

 List<int> nums = new List<int>();
 nums.Add(1);
 nums.Add(2);
 nums.Add(3);
 nums.Add(4);

もう一つの方法が、

 List<int> nums = new List<int>(new int[] { 1, 2, 3, 4});

です。どちらも面倒ですよね。

■──────────────────────────────────
■コレクション初期化

C#3.0では、

 var nums = new List<int> { 1, 2, 3, 4  };

と、簡潔に記述することができるようになりました。
なお、この初期化構文が使えるのは、 System.Collections.IEnumerableを実
装している型である必要があります。

 public class Person {
     public string Name { get; set; }
     private List<string> _phoneNos = new List<string>();
     public List<string> PhoneNos {
         get { return _phoneNos; }
     } 
 }


という型が定義されていた時に、

 var list = new List<Person> {
     new Person { Name = "桂小五郎", PhoneNos = { "000-111-2222", 
                                                  "000-111-9999" } },
     new Person { Name = "西郷隆盛", PhoneNos = { "111-222-3333" } },
 };   

のように、初期化することもできます。

Personクラスでは、PhoneNos は、

private List<string> _phoneNos = new List<string>();

の部分で、インスタンスが確保されています。
このときは、

 PhoneNos = new List<string> { "000-111-2222", "000-111-9999" }

ではなくて、

 PhoneNos = { "000-111-2222", "000-111-9999" }

のように、初期化することとなりますので注意してください。

参考文献
『C#3.0の概要』
 http://www.microsoft.com/japan/msdn/net/bb308966.aspx

┌─┬─────────────────────────┬─┬─┬─┐
│☆│ C#プログラミングレッスン  (ぼぼ週刊）            │＿│□│×│
├─┴─────────────────────────┴─┴─┴─┤
│ Published by Gushwell.                                           │
│ Copyright (C) 2004-2007 Gushwell All rights reserved.            │
│ Microsoft MVP Visual Developer - Visual C#(Apr 2005 - Mar 2008)  │
│-------------------- Gushwell's Page ---------------------------- │
│ 窓際プログラマーの独り言  ：http://blog.livedoor.jp/gushwell/    │
│ 窓際プログラマーの読書三昧：http://gushwell.jugem.jp/            │
│ Gushwell's C# Programing Page：http://gushwell.ifdef.jp/         │
│ C#デザインパターン :                                             │
│  『増補改訂版Java言語で学ぶデザインパターン入門 / 結城 浩(著)』  │
│   のサンプルコードをC#に移植したものを掲載しています。           │
│   移植後のコードの公開は、結城氏の了解を得ています。             │
│   http://blog.livedoor.jp/gushwell/archives/50333227.html        │
└─────────────────────────────────┘
 