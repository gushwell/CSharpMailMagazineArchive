┏━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━┳━┳━┓
┃☆┃ C#プログラミングレッスン                         ┃＿┃□┃×┃
┣━┻━━━━━━━━━━━━━━━━━━━━━━━━━┻━┻━┻━┫
┃ C#3.0-暗黙的に型指定された配列　　　　                     No.158┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

■──────────────────────────────────
■ 暗黙的に型指定された配列


No153の「暗黙的に型指定されたローカル変数」の説明において、

 var a1 = new int[] { 1, 2, 3, 4, 5 };

のように書けることは説明しましたが、配列については、

 var a1 = new[] { 1, 2, 3, 4, 5 };　　　　　　　// intを省略
 var a2 = new[] { "one", "two", "three" };　　　// stringを省略

のように型を指定しなくても、コンパイラが型を推論してくれるようになりま
した。

a1, a2はそれぞれ、int[], string[] となります。

なお、以下の記述はコンパイルエラーとなります。

 // 複数の型が指定されているため、型推論が失敗する
 var a3 = new[] { "one", "two", "three", 4 };

 // nullを許容しない値型と null の両方が指定されている
 var a4 = new[] { null, 1, 2, 3 };


■──────────────────────────────────
■ 匿名型との組み合わせによる配列の初期化

匿名型との組み合わせで以下のようなオブジェクトを生成することも可能です。

 var contacts = new[] {
     new {
         Name = "Chris smith",
         PhoneNumbers = new[] { "206-555-0101", "425-882-8080" }
     },
     new {
         Name = "Bob Harris",
         PhoneNumbers = new[] { "650-555-0199" }
     },
 };

上記のようなコードは、ちょっとした確認コードを書くときにとても便利です
よね。

ただ、匿名型のオブジェクトは、他のメソッドに引数として渡すことはできま
せん。正確にいえば出来るけど、受け取ったメソッドでは、object型としてし
か扱えません。
キャストしようにも名前がないから、キャストもできません。
リフレクションで無理やり操作するという手はありますが...
ローカル専用の機能だと思ってもらったほうが良いですね。


┌─┬─────────────────────────┬─┬─┬─┐
│☆│ C#プログラミングレッスン  (ぼぼ週刊）            │＿│□│×│
├─┴─────────────────────────┴─┴─┴─┤
│ Published by Gushwell.                                           │
│ Copyright (C) 2004-2007 Gushwell All rights reserved.            │
│ Microsoft MVP Visual Developer - Visual C#(Apr 2005 - Mar 2008)  │
│-------------------- Gushwell's Page ---------------------------- │
│ 窓際プログラマーの独り言  ：http://blog.livedoor.jp/gushwell/    │
│ 窓際プログラマーの読書三昧：http://gushwell.jugem.jp/            │
│ Gushwell's C# Programing Page：http://gushwell.ifdef.jp/         │
│ C#デザインパターン :                                             │
│  『増補改訂版Java言語で学ぶデザインパターン入門 / 結城 浩(著)』  │
│   のサンプルコードをC#に移植したものを掲載しています。           │
│   移植後のコードの公開は、結城氏の了解を得ています。             │
│   http://blog.livedoor.jp/gushwell/archives/50333227.html        │
└─────────────────────────────────┘
