┏━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━┳━┳━┓
┃☆┃ C#プログラミングレッスン                         ┃＿┃□┃×┃
┣━┻━━━━━━━━━━━━━━━━━━━━━━━━━┻━┻━┻━┫
┃ C#3.0-匿名型              　　　　　　                     No.157┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

■──────────────────────────────────
■ 匿名型

C#3.0では、名前の無い匿名型がサポートされています。

例を示しましょう。

 var obj = new { Name = "Gushwell", Id = 123 }; //★
 Console.WriteLine(obj.Name);
 Console.WriteLine(obj.Id);

★の行が匿名方型のインスタンスを生成しているところです。
Name, Id はプロパティとして機能します。

★の行を、C#2.0で記述してみたのが以下のコードです。

 class _AnonymousType {
     private string _name;
     private int _id;
     public string Name {
         get { return _name; } set { _name = value; }
     }
     public int Id {
         get { return _id; } set { _id = value; }
     }
 }
 ...

 _AnonymousType obj = new _AnonymousType();
 obj.Name = "Gushwell";
 obj.Id = 123;

これだけの行がたった１行で済んでしまっています。

同じプロパティをもった匿名型は、同じ型とみなされます。

 var obj = new { Name = "Gushwell", Id = 123 };
 var obj2 = new { Name = "Adam", Id = 456 };
 if ( obj.GetType() == obj2.GetType() )
     Console.WriteLine("Same Type");

上記コードでは、obj と obj2 は同じ型となりますので、"Same Type"が表示
されます。

当然のことながら、以下のようなコードも可能です。

 var obj = new { Name = "Gushwell", int Id = 123 };

 // 他のオブジェくトを参照可
 var obj2 = new { Name = "Adam", Id = obj.Id + 1 };  

 var obj3 = new { Name = "", Id = 0 };
 // 同じ型なので代入できる
 obj3 = obj;   

名前がありませんので、メソッドの引数として受け渡すということには適して
いません。あくまでもテンポラリで独自の型を利用したいときに利用できます。
では、具体的にどんな場面で利用するのか疑問に思う方も多いと思いますが、
この匿名型は、C#3.0で導入された LINQと共に使うことで威力を発揮します。
それについては、また別の機会に。

参考文献
『C#3.0の概要』
 http://www.microsoft.com/japan/msdn/net/bb308966.aspx


┌─┬─────────────────────────┬─┬─┬─┐
│☆│ C#プログラミングレッスン  (ぼぼ週刊）            │＿│□│×│
├─┴─────────────────────────┴─┴─┴─┤
│ Published by Gushwell.                                           │
│ Copyright (C) 2004-2007 Gushwell All rights reserved.            │
│ Microsoft MVP Visual Developer - Visual C#(Apr 2005 - Mar 2008)  │
│-------------------- Gushwell's Page ---------------------------- │
│ 窓際プログラマーの独り言  ：http://blog.livedoor.jp/gushwell/    │
│ 窓際プログラマーの読書三昧：http://gushwell.jugem.jp/            │
│ Gushwell's C# Programing Page：http://gushwell.ifdef.jp/         │
│ C#デザインパターン :                                             │
│  『増補改訂版Java言語で学ぶデザインパターン入門 / 結城 浩(著)』  │
│   のサンプルコードをC#に移植したものを掲載しています。           │
│   移植後のコードの公開は、結城氏の了解を得ています。             │
│   http://blog.livedoor.jp/gushwell/archives/50333227.html        │
└─────────────────────────────────┘
