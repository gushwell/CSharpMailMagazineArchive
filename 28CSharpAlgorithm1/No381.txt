
■━ [C#プログラミングレッスン] ━━━━━━━━━━━━━━━ No.381 ━□

「アルゴリズム編」-- 文字列操作(1)
                                                           by Gushwell
□━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━■

みなさんおはようございます。早いもので、２０１３年もあと一ヶ月を切ってしま
いました。メールマガジンの発行を１年間継続するという目標はなんとか達成でき
そうです。「終わりよければすべて良し」と言いますので、この一ヶ月内容の濃い
メルマがを発行し、良い締めくくりになるようがんばりたいと思います。
さて、それでは、前号でお知らせしたように、書籍『世界で闘うプログラミング力
を鍛える150問』に掲載されている問題を解いていきましょう。

■□───────────────────────────────────
■□ 問題 （カテゴリ:文字列、配列操作)

ある文字列がすべてユニークである（重複する文字が無い）かどうかを判定するア
ルゴリズムを実装してください。
また、それを実装するのに新たなデータ構造が使えない場合、どのようにすれば良
いですか？
  出展：『世界で闘うプログラミング力を鍛える150問』P-75
  http://www.amazon.co.jp/exec/obidos/ASIN/4839942390/gaius-22/


■□───────────────────────────────────
■□ 普通に問題を解く

問題の「また、」以降については、後から考えることにして、「文字列がすべてユ
ニークであるかどうかを判定するアルゴリズム」について検討します。
いちいちループ処理書くのは面倒なので、StringクラスかLINQで何か良いメソッド
は無いかなと考えると、Distinctメソッドが思い浮かびます。
Distinctメソッドは、重複する要素を取り除くメソッドです。重複が無いというこ
とは、重複要素を取り除いても、元と変化ないということですから、こんな感じか
な。

 static bool IsUniq(string s) {
     return s.Distinct().Count() == s.Length;
 }

このコードは、LINQのDisctinctメソッドで重複を排除した文字数と元の文字列の文
字数とを比較するというもの。普段からLINQを使っている人は、このコードは苦労
することなく思いつくと思います。

簡単な確認コードを書いてみます。


 static void Main(string[] args) {
     Console.WriteLine(IsUniq("1234567890"));          // true
     Console.WriteLine(IsUniq("1234567asdf890"));      // true
     Console.WriteLine(IsUniq("12345617890"));         // false
     Console.WriteLine(IsUniq("1234567asdf890d"));     // false
     Console.ReadLine();
 }


期待通りの結果が表示されたので、正しく動作しているようです。


■□───────────────────────────────────
■□ さらに別解を考える

でも、きっと求められているのはこういったコードではなく自分でアルゴリズムを
考えろ、ということだと思うので、別のアプローチも考えてみます。

そうなると当然ながら文字列を１文字ずつ走査するコードとなりますよね。
１文字ずつ順に見ていき、どの文字が表れたかを記憶しておいて、すでに記憶して
ある文字と同じ文字が出てきたらユニークではないと判断できますね。最後まで走
査できればユニークであるということですね。

問題は、どうやって文字を記憶するかです。配列、リストいろいろデータ構造はあ
りますが、Dictionary<TKey, TValue>クラスを使えば、効率よく判断ができそうで
す。
以下のコードを書いてみました。

 static bool IsUniq(string s) {
     Dictionary<char, int> dict = new Dictionary<char, int>();
     foreach (var c in s) {
         if (dict.ContainsKey(c))
             return false;
         dict.Add(c,0);
     }
     return true;
 }


Dictionaryは、Key-Value形式のデータを保持するのに適していて、ハッシュテーブ
ルとして実装されているため、キーを使用した値の取得は非常に高速で、O(1) に近
くなります。
O(1)とは、計算量を表し、テータの数に依存せずに常に一定であることを示します
ので、データ量に依存せずに、安定した速度で（かつ高速に）結果を得ることがで
きます。


■□───────────────────────────────────
■□ 発展問題を考える

さて、それでは、問題文の「また」以降の課題に挑戦しましょう。
問題では、「それを実装するのに新たなデータ構造が使えない場合、どのようにす
れば良いですか？」とあるので、Dictionaryなどのクラスを使わない実装が求めら
れていることになります。
となると...、

 "おはようございます"

という文字列で考えてみます。
まずは、先頭の "お" が重複していないかを調べ、次に、"は"が重複していないか
を調べ、次に "よ"が重複していないかを調べ... を最後まで繰り返していけば良い
わけですね。
途中で重複が見つかれば、検査を終わらせることになります。最後の文字 "す" ま
でいけば、ユニークだと判断できます。

じゃあ、「重複していないか」ってどうするの？という点が問題です。

例えば、"お"、"は"、"よ"と検査が進み、今、4文字目の "う" に注目しているとし
ましょう。やることは、"う"が、他にあるかないかを調べることです。あれば重複
していると判断し、他になければ、重複していないということです。

このとき、"う"より左にある文字を検査しても、絶対に "う"は無いはずですよね。
だって、4文字目まで検査が進んだということは、それより左には、重複している文
字が無いということですから。もし、３文字目までで重複が見つかっていれば、検
査を中断しているので、４文字目まで処理は進みませんからね。

なので、４文字目の "う" より右側にある文字だけを見て、"う"があるかどうかを
調べれば良いということになります。

この方法をコードにしたのが次に示すメソッドです。


  static bool IsUniq(string s) {
      for (int i = 0; i < s.Length; i++) {
          char c = s[i];
          for (int j = i + 1; j < s.Length; j++) {
              if (c == s[j])
                  return false;
          }
      }
      return true;
  }

外側のfor文で、文字を１文字ずつ操作しています。そして内側のfor文で、今注目
している文字（ここでは変数 c に格納）が、自身よりも右側をみて重複しているか
どうかを調べています。重複していれば、処理を中断し、即falseを返します。
最後まで走査が済めば（外側のループから抜ければ）、重複が無いことになります
ので、trueを返します。


文字列が長くなると、効率はDictionaryを使うやり方より悪いですが、余分なメモ
リを消費しないというメリットはあります。計算量は、平均で O((n+1)n)/4) でし
ょうか？ （nはデータ量）

----
アプリケーションの種類によると思いますが、実際の業務では、計算量を厳密に求
めるようなことはあまり無いのではと思います。少なくても僕は実際の業務でO表記
をしたことはありません(^^;;   なので、以降の回では、たぶんO表記を使うことは
ないと思いますが、計算量が、O(1)なのか、o(n) なのか O(n^2)なのか、それとも
その中間くらいか、グラフで書くとどういった曲線になりそうかくらいは、把握し
ておくと良いと思います。


■□───────────────────────────────────
■□ 次回の問題

2つの文字列が与えられたとき、片方がもう片方の並び替えになっているかどうかを
決定するメソッドを書いてください。

  出展：『世界で闘うプログラミング力を鍛える150問』P-75
  http://www.amazon.co.jp/exec/obidos/ASIN/4839942390/gaius-22/


─────────────────────────────────────
『C#プログラミングレッスン』  (ほぼ週刊）
☆皆さまからの感想をお待ちしています。http://gushwell.ifdef.jp/mail.html
─────────────────────────────────────
Published by Gushwell.
Copyright (C) 2013 Gushwell All rights reserved.
Microsoft MVP for Visual C#(Apr 2005 - Mar 2014)

■Gushwell's Page
facebook Page                     : http://www.facebook.com/CSharpLesson
Gushwell's C# Dev Notes           : http://gushwell.ldblog.jp/
Gushwell's C# Programming Page    : http://gushwell.ifdef.jp/
気ままな読書ノート                : http://gwbooks.hatenablog.com/
Twitterアカウント                 : @gushwell
─────────────────────────────────────
