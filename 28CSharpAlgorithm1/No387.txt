■━ [C#プログラミングレッスン] ━━━━━━━━━━━━━━━ No.387 ━□

「アルゴリズム編」-- リンクリスト(2)
                                                           by Gushwell
□━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━■

●お知らせ

来たる3月17日から3月22日の6日間、MVP Community Camp 2014というどなたでもご
参加いただける IT 勉強会が開催されます。最初の 5 日間では誰でもどこからでも
アクセス可能なLive Webcastによるオンラインセミナーを、そして最終日には、各
都市の会場にてカンファレンスが開催されます。Microsoftの最新テクノロジーに興
味のある方は是非参加を検討なさってください。
http://mvp.microsoft.com/ja-jp/ComCamp2014.aspx



それでは、本題にはいりましょう。前回は問題を解くための準備として単方向リン
クリストのクラスを実装しました。今週は、そのリンクリストクラスを使い、実際
に問題を解いていきます。

■□───────────────────────────────────
■□ 問題 （リンクリスト）

ソートされていない連結リストから、重複する要素を削除するコードを書いてくだ
さい。

発展問題
もし、一時的なバッファが使用できないとすれば、どうやってこの問題を解きます
か？

  出展：『世界で闘うプログラミング力を鍛える150問』
  http://www.amazon.co.jp/exec/obidos/ASIN/4839942390/gaius-22/


■□───────────────────────────────────
■□ 問題を解く

では、先週作成した SingleLinkedList<T> を使い、問題を解いてみます。

重複した要素を削除するコードを書くわけですが、ここでは、要素が重複していお
る場合はリストの先頭に近いほうの要素を残すことにします。

どうやって重複を判断するかですが、まずは、Dictionaryクラスを使ってみました。
Dictionaryには、リストに存在する要素をキーとして格納していくことにします。
Valueはなんでもかまいません。
リストを順に辿り、Dictionaryに存在していなければ、重複はしていないので
Dictionaryに現在の要素を追加します。
Dictionaryに存在していれば、要素が重複するわけですから、現在注目している要
素をリストから削除します。Dictionaryに存在していなければ、その要素を
Dictionaryに追加していきます。
やっていることは、No.381 で解いた文字列操作の問題ととても似ていますね。

重複を削除するDistinct<T>メソッドをしまします。

 static void Distinct<T>(SingleLinkedList<T> list) {
     Dictionary<T, bool> dict = new Dictionary<T, bool>();
     Node<T> curr = list.Head;
     Node<T> prev = null;
     while (curr != null) {
         if (dict.ContainsKey(curr.Value)) {
             prev.Next = curr.Next;
         } else {
             dict.Add(curr.Value, true);
             prev = curr;
         }
         curr = curr.Next;
     }
 }

本来ならば、ノードの削除などもSingleLinkedList<T>のメソッドとして定義してお
くべきものかも知れませんが、ここでは、SingleLinkedListを利用する側で、Node.
Nextを直接操作しています。


リストから要素を削除するには、削除するNodeのひとつ前のNodeもわからないと削
除ができませんので、prev変数でそれがわかるようにしています。

リストからの削除はをやっているコードが、

   prev.Next = curr.Next;

のコードです。こうすることで、currのノードがリストから削除されるます。

■削除前
 +----+----+   +----+----+   +----+----+  
 |    |  --+-->|    |  --+-->|    |    |  
 +----+----+   +----+----+   +----+----+  
    prev          curr          next

■削除後
 +----+----+                 +----+----+  
 |    |  --+---------------->|    |    |  
 +----+----+                 +----+----+  
    prev                        next


リンクから外れた currのオブジェクトの破棄は、.NET Frameworkがやってくれるの
で、特にコードを書く必要はありません。


なお、prevを更新するのは、注目しているNodeの要素が重複していなかったときだ
けです。重複していた場合は、currノードはリストから削除されていますので、
prevの値はそのままとします。
これを間違うと正しい処理が行えないので注意してください。


■□───────────────────────────────────
■□ 動作確認するコードを書いてみる

このDistinct<T>メソッドの動作を確認するコードを書いてみましょう。

  var list = new SingleLinkedList<int>();
  list.Append(1);
  list.Append(1);
  list.Append(2);
  list.Append(3);
  list.Append(4);
  list.Append(1);
  list.Append(2);
  list.Append(3);
  list.Append(3);
  list.Append(4);
  list.Append(5);
  list.Append(4);
  Distinct(list);
  list.ForEach(x => Console.WriteLine(x));
  Console.ReadLine();

結果は以下のように表示されます。

 1
 2
 3
 4
 5


■□───────────────────────────────────
■□ 発展問題を解いてみる

それでは、発展問題を解いてみましょう。一時的なバッファを利用できないわけで
すから、一時バッファとして利用していた Dictionaryクラス が利用できないとい
うことです。
こんな風にすれば、それが実現できそうです。

 1. 先頭のNodeを取り出して、Currに入れる。
 2. Currより後ろの要素にCurrと同じ値があればそれをリストから削除する。
 3. Currの次のNodeを新しいCurrとする。
 4. ２に戻り、これを最後まで繰り返す。


この考えで書いたのが以下のコードです。

  static void Distinct<T>(SingleLinkedList<T> list) {
      Node<T> curr = list.Head;
      while (curr != null) {
          RemoveIt(curr);
          curr = curr.Next;
      }
  }

  static void RemoveIt<T>(Node<T> node) {
      T obj = node.Value;
      Node<T> prev = node;
      Node<T> curr = node.Next;
      while (curr != null) {
          if (curr.Value.Equals(obj))
              prev.Next = curr.Next;
          else
              prev = curr;
          curr = curr.Next;
      }
  }


RemoveIt メソッドが、上記手順の２を実装したメソッドです。


------

実際のアプリケーションではリンクリストが登場する機会はそれほど多くはないと
思いますが、要素の挿入、削除が高い頻度で行われる場合はとても有効なデータ構
造です。.NET Frameworkには、単方向リストはありませんが、双方向リストである
LinkedList ジェネリック クラスが用意されています。
高機能な分ちょっと使いにくい面がありますが、挿入、削除を繰り返す処理では、
その威力は絶大です。機会があれば、利用してみてください。



■□───────────────────────────────────
■□ 次回の問題 （リンクリスト）

単方向連結リストにおいて、末尾から数えてk番目の要素を見つけるアルゴリズムを
実装してください。

  出展：『世界で闘うプログラミング力を鍛える150問』
  http://www.amazon.co.jp/exec/obidos/ASIN/4839942390/gaius-22/


─────────────────────────────────────
『C#プログラミングレッスン』  (ほぼ週刊）
☆皆さまからの感想をお待ちしています。http://gushwell.ifdef.jp/mail.html
─────────────────────────────────────
Published by Gushwell.
Copyright (C) 2013 Gushwell All rights reserved.
Microsoft MVP for Visual C#(Apr 2005 - Mar 2014)

■Gushwell's Page
facebook Page                     : http://www.facebook.com/CSharpLesson
Gushwell's C# Dev Notes           : http://gushwell.ldblog.jp/
Gushwell's C# Programming Page    : http://gushwell.ifdef.jp/
気ままな読書ノート                : http://gwbooks.hatenablog.com/
Twitterアカウント                 : @gushwell
─────────────────────────────────────
