■━ [C#プログラミングレッスン] ━━━━━━━━━━━━━━━ No.382 ━□

「アルゴリズム編」-- 文字列操作(2)
                                                           by Gushwell
□━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━■

おはようございます。アルゴリズム編の第2回目も文字列操作に関する問題です。


■□───────────────────────────────────
■□ 問題

2つの文字列が与えられたとき、片方がもう片方の並び替えになっているかどうかを
決定するメソッドを書いてください。

  出展：『世界で闘うプログラミング力を鍛える150問』P-75
  http://www.amazon.co.jp/exec/obidos/ASIN/4839942390/gaius-22/


■□───────────────────────────────────
■□ 普通に問題を解く

ん、並び替え？並びかえってなんでしょう？ 昇順とか降順とか逆順とかランダムと
書いてあればいいのですが、書いていないということは、どんな並び順でも良いと
いうことなのかな？そういう前提で問題を解いてゆくことにします。

前回と同様に、LINQを使うと以下のように書けます。


 private static bool IsRearrangement(string str1, string str2) {
     return str1.OrderBy(c => c).SequenceEqual(str2.OrderBy(c => c));
 }


str1とstr2を昇順に並び替えて、同じかどうかを比較するというものです。
比較には SequenceEqualを使っています。
ともに昇順にして結果が同じならば、片方がもう片方の並び替えであるといえます
ね。

昇順に並び替えた結果を文字列に戻してから比較しようとすると、以下のようなコ
ードになって、複雑になってしまいます。


 private static bool IsRearrangement2(string str1, string str2) {
     string s1 = new string(str1.OrderBy(c => c).ToArray());
     string s2 = new string(str2.OrderBy(c => c).ToArray());
     return s1 == s2;                    
 }


■□───────────────────────────────────
■□ さらに別解を考える（１）

ではLINQを使わずに実装するにはどうすればよいでしょうか？
たぶん、出題者は、LINQを使わずに解く事を期待しているはずです。

ということで、考えて見ましょう。
文字配列に変換すれば、Array.Sortメソッドが使えますので、先ほどと同じように
ソートするやり方もありますね。
しかし、ここではソートをしないやり方を考えてみます。

２つの文字列を str1, str2とします。str2の文字列をひとつずつ取り出して、それ
が、str1にあるかどうかを調べれば良いですね。
でも、str2の中に同じ文字が複数あった場合は、str1にも、同じ数だけその文字が
存在しないといけないので、そこが注意点ですね。

やはり、速度を考えれば前回同様、Dictionary<TKey, TValue>を使うのがよさそう
です。
このDictionaryには、文字をKeyに、その出現回数をValueとして保持することにし
ます。そうすれば、同じ文字が複数あっても対応ができます。
つまりやりたい事は、以下の通りです。

 1. str1 を Dictionary<char,int>に変換する。変換したものを dictと呼ぶことと
    する。
 2. str2から１文字ずつ取り出し、dictにあれば、出現回数を-1する。
    dictになければ、並び替えになっていないので、ここで処理は停止。
 3. dictのすべての出現回数が、0 ならば、並び替えになっている。

これをC#のコードにしたのが、次に示すコードです。


 private static bool IsRearrangement(string str1, string str2) {
     Dictionary<char, int> dict = new Dictionary<char, int>();
     foreach (var c in str1) {
         if (!dict.ContainsKey(c))
             dict[c] = 0;
         dict[c] += 1;
     }
     foreach (var c in str2) {
         if (!dict.ContainsKey(c)) 
             return false;
         dict[c] -= 1;
     }
     foreach (var val in dict.Values) {
         if (val != 0)
             return false;
     }
     return true;
 }


■□───────────────────────────────────
■□ さらに別解を考える（２）

Dictionaryを使わない方法も考えてみましょう。
先ほどの方法は、本質的には、str2から１文字ずつ取り出し、str1にあれば、str1
から消してゆくということですよね。
ならば、この処理は、Dictionary でなくても出来るはずです。
C#の文字列は不変なので、消すという処理が面倒なので、char型の配列にしておく
ことにしましょう。

この考えで組んだコードです。


 private static bool IsRearrangement(string str1, string str2) {
     char[] ary = str1.ToCharArray();
     foreach (var c in str2) {
         int ix = Array.FindIndex(ary, x => x == c);
         if (ix < 0)
             return false;
         ary[ix] = (char)0;
     }
     foreach (var c in ary) {
         if (c != (char)0)
             return false;
     }
     return true;
 }


コードを見比べてもらえば分かりますが、構造は、Dictionaryを使ったものとほと
んど同じですね。ToCharArray() を使い一発で配列に変換できているのでその分だ
け、コードが簡潔になってます。

本の解答をみてみると、Dictionaryを使った解法と似たようなコードが載っていま
したが、文字がASCIIに限定してあるコードで、文字の出現回数を記録するのに
Dictionary<char,int>の代わりに、int[256] が使われていました。いわゆる半角文
字の256個だけを処理対象としています。
日本人の僕としては、これはちょっといただけませんね。
まあ、このコードの解説に「面接官に文字コードを必ず確認しておきましょう」と
注意書きがあることはありますが...


■□───────────────────────────────────
■□ おまけ

実は、この問題を読んだときに「並べ替え」を「反転」とみなしたコードも書いて
いますので、そちらのコードも紹介して置きます。

LINQ版

  static bool IsReverse(string s1, string s2) {
      return s1.Reverse().SequenceEqual(s2);
  }

非LINQ版

  static bool IsReverse(string s1, string s2) {
      if (s1.Length == s2.Length) 
          return false;
      int i = 0;
      int j = s2.Length - 1;
      while (i < s1.Length) {
          if (s1[i++] != s2[j--])
              return false;
      }
      return true;
  }

非LINQ版では、最初に長さを比較することで、比較コードを単純化させています。
文字列 s1 は、先頭から順に、文字列s2は、最後尾から逆順に文字を取り出し、一
致しているかどうかを調べて、反転を判断しています。


■□───────────────────────────────────
■□ 次回の問題

文字列内に出現するすべての空白文字を"%20"で書き換えるメソッドを書いてくださ
い。ただし、文字列の後ろには新たな文字を追加するためのスペースが十分にある
（バッファーのサイズは気にしなくてもよい）ことと、その追加用スペースを除い
た文字列の真の長さが与えられます。
（注意：Javaで実装する場合は、追加の領域を使用せずに処理できるような文字配
列を使ってください）

  出展：『世界で闘うプログラミング力を鍛える150問』P-75
  http://www.amazon.co.jp/exec/obidos/ASIN/4839942390/gaius-22/


─────────────────────────────────────
『C#プログラミングレッスン』  (ほぼ週刊）
☆皆さまからの感想をお待ちしています。http://gushwell.ifdef.jp/mail.html
─────────────────────────────────────
Published by Gushwell.
Copyright (C) 2013 Gushwell All rights reserved.
Microsoft MVP for Visual C#(Apr 2005 - Mar 2014)

■Gushwell's Page
facebook Page                     : http://www.facebook.com/CSharpLesson
Gushwell's C# Dev Notes           : http://gushwell.ldblog.jp/
Gushwell's C# Programming Page    : http://gushwell.ifdef.jp/
気ままな読書ノート                : http://gwbooks.hatenablog.com/
Twitterアカウント                 : @gushwell
─────────────────────────────────────
