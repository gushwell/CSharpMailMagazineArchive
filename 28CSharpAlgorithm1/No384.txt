■━ [C#プログラミングレッスン] ━━━━━━━━━━━━━━━ No.384 ━□

「アルゴリズム編」-- ビット操作(1)
                                                           by Gushwell
□━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━■

みなさん、おはようございます。今年もよろしくお願いします。
さて、本題に入る前にちょっと情報共有を。
Microsoft Virtual Academy (MVA) というサイトをご存知でしょうか？ 

  http://www.microsoftvirtualacademy.com/?mtag=MVP21146

このサイト、マイクロソフト社の最新のテクノロジーを学習する場合にとても頼り
になるサイトです。専門家によるオンラインマイクロソフト トレーニングが提供さ
れています。いくつか、トレーニングコースをあげてみますね。

「いまさら聞けない Windows アプリ開発入門 XAML/C# 編」
「C# プログラミング ジャンプ スタート (MCP 試験: 70-483)」
「SQL Server 2012 の全体像を理解する」
「iOS,Android開発者のための.NET開発、Windowsストアアプリ開発」
「[MSC2013] 最新のプラットフォーム技術と開発ツールを活用した Web の構築」

このほかにもいろんなコースが用意されていますので、興味のある方はぜひ利用し
てみてください。
  http://www.microsoftvirtualacademy.com/?mtag=MVP21146


それでは、本題に入りましょう。

■□───────────────────────────────────
■□ 問題 （ビット操作）

最大32ビットの整数NとM、ビットの位置を指す値iとjが与えられています。このと
き、Nのjビット目からiビット目にMを挿入するメソドを書いてください。ただし、
jとiの幅はMのビット数と一致していると仮定してかまいません。
つまり、M=10011であれば、jとiの幅は5と仮定してかまいません。j=3, i=2のよう
な、Mの幅と合わないような値は考えなくてもかまいません。

例
 入力：N = 10000000000, M= 10011, i = 2,  j= 6
 出力：N = 10001001100

 出展：『世界で闘うプログラミング力を鍛える150問』
  http://www.amazon.co.jp/exec/obidos/ASIN/4839942390/gaius-22/


■□───────────────────────────────────
■□ 問題を理解する

まずは、問題のあやふやな点を解決しておきましょう。

まず、0 ビット目とはどこかということですが、桁の小さいほうから順に、0ビット
目、1ビット目、2ビット目...とするのが一般的ですね。実際に例を見れば、それが
確認できます。
次に、挿入するという単語の意味があやふやですね。
挿入という操作で、もとあったビットは右にシフトするのか、それともしないのか。
どっちなんでしょうか？
例を見ても、わかりません。
疑問点を面接官に質問するかどうかを見るためにわざとこういった問題文にしてい
るのかもしれませんね。ここでは、右シフトはしないと仮定します。
つまり、

入力：N = 10000000011, M= 11110, i = 2,  j= 6

という入力に対して、出力は

出力：N = 10001111011

となるという問題だとします。

以降、N を nValue, M を mValue と記します。


■□───────────────────────────────────
■□ 問題を解く

まず考えたのが、nビット目をxに置き換えるReplace(value, n, x)というメソッド
を書いて、i から、 j ビット目までを繰り返すという方法。


  static int BitInsert2(int nValue, int mValue, int i, int j) {            
      for (int p = i; p <= j; p++) {
          int x = mValue & 1;
          nValue = ReplaceBit(nValue, p, x);
          mValue = mValue >> 1;
      }
      return nValue;
  }

  // value の nビット目を ｘに置き換える。
  // ｘは、0 or 1
  static int ReplaceBit(int value, int n, int x) {
      if (x == 1) {
          // i ビット目を ON
          int mask = 1 << n;
          return value | mask;
      } else {
          // i ビット目を OFF
          int mask = ~(1 << n);
          return value & mask;
      }
  }


これを確認するために、int をビット列として表示するテストコードも書きましょ
う。

  private static void PrintBit(int x) {
      for (int i = 16; i >= 0; i--)
          Console.Write(GetBit(x, i));
      Console.WriteLine(" ({0})", x);
  }
  private static int GetBit(int n, int index) {
      return (n >> index) & 1;
  }

上記メソッドを定義すれば、

  int nValue = Convert.ToInt32("10000000000", 2);
  int mValue = Convert.ToInt32("10011", 2); ;
  int i = 2;
  int j = 6;
  int a = BitInsert(nValue, mValue, i, j);
  PrintBit(a);

のようなコードを書けば、以下の結果が得られます。

  00000010001001100 (1100)


■□───────────────────────────────────
■□ 別の解き方がないかを考える

でも、ReplaceBitメソッドの中で、ビットシフトをやっているので、このプログラ
ムは効率が悪そうです。
ビット操作をうまく使って、もっと、簡単にやる方法がないかなーと考えてみまし
た。
ビット操作の基本は、ANDとORです。
AND操作をおさらいしてみます。次のような規則が成り立ちます

  1 and 1 = 1
  1 and 0 = 0
  0 and 1 = 0
  0 and 0 = 0
 

and演算子の左がnValue, 右がmValue の特定のビットの値だとすると、nValueの値
が、1 のときは、mValueの値がそのまま新しい値になります。

つまり、
  10000000000
という入力に対し、iビット目からjビット目を1にした値である、10001111100
と、mValueを挿入する場所にシフトした値の ANDを取れば、結果が得られることに
なります。

      10001111100
 and      10011             （空白部分は0)
 --------------------
      10001001100 

これでうまくいきそうですので、この考えでコードを書いてみました。


  static int BitInsert(int nValue, int mValue, int i, int j) {
      // 100000 といったパターンを作る
      int x = 1 << (j - i + 1);
      // 011111 とマスクを作る
      int mask = x - 1;
      // さらに左にシフトし、000001111100 といったパターンを作る
      mask <<= i;
      // ~で反転させたものと n の andを取れば、挿入される部分がすべて0 となる。               
      nValue = nValue & ~mask;

      // mValue を i個左にシフトすれば、mValue が挿入される位置に移動する
      // これと先ほどの nValue を or すれば求める答えが得られる。
      return nValue | mValue << i;
  }


■□───────────────────────────────────
■□ 確認のコードを書く

確認するコードも書いてみます。最初に作成したメソッドを BitInsert2 と名前を
変えて、２つのメソッド（BitInsert と BitInsert2）の結果が同じかどうかを確か
めてみましょう。
まったく別々のアルゴリズムで、バグがありながら２つのメソッドの結果が同じと
いうことは考えにくいので、２つのメソッドの結果が同じならば、メソッドは正し
いと考えて良いと思います。
 
 
  var rnd = new Random();
  bool isOk = true;
  for (int x = 0; x < 10000; x++) {
      int nValue = rnd.Next(1, 10000);
      int i = rnd.Next(0, 5);
      int j = rnd.Next(i + 1, 16);
      int mValue = rnd.Next(0, (int)Math.Pow(2.0, (j - i) + 1));
 
      int a = BitInsert(nValue, mValue, i, j);
      int b = BitInsert2(nValue, mValue, i, j);
      if (a != b) {
          Console.WriteLine("{0} {1} {2} {3} {4} {5}", nValue, mValue, j, i, a, b);
          isOk = false;
      }
  }
  Console.WriteLine(isOk);
  Console.ReadLine();

ここでは、一万回繰り返してすべてが一致していれば、true を表示しています。


■□───────────────────────────────────
■□ 蛇足

ちなみに、or 操作も考えてみます。

  1 or  1 = 1
  1 or  0 = 1
  0 or  1 = 1
  0 or  0 = 0

さきほどと同様、 or 演算子の左がnValue, 右がmValueとしましょう。このとき、
nValueの値が、0だとすると、mValueの値がそのまま新しい値になります。

つまり、andと同じように考えて、

  10000011000

という入力に対し、

  10000011000 

とiからjを0にしてあげれば、mValueを挿入する場所にシフトさせてあげれば、

      10000000000
  or      10011            （空白部分は0)
 --------------------
      10001001100 

という結果が得られますので、これをコードに落とし込めばよさそうです。
しかし、iからjを0にするという良い処理（前述のBitInsert のコードよりも短いコ
ードでという意味）が僕は思いつきませんでした。
ということで、 or を使うコードは却下ということで、ここには掲載しません。
興味のある方は、自分でやってみてください。

■□───────────────────────────────────
■□ 次回の問題 （ビット操作）

ある整数AからBに変換するのに必要なビット数を決定する関数を書いてください。
例
 入力：31, 14
 出力 : 2

  出展：『世界で闘うプログラミング力を鍛える150問』
  http://www.amazon.co.jp/exec/obidos/ASIN/4839942390/gaius-22/

─────────────────────────────────────
『C#プログラミングレッスン』  (ほぼ週刊）
☆皆さまからの感想をお待ちしています。http://gushwell.ifdef.jp/mail.html
─────────────────────────────────────
Published by Gushwell.
Copyright (C) 2013 Gushwell All rights reserved.
Microsoft MVP for Visual C#(Apr 2005 - Mar 2014)

■Gushwell's Page
facebook Page                     : http://www.facebook.com/CSharpLesson
Gushwell's C# Dev Notes           : http://gushwell.ldblog.jp/
Gushwell's C# Programming Page    : http://gushwell.ifdef.jp/
気ままな読書ノート                : http://gwbooks.hatenablog.com/
Twitterアカウント                 : @gushwell
─────────────────────────────────────
