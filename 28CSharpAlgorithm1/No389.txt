■━ [C#プログラミングレッスン] ━━━━━━━━━━━━━━━ No.389 ━□

「アルゴリズム編」-- リンクリスト(4)
                                                           by Gushwell
□━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━■

今回がリンクリストの最後の問題です。

■□───────────────────────────────────
■□ 問題 （リンクリスト）

循環する連結リストが与えられたとき、循環する部分の最初のノードを返すアルゴ
リズムを実装してください。
 定義
   循環を含む連結リスト：連結リストAではループを作るために、リスト内のノー
   ドの次へのポインタが以前に出現したノードを指している。
 例 
   入力 A -> B -> C -> D -> E -> C [最初のCと同じもの]
   出力 C

  出展：『世界で闘うプログラミング力を鍛える150問』
  http://www.amazon.co.jp/exec/obidos/ASIN/4839942390/gaius-22/


■□───────────────────────────────────
■□ 問題を解くための準備

前回まで利用していた SingleLinkedList<T>クラスそのままだと、循環を扱うこと
ができないので、SingleLinkedList<T> に機能を追加しょうと思ったのですが、
ここでは、前回まで利用していたノードクラスだけを作ることとします。
再度掲載します。

    class Node<T> {
        public Node(T obj) {
            Value = obj;
        }
        public Node(Node<T> prev, T obj) {
            Value = obj;
            Next = null;
            if (prev != null)
                prev.Next = this;
        }

        public T Value { get; set; }
        public Node<T> Next { get; set; }
    }


２つめのコンストラクタでは、ひとつ前のノードとノードで保持する値を指定して
います。
このコンストラクタを使えば、ノードオブジェクトの生成とリストへの最後尾への
追加を同時に行うことができます。

このNodeクラスを使って簡単なリンクリストを作って動きを確かめてみます。

            Node<string> node1 = new Node<string>(null,"the");
            Node<string> node2 = new Node<string>(node1,"fox");
            Node<string> node3 = new Node<string>(node2,"jumped");
            Node<string> node4 = new Node<string>(node3,"over");
            Node<string> node5 = new Node<string>(node4,"the");
            Node<string> node6 = new Node<string>(node5,"dog");

これでリストが作れたはずですので、ノードを辿って
いくコードを書いてみます。

            var curr = node1;
            while (curr != null) {
                Console.WriteLine(curr.Value);
                curr = curr.Next;
            }

このコードは、SingleLinkedList で実装したForEachメソッドの中身と構造はほぼ
同じですね。

最後のノードのNextプロパティはnullになっているので、終端かどうかがわかりますから、
上記のように現在注目しているノードがnullならば終端まで処理したことになります。

結果は、

 the
 fox
 jumped
 over
 the
 dog

と表示されました。

循環リストを作るには、

   node6.Next = node3;

のように最後のNodeのNextプロパティに、既存の(リストに追加済みの）Nodeを設定
してあげれば良いことになります。
試しに、この状態で先ほどの、ノードを辿るコードを動かすと、無限ループに陥り
ます。まあ当然ですね。


■□───────────────────────────────────
■□ 問題を解く

ここまでくれば、問題を解く準備ができました。

どうやって循環ノードかを調べるかですが、すぐに思いつくのが、辿ってきたノー
ドを(例えばList<T>に）すべて覚えておいて、次のノードが、覚えておいたノード
の中にあるかどうかを調べる方法です。

これを実装したのが以下のコードです。

 static Node<T> GetDuplicateNode<T>(Node<T> node) {
     List<Node<T>> list = new List<Node<T>>();

     var curr = node;
     while (curr.Next != null) {
         if (list.Find(n => n == curr) != null)
             return curr;
         list.Add(curr);
         curr = curr.Next;
     }
     return null;
 }

 static void Main(string[] args) {
     Node<string> node1 = new Node<string>(null,"the");
     Node<string> node2 = new Node<string>(node1,"fox");
     Node<string> node3 = new Node<string>(node2,"jumped");
     Node<string> node4 = new Node<string>(node3,"over");
     Node<string> node5 = new Node<string>(node4,"the");
     Node<string> node6 = new Node<string>(node5,"dog");
     node6.Next = node3;
     var r = GetDuplicateNode(node1);
     if (r != null)
         Console.WriteLine(r.Value);
     Console.ReadLine();
 }

これを実行すれば、

 jumped

が表示されます。

■□───────────────────────────────────
■□ さらに効率の良い方法

ただ、上記のやり方は決して効率は良いものではよくありませんし、メモリも無駄
に使ってしまいます。Dictionaryを使えば速度はアップしますが、本質的なところ
では変わりませんね。

ということでほかの方法はないのでしょうか？
循環しているかを調べるには、実は「兎と亀のアルゴリズム」というのが有名です。
兎はノードを２つずつ進み、亀は一つずつノードを進みます。このとき、循環があ
れば、必ず兎は亀に追いつき、同じノードに来るというものです。

これで、循環の有無はわかりますが、開始点まではわかりません。
残念ながら、僕の知識ではここまででした。

解答をみると、この「兎と亀のアルゴリズム」をさらに一歩すすめて、開始点を
見つける素晴らしいアルゴリズムが紹介されていました。
具体的にどんなアルゴリズムなのかの詳細は、『世界で闘うプログラミング力を鍛
える150問』を読んでいただくとして、ここでは、その最終的なコードのみを示し
ます。

  static Node<T> GetDuplicateNode<T>(Node<T> first) {
      var slow = first;
      var fast = first;
      bool isCircular = false;
      while (fast != null && fast.Next != null) {
          slow = slow.Next;
          fast = fast.Next.Next;
          if (fast == slow) {
              isCircular = true; // 循環していた。
              break;
          }
      }
      if (!isCircular)
          return null;
      slow = first;            // slowは先頭に。
      while (slow != fast) {
          slow = slow.Next;
          fast = fast.Next;    // 今度は一つずつ進む。   
      }
      return slow;    // 循環の開始点
  }


--------------------------------------------------------------------------

さて、このアルゴリズム編を開始するときに、「前編、後編の２つに分けてお届け
し、前編、後編の間には、なにか別の話題をやろうと思っています」と書きました
が、今回で、前編を終了したいと思います。
そして、後編に入る前の別の話題として取り上げるのは、軽量で拡張可能なアプリ
ケーションを作成するためのライブラリManaged Extensibility Framework (MEF)
です。このMEFは、.NET Framework 4がら追加されたライブラリです。

MEF編の第一回は、４月初旬にお届けする予定です。では、その時にまたお会いしま
しょう。


─────────────────────────────────────
『C#プログラミングレッスン』  (ほぼ週刊）
☆皆さまからの感想をお待ちしています。http://gushwell.ifdef.jp/mail.html
─────────────────────────────────────
Published by Gushwell.
Copyright (C) 2014 Gushwell All rights reserved.
Microsoft MVP for Visual C#(Apr 2005 - Mar 2014)

■Gushwell's Page
facebook Page                     : http://www.facebook.com/CSharpLesson
Gushwell's C# Dev Notes           : http://gushwell.ldblog.jp/
Gushwell's C# Programming Page    : http://gushwell.ifdef.jp/
気ままな読書ノート                : http://gwbooks.hatenablog.com/
Twitterアカウント                 : @gushwell
─────────────────────────────────────
