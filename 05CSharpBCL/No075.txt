┏━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━┳━┳━┓
┃☆┃ C#プログラミングレッスン                         ┃＿┃□┃×┃
┣━┻━━━━━━━━━━━━━━━━━━━━━━━━━┻━┻━┻━┫
┃System.Text.StringBuilderクラス                             No.075┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

StringBuilderクラスは、文字列操作を効率よく扱うためのクラスです。

■──────────────────────────────────
■ string型の文字列操作

文字列操作は、通常、string型を使いますが、string型の変数は、【不変オブ
ジェクト】であり、連結、文字挿入、文字削除といった操作は、インスタンス
が何回も作成され効率がよくありません。
例えば、

  string s1 = "ABC";
  string s2 = s1 + "XYZ";

では、s1が示す、"ABC"の後ろに、"XYZ"が連結されるのではなく、新たな６文
字分のインスタンス(s2)が作成され、 そこに、"ABC"がコピーされ、その後ろ
に、"XYZ"がコピーされます。
また、

  string s3 = s2.Remove(0,2);

では、 s3のための4文字分のインスタンスが作成され、"CXYZ"がコピーされま
す。元の s2 の "ABCXYZ" は、そのままで変わることはありません。

以下のように、代入先を自分自身(s2)としても、同様であり、新たなインスタ
ンスが内部で作成され、処理が行われます。

  s2 = s2.Remove(0,2);

つまり、いったん生成された文字列は２度と書き換えることができないため、
新たなインスタンスを生成する必要があるわけです。
そういったわけで、

  string s = "";
  for ( int i = 0; i < 100; i++ ) {
      s += GetChar();   // GetChar()は、どこからか１文字取得する関数
  }

なんてコードを書くと、インスタンスの生成が何回も行われることになり、
CPUを無駄に使うことになってしまいます。


■──────────────────────────────────
■ StringBuilder

StringBuilderクラスは、 string型の非効率を補うためのクラスで、変更可能
な文字列を扱うことができます。見方を変えれば、文字列のインスタンスを生
成する特殊なコンストラクタだと考えても良いでしょう。

では、簡単な例から見てみましょう。

  using System.Text;
  ....

  StringBuilder sb = new StringBuilder();
  for ( char c = 'A'; c <= 'G'; c++) {
      sb.Append(c);
  }
  string s = sb.ToString();
  Console.WriteLine(s);

まず、 StringBuilderのインスタンスを生成し、Appendメソッドで文字を末尾
に追加させていきます。最後に、ToStringメソッドで、string型に変換し、変
数 s に代入します。結果は、"ABCDEFG" が表示されます。

なお、 StringBuilderを newする際は、引数に、インスタンスの初期容量を指
定しておくことができます。

  StringBuilder sb = new StringBuilder(100);

とすれば、最初に、100文字分の容量が確保されます。省略値は 16 です。
この容量を超えて文字を追加しようとした場合、自動的に容量が増えてくれま
す。もし、あらかじめ、作成する文字列のサイズが分かっている場合は、コン
ストラクタで容量を指定しておくほうが良いでしょう。
コンストラクタでは、初期化する文字列を指定することや、最大のサイズを指
定することもできます。
詳しくは、.NET Frameworkのドキュメントを参照してください。


■──────────────────────────────────
■ StringBuilderのメンバー

● Length プロパティ
  StringBuilderに格納されている文字数を返します。容量ではありません。

● ToString メソッド
  StringBuilderに格納されている文字列を string型に変換します。

● Chars プロパティ
  StringBuilderのインデクサ。
  インスタンス内の指定した位置の文字を取得または設定します。

  StringBuilder sb = new StringBuilder("hello");
  sb[0] = "H";
  for ( int i = 0; i < sb.Length; i++ )
    Console.WriteLine(sb[i]);

● Appendメソッド
  指定したオブジェクトの文字列形式をこのインスタンスの末尾に追加します。
  多くのメソッドが、オーバーロードされており、引数には、bool, char,

  int double, string, char[] など何種類もの引数を受け取ることができます。

● Insertメソッド
  指定したオブジェクトの文字列形式をこのインスタンスの指定した文字位置
  に挿入します。

  StringBuilder sb = new StringBuilder("Hello world");
  sb.Insert(6,"C# ");  // 結果は、"Hello C# world"

● Remove メソッド
  インスタンスから、指定した範囲の文字を削除します。

  StringBuilder sb = new StringBuilder("Hello C# world");
  sb.Remove(6,3);  // 6文字目から3文字分を削除する

● Replaceメソッド
  インスタンスに出現する指定文字列をすべて、別に指定した文字列に置換し
  ます。

  StringBuilder sb = new StringBuilder("Hello world");
  sb.Replace("world", "World.");

● AppendFormat メソッド
  書式付き文字列の結果をインスタンスに追加します。
  使い方は、string.Format とほぼ同じだと思ってよいでしょう。違いは、イ
  ンスタンスの末尾に「追加」する点です。

  StringBuilder sb = new StringBuilder();
  sb.AppendFormat("Hello {0} World.", "C#");


■──────────────────────────────────
■ StringBuilderのメソッドの戻り値

  StringBuilderに用意されているメソッドの多くは、 自分自身のインスタン
  スの参照を返します。
  そのため、以下のように、ピリオドで連続してつなげることができます。

  string s = sb.Replace('-', '/').Append("ABC").ToString();


┌─┬─────────────────────────┬─┬─┬─┐
│☆│ C#プログラミングレッスン  (ぼぼ週刊）            │＿│□│×│
├─┴─────────────────────────┴─┴─┴─┤
│ Published by Gushwell  (Microsoft MVP for Visual C#)             │
│ Copyright (C) 2004-2006 Gushwell All rights reserved.            │
│-------------------- Gushwell's Page ---------------------------- │
│ 窓際プログラマーの独り言  ：http://blog.livedoor.jp/gushwell/    │
│ 窓際プログラマーの読書三昧：http://gushwell.jugem.jp/            │
│             よろしかったらアクセスしてみてください！             │
└─────────────────────────────────┘