┏━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━┳━┳━┓
┃☆┃ C#プログラミングレッスン             by Gushwell ┃＿┃□┃×┃
┣━┻━━━━━━━━━━━━━━━━━━━━━━━━━┻━┻━┻━┫
┃System.Enum構造体                                           No.080┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

今回は、Enum構造体です。

■──────────────────────────────────
■基本データ型をバイト配列に変換

Enumクラスは、名前のとおり、列挙体を扱うクラスです。正確には列挙体の基
底クラスであり、staticメソッドとしてユーティリティ的なメソッドを提供し
ています。

列挙体の基底クラスであることを確認するために、以下のようなプログラムを
動かしてみてください。

  class Program {
      enum Colors { Red, Green, Blue };
      static void Main(string[] args) {
          Colors c = Colors.Red;
          if (c is Colors) {
              Console.WriteLine("c is Color");
          }
          if (c is Enum) {
              Console.WriteLine("c is Enum");
          }
      }
  }

コンパイラの警告を無視し、実行すれば、
  c is Color
  c is Enum
と表示され、c が、Enum型であることが確認できます。
ただ、実際にプログラミングする上では、Enumが、列挙体の基底クラスで
あることには、それほど大きな意味をもっていないと思います。

  Enum型を受け取るメソッドを作成し、ポリモーフィズムを使うことも可能
  ですが、実際にどう使うのかその例を思い浮かべることができません。

Enum構造体が提供する staticメソッドにはなかなか便利なメソッドがある
ので今回は、その説明をします。


■──────────────────────────────────
■ GetNames static メソッド

GetNamesメソッドは、指定した列挙体に含まれている定数の名前の配列を返します。

  class Program {
      enum Colors { Red, Green, Blue };
      static void Main(string[] args) {
          string[] names = Enum.GetNames(typeof(Colors));
          foreach ( string name in names )
              Console.WriteLine(name);
      }
  }

typeof(Colors) でColors列挙体の型情報をGetNamesメソッドに渡すことで、
Colorsで定義されている識別子を文字列配列として取得できます。
結果は
  Red
  Green
  Blue
と表示されます。


■──────────────────────────────────
■ GetValues static メソッド

GetValuesメソッドは、指定した列挙体内の定数の値の配列を返します。 

  Array values = Enum.GetValues(typeof(Colors));
  foreach (int i in values )
      Console.WriteLine(i);

結果は、
  0
  1
  2
と表示されます。先ほどのコードとあわせれば、それぞれの識別子に割り当て
られている数値を知ることが可能です。


■──────────────────────────────────
■ ToObject static メソッド

ToObjectメソッドは、指定した値に対応する列挙型のインスタンスを返します。
使い方は、こんな感じです。

  values = Enum.GetValues(typeof(Colors));
  foreach (int i in values)
      Console.WriteLine( "{0} : {1}",
                        i, Enum.ToObject(typeof(Colors),i) );

結果は、
  0 : Red
  1 : Green
  2 : Blue
となります。

もっとも、あらかじめ列挙体の型がコーディング時にわかっているのならば、
数値を以下のようにキャストしても同じ結果が得られますので、わざわざ、
ToObjectを使う必要はないかもしれません。
以下のように書けばOKです。

   Console.WriteLine("{0} : {1}", i, (Colors)i );


■──────────────────────────────────
■ IsDefined static メソッド

IsDefinedメソッドは、指定した値を持つ定数が指定した列挙体に存在するか
どうかを調べるメソッドです。存在していた場合は、trueが帰ります。


  Console.WriteLine(Enum.IsDefined(typeof(Colors), Colors.Red));
  Console.WriteLine(Enum.IsDefined(typeof(Colors), 1));
  Console.WriteLine(Enum.IsDefined(typeof(Colors), 4));

結果は、
  True
  True
  False
となります。

┌─┬─────────────────────────┬─┬─┬─┐
│☆│ C#プログラミングレッスン  (ぼぼ週刊）            │＿│□│×│
├─┴─────────────────────────┴─┴─┴─┤
│ Published by Gushwell  (Microsoft MVP for Visual C#)             │
│ Copyright (C) 2004-2006 Gushwell All rights reserved.            │
│-------------------- Gushwell's Page ---------------------------- │
│ 窓際プログラマーの独り言  ：http://blog.livedoor.jp/gushwell/    │
│ 窓際プログラマーの読書三昧：http://gushwell.jugem.jp/            │
│             よろしかったらアクセスしてみてください！             │
└─────────────────────────────────┘
