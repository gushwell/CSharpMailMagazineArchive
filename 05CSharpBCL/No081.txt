┏━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━┳━┳━┓
┃☆┃ C#プログラミングレッスン                         ┃＿┃□┃×┃
┣━┻━━━━━━━━━━━━━━━━━━━━━━━━━┻━┻━┻━┫
┃System.Random クラス                                        No.081┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

今回は、乱数を生成するための Randomクラスです。

■──────────────────────────────────
■ Randomクラスの基本

以下のコードを見てください。これが、Randomクラスの基本的な使い方です。

  Random rnd = new Random();
  for ( int i = 0; i < 10; i++ ) {
      int n = rnd.Next();
      Console.WriteLine("{0} ", n);
  }

Randomクラスのインスタンスを生成して、Nextメソッドで、乱数を発生させて
います。

結果は、
 1231893685
 354419826
 1864819867
 470668749
 1032321816
 184381468
 619253943
 1391829088
 39459164
 598562811

となりました。もちろん、乱数ですので、毎回結果が異なります。


■──────────────────────────────────
■ 範囲を限定する

でも、1 ～ 100 までの値で乱数を発生させたい場合には、これでは困ります。
そのような場合には、

  int n = rnd.Next(1,101);  // 1 ～ 100 までの範囲で乱数を発生させる

のように、範囲を指定することができます。
注意しなければいけないのは、第1引数は、乱数の範囲に含まれ、第2引数は乱
数の範囲には含まれないということです。

0 ～ 100 までの範囲であれば、

  int n = rnd.Next(101);  // 0 ～ 100 までの範囲で乱数を発生させる

と書くことも可能です。

※ 0.0 と 1.0 未満の間の倍精度浮動小数点数の乱数を返す NextDoubleという
   メソッドも用意されています。


■──────────────────────────────────
■ 常に同じ乱数を発生させる

場合によっては、毎回異なる乱数が発生しては都合の悪い場合があるかもしれ
ません。
そのようなときには、

  Random rnd = new Random(0);  // ← ここが違う
  for ( int i = 0; i < 10; i++ ) {
      int n = rnd.Next(101);
      Console.WriteLine("{0} ", n);
  }

のように、コンストラクタで乱数発生のためのシード値を指定します。シード
値が異なれば、別のシーケンスで乱数が発生します。


■──────────────────────────────────
■ 規定のシード値とは

コンストラクタで、引数を指定しなかった場合、規定のシード値が使われます
が、これは、システム時計から導かれます。
普通は、これで十分なのですが、高速なコンピュータ上で実行された場合には、
Random の複数の異なるインスタンスに対して、 同一のシステム時計の値がシ
ード値になる可能性があります。
このような場合には、呼び出しのたびにシード値を変えるためのアルゴリズム
を適用します。

.NET Framework のドキュメントには、

Random rdm1 = new Random(unchecked((int)DateTime.Now.Ticks));
Random rdm2 = new Random(~unchecked((int)DateTime.Now.Ticks));

のようにして、ビットごとの補数演算を使用して、システム時刻の値が変化し
ない場合でも 2 つの異なるシード値を生成する方法が示されています。




■──────────────────────────────────
■ 初心者がよくやる間違い

WindowsFormのアプリケーションで、 ボタンをクリックする度に、乱数を発生
させる場面があったとします。このとき、初心者は、

  private void button1_Click(object sender, EventArgs e) {
     Random rnd = new Random();
     int n = rnd.Next();
     // 乱数をつかった何らかの処理
     ...
  }

と書きがちです。しかし、これは、あまり良いとは言えません。以下のように
書いたほうが良いでしょう。

  private Random rnd = new Random();
  private void button1_Click(object sender, EventArgs e) {
     int n = rnd.Next();
     // 乱数をつかった何らかの処理
     ...
  }


┌─┬─────────────────────────┬─┬─┬─┐
│☆│ C#プログラミングレッスン  (ぼぼ週刊）            │＿│□│×│
├─┴─────────────────────────┴─┴─┴─┤
│ Published by Gushwell  (Microsoft MVP for Visual C#)             │
│ Copyright (C) 2004-2006 Gushwell All rights reserved.            │
│-------------------- Gushwell's Page ---------------------------- │
│ 窓際プログラマーの独り言  ：http://blog.livedoor.jp/gushwell/    │
│ 窓際プログラマーの読書三昧：http://gushwell.jugem.jp/            │
│             よろしかったらアクセスしてみてください！             │
└─────────────────────────────────┘
