┏━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━┳━┳━┓
┃☆┃ C#プログラミングレッスン                         ┃＿┃□┃×┃
┣━┻━━━━━━━━━━━━━━━━━━━━━━━━━┻━┻━┻━┫
┃System.Array クラス (2)                                     No.085┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

今回は、Arrayクラスの ソートと、バイナリーサーチについて説明します。

■──────────────────────────────────
■ Sortメソッド

Arrayクラスには、 staticなSortメソッドが用意されています。これを使うと
配列の要素をソートすることができます。

int型の配列をソートする例を示します。

  int[] nums = { 5, 7, 3, 9, 1, 6 };
  Array.Sort(nums);
  foreach ( int n in nums ) {
      Console.Write(n + "  ");
  }
  Console.WriteLine();

結果は、
  1  3  5  6  7  9
と表示されます。

では、独自クラスの配列ではどうでしょうか。

  class MyClass {
      private string _text;
      public string Text {
          get { return _text; }
      }
      private int _num;
      public int Num {
          get { return _num; }
      }
      public MyClass(string text, int num) {
          _text = text;
          _num = num;
      }
  }

というクラスの配列をソートするコードを書いて見ましょう。

  MyClass[] list = {
     new MyClass("apple", 40),
     new MyClass("grape", 30),
     new MyClass("banana", 20),
     new MyClass("strawberry", 50) };
  Array.Sort(list);
  foreach ( MyClass c in list ) {
      Console.WriteLine(c.Text + " " + c.Num.ToString());
  }

これを実行すると...
あれ、 System.InvalidOperationException 例外が発生してしまいます。これ
はどうしてかというと、 Array.Sort メソッドは、何を基準に大小比較をした
ら良いか分からないため、「比較ができないよ」と例外が発生してしまうわけ
です。

■──────────────────────────────────
■ 独自クラスの配列をソートする。

独自クラスの配列をソートしたい場合には、比較を行うクラスを作成する必要
があります。例えば、こんな感じ。

  class MyClassComparerByNum : IComparer {
        public int Compare(object x, object y) {
            MyClass a = x as MyClass;
            MyClass b = y as MyClass;
            return a.Num - b.Num;
        }
    }

このクラスは  IComparer インターフェースを実装していることに注目してく
ださい。
IComparerから継承したクラスは、必ず２つの引数を取る Compare メソッドを
実装します。この例では、Num を元に、比較を行っています。

Sortを行うには、

   Array.Sort(list,new MyClassComparerByNum());

と、 第２引数で、MyClassComparerByNum のインスタンスを渡してあげます。
数値の小さい順に並べ替えることができます。

なお、Text の順にソートしたければ、

  class MyClassComparerByText : IComparer {
      public int Compare(object x, object y) {
          MyClass a = x as MyClass;
          MyClass b = y as MyClass;
          return a.Text.CompareTo(b.Text);
      }
  }

というクラスを定義し、

   Array.Sort(list, new MyClassComparerByText());

とすれば、Text を元にしたソートが行えます。

■──────────────────────────────────
■ バイナリサーチ

Array.BinarySearch staticメソッドを使うと、 ソート済みの配列に対して、
高速な検索を行うことができます。

以下にコードを示します。

 int n = Array.BinarySearch(list,
                            new MyClass("apple", 40),
                            new MyClassComparerByText());
 Console.WriteLine(list[n].Text + " " + list[n].Num.ToString());

BinarySearchの引数は、３つです。
  第１引数  検索対象となるソート済み配列
  第２引数  検索するオブジェクト
  第３引数  要素を比較する IComparer を実装したクラスのインスタンス
です。
この最後の引数は、ソートするときに定義したクラスと同じものです。

戻り値は、見つかったインデックスとなります。もし、見つからなかったとき
には、マイナス値が返ります。

