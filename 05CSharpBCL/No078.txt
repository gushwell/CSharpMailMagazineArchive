┏━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━┳━┳━┓
┃☆┃ C#プログラミングレッスン                         ┃＿┃□┃×┃
┣━┻━━━━━━━━━━━━━━━━━━━━━━━━━┻━┻━┻━┫
┃System.Mathクラス                                           No.078┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

このところ、発行が遅れ気味です。ごめんなさい。
「ほぼ週間」ってことでご容赦を。

Mathクラスは、三角関数や対数関数などの一般的な数値関数の定数と静的メソ
ッド(staticメソッド）を提供しているクラスです。
では、早速、Mathクラスが提供している機能について見ていきましょう。

■──────────────────────────────────
■ Mathクラスの定数

・PI
  定数 (π ) を指定して、円の直径に対する円周の割合を表します。
  値は 3.14159265358979323846 と定義されています。

   Console.WriteLine("円周率：{0}", Math.PI);

  のように使えます。

・E
  定数 e を指定して、自然対数ベースを表します。
  このフィールドの値は 2.7182818284590452354 です。

   Console.WriteLine("自然対数：{0}", Math.E);

■──────────────────────────────────
■ Mathクラスのメソッド

いくつか、 代表的なものだけを紹介します。詳しくは、.NET Framework ドキ
ュメントをご覧ください。
なお、Mathクラスの提供するメソッドは、staticメソッドであるということで
す。このため、インスタンスを生成することなく、利用することができます。

・Maxメソッド
  指定された２つの数のうち、大きいほうを返します。

   int a = 10;
   int b = 20;
   Console.WriteLine("大きいのは、{0} です", Math.Max(a,b));

  コード例では、int型を使いましたが、double, decimal, byte... などの
  数値なら何でもOKです。

・Minメソッド
  指定された２つの数のうち、小さいほうを返します。
  使い方は、Maxメソッドと同様です。

・Ceiling メソッド
  小数点以下を切り上げます。

   decimal a = 12.001m;
   Console.WriteLine(Math.Ceiling(a));

  結果は、13 となります。例では、decimal型を使いましたが、double型の数
  値を渡すこともできます。

・Absメソッド
  指定した数値の絶対値を返します。

   double a = -12.3;
   Console.WriteLine("{0}", Math.Abs(a));

 結果は、12.3 です。

・Powerメソッド
  指定の数値を指定した値で累乗した値を返します。

    Consolw.WriteLine("[0}", Math.Pow(2,10));

  結果は、1024 と表示されます。

・Floorメソッド
  小数点以下を切り捨てます。

   decimal a = 12.001m;
   Console.WriteLine(Math.Floor(a));

  結果は、12 となります。例では、decimal型を使いましたが、double型の数
  値を渡すこともできます。

・Round メソッド
  値を最も近い整数または指定した小数点数に丸めます。四捨五入ではないの
  で注意が必要です。
  値が 2 つの整数のちょうどの中間にある場合は偶数が返されます。

   decimal a = 12.5m;
   decimal b = 13.5m;
   Console.WriteLine("{0}, {1}", Math.Round(a), Math.Round(b));

  結果は、12, 14 と表示されます。
  このメソッドの動作は、IEEE 規格 754、セクション 4 に従っているとの
  ことです。

  Roundでは、 以下のように丸める際の小数点の有効桁を指定することもでき
  ます。

   decimal a = 12.675m;
   decimal b = 12.785m;
   Console.WriteLine("{0}, {1}", Math.Round(a,2), Math.Round(b,2));

  結果は、12,68, 12.78 となります。
  やはり、最終桁は偶数（ここでは、8）となります。


■──────────────────────────────────
■ では、四捨五入は

Round メソッドの説明を読んで、では、四捨五入はどうしたらよいのか、と疑
問を持ったかたもいると思います。
一般的には、「0.5 を加えた後に、切捨てをする」というロジックを自分で作
成することになりますが、 .NET Framework2.0では、四捨五入を行う方法が用
意されています。

  double n = 12.5;
  double a = Math.Round(n,MidpointRounding.AwayFromZero);

とすることで、四捨五入が可能です。また、

  double a = Math.Round(n,2,MidpointRounding.AwayFromZero);

のように、少数以下の有効桁数を指定することもできます。

さすがに、 10の位を四捨五入して、100の単位にするといった機能までは用意
されていないようです。この部分は、自分でプログラムを書くしかなさそうで
す。

┌─┬─────────────────────────┬─┬─┬─┐
│☆│ C#プログラミングレッスン  (ぼぼ週刊）            │＿│□│×│
├─┴─────────────────────────┴─┴─┴─┤
│ Published by Gushwell  (Microsoft MVP for Visual C#)             │
│ Copyright (C) 2004-2006 Gushwell All rights reserved.            │
│-------------------- Gushwell's Page ---------------------------- │
│ 窓際プログラマーの独り言  ：http://blog.livedoor.jp/gushwell/    │
│ 窓際プログラマーの読書三昧：http://gushwell.jugem.jp/            │
│             よろしかったらアクセスしてみてください！             │
└─────────────────────────────────┘
