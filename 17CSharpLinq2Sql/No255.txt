
■━ [C#プログラミングレッスン] ━━━━━━━━━━━━━━━ No.255 ━□
  
 「LINQ to SQL編」-- 簡単なクエリ式
                                                             by Gushwell  
□━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━■

クエリ式の書き方の詳細は、バックナンバーの「LINQ to Object編」を読んでいた
だくとして、今回は、LINQ to SQL のクエリの書き方に慣れていただくために、
Products テーブルからデータを取得する４つのサンプルを示します。

■□───────────────────────────────────
■□ クエリ式のサンプル

■ サンプル(1)

 using (var db = new NorthwindDataContext()) {
     var query = from product in db.Products
                 where product.UnitPrice < 10
                 select product;
     foreach (var p in query)
         Console.WriteLine("{0} | {1} | {2} | {3}",
             p.ProductID, p.ProductName, p.CategoryID, p.UnitPrice);
 }

Productsテーブルから、UnitPriceが10より小さいものを取得しています。


■ サンプル(2)

 using (var db = new NorthwindDataContext()) {
     var maxprice = db.Products.Select(p => p.UnitPrice).Max();
     Console.WriteLine("{0}", maxprice);
 }

Productsテーブルから最も高い単価(UnitPrice)を見つけています。クエリ構文で
はなくメソッド構文を使った例です。


■ サンプル(3)

 using (var db = new NorthwindDataContext()) {
     var query = (from product in db.Products
                  orderby product.UnitsInStock descending
                  select product).Take(5);
     foreach (var p in query)
         Console.WriteLine("{0} | {1} | {2} | {3}",
             p.ProductID, p.ProductName, p.CategoryID, p.UnitsInStock);
 }


UnitsInStockをキーに降順に並び替え、先頭から5製品を求める例です。


■ サンプル(4)

 using (var db = new NorthwindDataContext()) {
     var query = from product in db.Products
                 where product.CategoryID == 5
                 select new {
                     product.ProductID,
                     product.CategoryID,
                     product.ProductName,
                     product.UnitPrice
                 };
     foreach (var p in query)
         Console.WriteLine("{0} | {1} | {2} | {3}",
             p.ProductID, p.ProductName, p.CategoryID,p.UnitPrice);
 }


CategoryIDが5の製品を取得しています。その際、データベースからは、
ProductID, ProductName, CategoryID,UnitPrice だけを取得しています。

new する際にクラス名を指定しない「匿名クラス」を利用しています。queryは、
この匿名クラスのシーケンスとなります。その都度クラスを定義しなくて良いので、
とても楽ですね。


今回は、４つのクエリをお見せしましたが、SQLの苦手な僕にも、「これならば、
迷わずに書けるな」と思わせるところが、LINQ to SQLの良いところかなと思いま
す。

─────────────────────────────────────
『C#プログラミングレッスン』  (ぼぼ週刊）                                 
 ☆皆さまからの感想をお待ちしています。http://gushwell.ifdef.jp/mail.html 
─────────────────────────────────────
 Published by Gushwell.                                                   
   Copyright (C) 2004-2010 Gushwell All rights reserved.                  
   Microsoft MVP for Visual C#(Apr 2005 - Mar 2011)                       
                                                                          
 ■Gushwell's Page                                                        
 窓際プログラマ─の独り言        : http://gushwell.ldblog.jp/             
 Gushwell's C# Programming Page  : http://gushwell.ifdef.jp/              
 Gushwell's F# Programming Diary : http://techbank.jp/gushwell/           
 Gushwellの読書ノート            : http://gushwell.jugem.jp/              
                                                                          
 ■コミュニティtechbank.jp (http://techbank.jp/Community/blogs/)          
 Gushwellが参加している技術系コミュニティです。                           
 有志メンバーによるBlogでの技術情報の発信もしています。
─────────────────────────────────────
