
■━ [C#プログラミングレッスン] ━━━━━━━━━━━━━━━ No.271 ━□
  
 「LINQ to SQL編」-- トランザクション
                                                             by Gushwell  
□━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━■

Linq to SQLでは、以下の3種類のトランザクション モデルがサポートされていま
す。

 1. 明示的名ローカルトランザクション
 2. 明示的な分散トランザクション
 3. 暗黙のトランザクション

今回は、これら３つのトランザクションについて説明します。


■□───────────────────────────────────
■□ 明示的名ローカルトランザクション

いわゆるマニュアルトランザクション処理で、ADO.NET 1.0の頃からあった方法で
すね。そのコード例をお見せします。


 db.Transaction = db.Connection.BeginTransaction();
 try {
     db.SubmitChanges();
     db.Transaction.Commit();
 } catch {
     db.Transaction.Rollback();
 } finally {
     db.Transaction = null;
 }


 ※ このコードは、コネクションがOpenされていることが前提です。
    Openされていないと、例外が発生します。

Connectionの Open, Closeも自分で管理したい場合は、以下のように書きます。


 db.Connection.Open();
 try {
     //
     ... ここで、「LINQ to SQLエンティティクラス」に対する変更処理を行う
     // 
     db.Transaction = db.Connection.BeginTransaction();
     try {
         db.SubmitChanges();
         db.Transaction.Commit();
     } catch {
         db.Transaction.Rollback();
     } finally {
         db.Transaction = null;
     }
 } finally {
    db.Close();
 }


このようなコードを書く場合は、2重Openしないよう注意しないといけません。



■□───────────────────────────────────
■□ 明示的な分散トランザクション

ADO.NET 2.0と同様、TransactionScopeを使う方法もサポートされています。


 //
 ... ここで、「LINQ to SQLエンティティクラス」に対する変更処理を行う
 // 
 using (var tx = new TransactionScope()) {
     db.SubmitChanges();
     tx.Complete();
 }


SubmitChangesの後に、Complete()メソッドを呼び出す、更新を確定させます。
Complete()gが呼び出されなかった場合（つまり、例外が発生した場合）は、自動
的にロールバックが行われます。


■□───────────────────────────────────
■□ 暗黙のトランザクション

SubmitChangesが呼び出されると、LINQ to SQLは、呼び出しがトランザクション
のスコープにあるかどうかを判断し、トランザクションのスコープに無い場合に、
自動的にローカルトランザクションを開始し、生成したSQL コマンドを実行しま
す。 すべての SQL コマンドが終了すると、LINQ to SQL はローカル トランザク
ションをコミットして戻ります。

LINQ to SQLでは、一回のSubmitChanges呼び出しで、複数のテーブルに対する複
数のSQL文が実行されることを思い出してください。
明示的に、トランザクションを指定しなくても、これら一連の処理が、トランザク
ションの範囲として認識されますので、プログラミングの負荷軽減に役立っていま
す。


─────────────────────────────────────
『C#プログラミングレッスン』  (ぼぼ週刊）                                 
 ☆皆さまからの感想をお待ちしています。http://gushwell.ifdef.jp/mail.html 
─────────────────────────────────────
 Published by Gushwell.                                                   
   Copyright (C) 2004-2010 Gushwell All rights reserved.                  
   Microsoft MVP for Visual C#(Apr 2005 - Mar 2011)                       
                                                                          
 ■Gushwell's Page                                                        
 窓際プログラマ─の独り言 - C#の話題を中心に: http://gushwell.ldblog.jp/  
 Gushwell's C# Programming Page             : http://gushwell.ifdef.jp/   
 Gushwell's F# Programming Diary            : http://techbank.jp/gushwell/
 Gushwellの読書ノート                       : http://gushwell.jugem.jp/   
                                                                          
 ■コミュニティtechbank.jp (http://techbank.jp/)                          
 Gushwellが参加している技術系コミュニティです。                           
 有志メンバーによるBlogでの技術情報発信も行っています。                   
─────────────────────────────────────
