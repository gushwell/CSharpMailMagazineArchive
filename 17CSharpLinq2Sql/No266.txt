
■━ [C#プログラミングレッスン] ━━━━━━━━━━━━━━━ No.266 ━□
  
 「LINQ to SQL編」-- エンティティオブジェクトの操作
                                                             by Gushwell  
□━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━■

データの取得についてほぼ一通り説明しましたので、今回からは、更新、挿入、
削除について見ていきましょう。
今回は、その基礎となるエンティティオブジェクトの操作について説明します。


■□───────────────────────────────────
■□ エンティティオブジェクトの操作

早速、以下のコードを見てください。


 using (var db = new NorthwindDataContext()) {
     var query = from product in db.Products
                 where product.ProductID == 5
                 select product;
     var p = query.SingleOrDefault();
     if (p != null) {
         Console.WriteLine("{0} {1}", p.ProductID, p.UnitPrice);
         p.UnitPrice = 20.5m;   // ★
     }
 }

ProductIDが 5 のProductを取得後、★印の行で、LINQクエリで取得した Product
オブジェクトのUnitPriceプロパティを変更しています。
この変更がどういった影響を与えるのかを確認するために、★印の行の直後に、以
下の２行を記述して実行してみてください。


 var p2 = db.Products.Where(product => product.ProductID == 5).Single();
 Console.WriteLine("{0} {1}", p2.ProductID, p2.UnitPrice);


ここでは、クエリ構文ではなくメソッド構文を使ってみましたが、ProductIDが
5 のProductを取得しているのは同じです。

実行すると、コンソールには、


 5 21.3500
 5 20.5


と表示されます。
UnitPriceプロパティに値を代入しただけなのに、NorthwindDataContextオブジェ
クトから再度データを取得すると、変更された値が取得できています。

これは、LINQ to SQLが変更を追跡しており、自動的にDataContextと同期が取れ
るようになっているのです。

同様に、リレーションシップのプロパティの変更も追跡してくれます。


 using (var db = new NorthwindDataContext()) {
     var prod = db.Products
                  .Where(p => p.ProductID == 34)
                  .Single();
     Console.WriteLine(prod.CategoryID);
     var cat = db.Categories
                 .Where(c => c.CategoryID == 3)
                 .Single();
     prod.Category = cat;  // ★
 }


このコードは、製品のカテゴリを変更するコードです。具体的には

 1. ProductID == 34 のProductを取り出す。

 2. 取り出したProduct のCategoryIDを表示する。

 3. CategoryId == 3 のCategoryを取り出す。

 4. このCategoryを、1で取り出した ProductのCategoryにセットする。

ということをやっています。
実行すると、"1" が表示され、ProductIDが 34 の Productのカテゴリが 1 
であることが分かります。

では、★の行の直後に、ProductIDが34のProductのCategoryIDを表示する
以下のコードを追加してみましょう。


  var prod2 = db.Products
                .Where(p => p.ProductID == 34)
                .Single();
  Console.WriteLine(prod2.CategoryID);


変更後のコードを示します。


 using (var db = new NorthwindDataContext()) {
     var prod = db.Products
                  .Where(p => p.ProductID == 34)
                  .Single();
     Console.WriteLine(prod.CategoryID);
     var cat = db.Categories
                 .Where(c => c.CategoryID == 3)
                 .Single();
     prod.Category = cat;  // ★
     var prod2 = db.Products
                   .Where(p => p.ProductID == 34)
                   .Single();
     Console.WriteLine(prod2.CategoryID);
 }


実行すると、新たに取得し直した 34番のProductのカテゴリが、1から3に変更さ
れているのが確認できるはずです。


注意しなければいけないのは、今回のコードで示したエンティティオブジェクトに
対する変更は、メモリ内のデータベースのレプリカに対してのみ行われている、と
いう点です。
データベースには、この変更は反映されていません。

実際に、データベースに対して更新を行う方法は、次回説明します。


─────────────────────────────────────
『C#プログラミングレッスン』  (ぼぼ週刊）                                 
 ☆皆さまからの感想をお待ちしています。http://gushwell.ifdef.jp/mail.html 
─────────────────────────────────────
 Published by Gushwell.                                                   
   Copyright (C) 2004-2010 Gushwell All rights reserved.                  
   Microsoft MVP for Visual C#(Apr 2005 - Mar 2011)                       
                                                                          
 ■Gushwell's Page                                                        
 窓際プログラマ─の独り言        : http://gushwell.ldblog.jp/             
 Gushwell's C# Programming Page  : http://gushwell.ifdef.jp/              
 Gushwell's F# Programming Diary : http://techbank.jp/gushwell/           
 Gushwellの読書ノート            : http://gushwell.jugem.jp/              
                                                                          
 ■コミュニティtechbank.jp (http://techbank.jp/)                          
 Gushwellが参加している技術系コミュニティです。                           
 有志メンバーによるBlogでの技術情報発信も行っています。                   
─────────────────────────────────────
