
■━ [C#プログラミングレッスン] ━━━━━━━━━━━━━━━ No.263 ━□
  
 「LINQ to SQL編」-- 即時読み込み
                                                             by Gushwell  
□━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━■


■□───────────────────────────────────
■□ 再度、「遅延読み込み」

まず、以下のコードを見てください。
このコードは、EmployeeとOrder、Customerの３つのテーブルを参照しています。

 using (var db = new NorthwindDataContext()) {
     db.Log = Console.Out;
     db.LoadOptions = dlo;
     var query = from emp in db.Employees
                 where emp.City == "London"
                 select emp;
     foreach (var emp in query) {
         var orders = emp.Orders
                         .Where(o => o.ShipCountry == "Germany");
         foreach (var o in orders)
             Console.WriteLine("{0} | {1} | {2} | {3}",
                 emp.FirstName, emp.LastName, o.ShipCountry, 
                 o.Customer.CompanyName);
     }
 }


まず、Londonにいる従業員を抜き出し、foreachでひとりひとり処理をします。
従業員に関連したOrderから、Germany に出荷しているOrder（複数存在する可能性
あり）を取り出し、従業員の名前と、ShipCountryとその顧客のCompanyName を
Console.WriteLineで出力しています。

コンソールへの出力（あるいは、SQL Server Profielr）を確認すると、内側の
foreach内で、ループのたびに、Customerを取得するためのSQLが発行されているの
が確認できます。
これは、関連するCustomerの読み込みが、本当に必要になるまで、遅延されている
からです。（前回説明した遅延読み込みです）

アプリケーションの要求によっては、この遅延読み込みはあまり効率的とは言え
ないかもしれません。
１回のSQL文の発行で、関連するオブジェクトを同時に読み込んだほうが、効率的
に処理ができる場合もあります。

それを実現するのが、LINQ to SQLに「即時読み込み」機能です。



■□───────────────────────────────────
■□ 即時読み込みを実現するDeferredLoadingEnabledプロパティ


「遅延読み込み」ではなく「即時読み込み」を実現するには、
DeferredLoadingEnabled プロパティ と、LoadOptionsプロパティを使います。

コードを以下に示します。


 using (var db = new NorthwindDataContext()) {
     db.Log = Console.Out;
     db.DeferredLoadingEnabled = false;           // ☆
     var dlo = new System.Data.Linq.DataLoadOptions();
     dlo.LoadWith<Employee>(emp => emp.Orders);  // ★
     dlo.LoadWith<Order>(ord => ord.Customer);   // ★
     db.LoadOptions = dlo;
     var query = from emp in db.Employees
                 where emp.City == "London"
                 select emp;
     foreach (var emp in query) {
         var orders = emp.Orders
                         .Where(o => o.ShipCountry == "Germany");
         foreach (var o in orders)
             Console.WriteLine("{0} | {1} | {2} | {3}",
                 emp.FirstName, emp.LastName, o.ShipCountry, 
                 o.Customer.CompanyName);
     }
 }

☆の行で遅延読み込みを機能をOFFにしています。これだけだと、関連オブジェク
トを読み込まなくなってしまいますので、★の行で、どのオブジェクトを一緒に
取得するのかを指定しています。
これで、Employeeを取得する際に、関連する Orderを取得するようになります。

 db.Log = Console.Out;

の行を追加して実行してみてください。
即時読み込みをしているコードでは、１回のSQLに変換されていることをが分かり
ます。

なお、実際には本当に必要なカラムだけを取得するように、Selectメソッドで、
匿名クラスのオブジェクトを生成するようなコードにした方が良いでしょう。


─────────────────────────────────────
『C#プログラミングレッスン』  (ぼぼ週刊）                                 
 ☆皆さまからの感想をお待ちしています。http://gushwell.ifdef.jp/mail.html 
─────────────────────────────────────
 Published by Gushwell.                                                   
   Copyright (C) 2004-2010 Gushwell All rights reserved.                  
   Microsoft MVP for Visual C#(Apr 2005 - Mar 2011)                       
                                                                          
 ■Gushwell's Page                                                        
 窓際プログラマ─の独り言        : http://gushwell.ldblog.jp/             
 Gushwell's C# Programming Page  : http://gushwell.ifdef.jp/              
 Gushwell's F# Programming Diary : http://techbank.jp/gushwell/           
 Gushwellの読書ノート            : http://gushwell.jugem.jp/              
                                                                          
 ■コミュニティtechbank.jp (http://techbank.jp/)                          
 Gushwellが参加している技術系コミュニティです。                           
 有志メンバーによるBlogでの技術情報発信も行っています。                   
─────────────────────────────────────
