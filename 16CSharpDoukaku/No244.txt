■━ [C#プログラミングレッスン] ━━━━━━━━━━━━━━━ No.244 ━□
  
 「どう書く？org編」-- アレイのuniq
                                                             by Gushwell  
□━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━■

■□───────────────────────────────────
■□ 前回の補足（というか言い訳？）

前回の「隣り合う２項の差」の「解答」で示したコードですが、以下のコードを
載せるべきだったかなと思います。

 static List<int> Diff(List<int> xs) {
    List<int> result = new List<int>();
    for (int i = 0; i < xs.Count() - 1; i++) {
         result.Add(xs[i + 1] - xs[i]);
    }
    return result;
 }

「発展」のところで、配列もリストも受け取れるDiffメソッドを示す話の流れから、
あのコードを載せたわけですが、読み返してみると、「解答」から「発展」への流
れがうまく説明できていなかったので、素直に、上のコードを載せたほうが良かっ
たかなと感じていますので、ここで訂正させていただきます。

なお、ブログ（http://gushwell.ldblog.jp/archives/51983878.html）では、「発
展の発展」ということで、C#4,0で書いたらどうなるかを載せていますので、興味
あるかたは覗いてみてください。

では、今号の本題に移りましょう。



■□───────────────────────────────────
■□ お題：アレイのuniq  <http://ja.doukaku.org/16/>


アレイ(複数の値が配列状になっているもの)xsが与えられたときに、同じ値が2回
以上出現しないように、2回目以降の出現を取り除いたアレイを返すコードを書い
てください。 
よくある「ハッシュを使う」「集合オブジェクトを使う」などの方法は順番が乱れ
てしまうので使えません。出現順序を守りつつ、2回目以降の出現だけを取り除い
てください。

例えば

{ 3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5, 8, 9, 7, 9 }

というデータの場合、

{ 3, 1, 4, 5, 9, 2, 6, 8, 7 }

という結果となります。



■□───────────────────────────────────
■□ 解答

using System;
using System.Collections.Generic;

namespace Sample {
    class Program {
        static void Main(string[] args) {
            int[] nums = { 3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5, 8, 9, 7, 9 };
            Array.ForEach(Uniq(nums),Console.WriteLine);
            Console.ReadLine();
        }

        static T[] Uniq<T>(T[] array) {
            List<T> list = new List<T>();
            foreach (var x in array) {
                if (!list.Contains(x))
                    list.Add(x);
            }
            return list.ToArray();
        }
    }
}


■□───────────────────────────────────
■□ 解説


配列を受け取り、配列を返すUniqというメソッドを作成しました。お題ではデータ
の型をint型と固定していないため、ジェネリックメソッドとし、配列の要素の型
は固定していません。
ジェネリックメソッドに詳しくない方は、T の部分を intに置き換えてコードを読
んでみてください。
Uniqメソッド内では、結果を保持しておくための List<T>を用意し、そこに順に要
素を追加していきます。このとき、Containsメソッドを使い、リストに存在しない
値のときだけリストへ追加するようにしています。これで重複を取り除くことがで
きます。
最後に、ToArray()メソッドで、配列に変換し呼び出し元に返しています。


■□───────────────────────────────────
■□ 発展

前述のコードでは、出力のフォーマットについては言及がないので、順に、ひとつ
の項目を１行ずつWriteLine で出力するだけとしています。

 ※ ArrayクラスのForEachを使ってみました。

これを 
[3, 1, 4, 5, 9, 2, 6, 8, 7]
のように出力してみましょう。

 using System.Linq;
 ...

  string[] result = Uniq(nums).Select(n => n.ToString()).ToArray();
  string s = String.Join(",", result);
  Console.WriteLine("[{0}]", s);

と書けます。Uniqメソッドの戻り値は、intのシーケンスなので、これを Selectメ
ソッドで、文字列のシーケンスに変換し、ToArrayで stringの配列にしています。
その後、String.Joinで、各文字列の間を ","で結んでいます。

どう書くorgを見ると、このようなコードをワンライナーで書いているのを見かけ
ますが、１行があまりに長くなると、何をやっているかがわかりにくいので、僕は
複数の行に分けるようにしています。

LINQを使ったコードを出したついでに、UniqメソッドもLINQを使って書き直してみ
ます。

  static T[] Uniq<T>(T[] array) {
      return array.Distinct().ToArray();
  }

Distinct拡張メソッド使えば、わざわざ自分で操作しなくても、ダブリを除去でき
ます。ただ（IEnumerableの性質上順序を保持しているはずだと思いますが）、
MSDNには、順序が保証されるとも保証されないとも記述がないので、題意を満たし
ているコードとは言えないかもしれませんが、重複を取り除きたい場合には重宝す
るメソッドだと思います。
 ※現在(.NET Framework 3.5)の実装では、順序を保持しているようです。


■□───────────────────────────────────
■□ 今回のポイント

・型を固定したくない場合はジェネリックを使う。
・配列は要素の追加削除処理には向かないので、List<T>を使う。
・List<T>から配列への変換は ToArrayメソッドを使う。
・String.Joinメソッドで、指定文字列で要素をつなげることができる。
・LINQのDistinctメソッドを使うと、重複を除去できる。

今回は短いコードでしたが、いろんな知識を総動員する必要があり、なかなか良い
お題でしたね。



■□───────────────────────────────────
■□ 次回のお題： 重複する要素を取り除く (http://ja.doukaku.org/56/)

与えられたリストxsの中から、 2回以上出現するものを全部取り除いてください。

サンプル入力
[3, 1, 4, 1, 5, 9, 2, 6, 5]
サンプル出力
[3, 4, 9, 2, 6]

※ 1, 5 が取り除かれている点に注目

これはアレイのuniqの派生問題です。リストとかアレイという言葉は言語によって
まちまちの意味で使われているので、「配列のようなもの」という漠然とした意味
にとって構いません


─────────────────────────────────────
『C#プログラミングレッスン』  (ぼぼ週刊）                                 
─────────────────────────────────────
 ☆メールマガジンの感想お待ちしています☆                                 
   http://gushwell.ifdef.jp/mail.html                                     

 Published by Gushwell.                                                   
   Copyright (C) 2004-2009 Gushwell All rights reserved.                  
   Microsoft MVP for Visual C#(Apr 2005 - Mar 2011)                       
                                                                          
 <<■ Gushwell's Page ■>>                                                
 窓際プログラマ─の独り言  ：http://gushwell.ldblog.jp/                   
 窓際プログラマ─の読書三昧：http://gushwell.jugem.jp/                    
 Gushwell's F# Programming Diary : http://techbank.jp/gushwell/           
 Gushwell's C# Programming Page  ：http://gushwell.ifdef.jp/              
   C#デザインパタ─ン : http://gushwell.ifdef.jp/dp/csdpindex.html        
                                                                          
 <<■ コミュニティtechbank.jp (http://techbank.jp/Community/) ■>>        
 Gushwellが参加している技術系コミュニティです。                           
 マイクロソフト系テクノロジー＆製品に特化したコミュニティです。Webサイトで
 は、VB、C#、VC++、SQL Server, BizTalk Server などの技術情報を公開していま
 す。皆さんの参加をお待ちしています。
─────────────────────────────────────