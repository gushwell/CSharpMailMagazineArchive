■━ [C#プログラミングレッスン] ━━━━━━━━━━━━━━━ No.248 ━□
  
 「どう書く？org編」-- 条件を満たす行を取り除く
                                                             by Gushwell  
□━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━■


■□───────────────────────────────────
■□ お題： 条件を満たす行を取り除く (http://ja.doukaku.org/10/)

ファイルから1行ずつ読み込み、"#"で始まる行だけを取り除いてファイルに出力す
るコードを書いてください。

・サンプル入力 

hello!
# remove this
 # don't remove this
bye!

・サンプル出力 

hello!
 # don't remove this
bye!

■□───────────────────────────────────
■□ 解答

using System;
using System.IO;

namespace Sample {
    class Program {
        static void Main(string[] args) {
            RemoveLines("sample.txt", "sampleOut.txt");
        }

        private static void RemoveLines(string infile, string outfile) {
            using (StreamReader sr = new StreamReader(infile))
            using (StreamWriter sw = new StreamWriter(outfile)) {
                string s;
                while ((s = sr.ReadLine()) != null) {
                    if (s.Length > 0 && s[0] == '#')
                        continue;
                    sw.WriteLine(s);
                }
            }
        }
    }
}

■□───────────────────────────────────
■□ 解説

このお題は、テキストファイルを扱う時の基本を理解出来ていれば難しい点はない
ですね。
StreamReaderクラスとStreamWriterクラスを使い、テキストファイルのIOをやって
います。
ReadLineメソッドで、1行を読み込んで、条件を満たしているかを判断し、満たし
ていないときだけ、WriteLineで出力しています。
StreamReaderとStreamWriterは、最後にDisposeを呼び出す必要がありますので、
using を使い、スコープから抜けた時に、Disposeを呼び出すようにしています。

なお、while 文は、以下のようもかけますね。

  while (!sr.EndOfStream) {
      string s = sr.ReadLine();
      if (s.Length == 0 || s[0] != '#')
          sw.WriteLine(s);
  }

こちらのほうが、string s; という初期化無しの行がなくなりますので、好まれる
かもしれませんね。



■□───────────────────────────────────
■□ 発展

「これだけだと、簡単すぎるよ！」という方のために、先ほどのコードをちょっと
ひねって、条件を、呼び出し側から指定できるようにしたいと思います。

まずは、そのコードを示します。

using System;
using System.IO;

namespace Sample {
    class Program {
        static void Main(string[] args) {
            RemoveLines("sample.txt", "sampleOut.txt", 
                s => s.Length > 0 && s[0] == '#');
        }

        private static void RemoveLines(string infile, string outfile, 
                                        Predicate<string> judge) {
            using (StreamReader sr = new StreamReader(infile))
            using (StreamWriter sw = new StreamWriter(outfile)) {
                string s;
                while ((s = sr.ReadLine()) != null) {
                    if (!judge(s))
                        sw.WriteLine(s);
                }
            }
        }
    }
}


RemoveLines では、入力ファイル名、出力ファイル名に加え、その取り除く条件を
受け取るように第3引数に、Predicate<string> を受け取るようにしています。

Predicate<T> は、System名前空間に定義されているデリゲートで、Array やList
クラスのFindメソッド、FindIndexメソッドなどでも利用されています。
このように呼び出し側から条件を与えたい場合は、Predicate<T>デリゲートを引数
にとるメソッドを作ると良いと思います。

このデリゲートを引数とすることで、指定されたオブジェクトがある基準を満たし
ているかどうかを判断するメソッドが、渡ってくることになります。

  if (!judge(s))

で、引数で渡ってきたメソッドを呼び出しています。

RemoveLinesメソッドの中は、入力ファイルから１行ずつ読み込み、条件を満たさ
ない行だけを出力ファイルに書き出すという単純なものです。

次に、RemoveLinesを呼び出す側のコードを見てみましょう。

  RemoveLines("sample.txt", "sampleOut.txt", 
               s => s.Length > 0 && s[0] == '#');

3番目の引数が、条件判定をするデリゲートを渡しているところです。デリゲート
が使える場所では、ラムダ式が使えます。
このように短いロジックの場合は、ラムダ式を使ったほうが、見通しの良いコード
になりますね。

 s => s.Length > 0 && s[0] == '#'

が、お題の「"#"で始まる行」かどうかを判定するラムダ式です。
この部分を

 s => s.Length == 0 

だけに変更すれば、空行を取り除くことになります。

もし、このような汎用性を持ったメソッドをデリゲートを使わずに実装しようとす
ると、テンプレートメソッドパターンやストラテジーパターンを使うことになると
思いますが、それではあまりにも大げさすぎます。
デリゲートを使うと、より少ない手間で、「ほとんど同じコードだけどちょっと違
う」というコードをひとつにすることができます。


■□───────────────────────────────────
■□ 次回のお題： 重複無し乱数 (http://ja.doukaku.org/46/)

整数nを渡すと1 ～ n までの整数を重複しないようランダムに出力する関数
「bingo」を作ってください。


─────────────────────────────────────
『C#プログラミングレッスン』  (ぼぼ週刊）                                 
─────────────────────────────────────
 ☆メールマガジンの感想お待ちしています☆                                 
   http://gushwell.ifdef.jp/mail.html                                     

 Published by Gushwell.                                                   
   Copyright (C) 2004-2010 Gushwell All rights reserved.                  
   Microsoft MVP for Visual C#(Apr 2005 - Mar 2011)                       
                                                                          
 <<■ Gushwell's Page ■>>                                                
 窓際プログラマ─の独り言  ：http://gushwell.ldblog.jp/                   
 窓際プログラマ―の読書三昧：http://gushwell.jugem.jp/                    
 Gushwell's F# Programming Diary : http://techbank.jp/gushwell/           
 Gushwell's C# Programming Page  ：http://gushwell.ifdef.jp/              
   C#デザインパタ―ン : http://gushwell.ifdef.jp/dp/csdpindex.html        
                                                                          
 <<■ コミュニティtechbank.jp (http://techbank.jp/Community/) ■>>        
 Gushwellが参加している技術系コミュニティです。                           
 マイクロソフト系テクノロジー＆製品に特化したコミュニティです。Webサイトで
 は、VB、C#、VC++、SQL Server, BizTalk Server などの技術情報を公開していま
 す。皆さんの参加をお待ちしています。
─────────────────────────────────────
