■━ [C#プログラミングレッスン] ━━━━━━━━━━━━━━━ No.251 ━□
  
 「どう書く？org編」-- 疑似並行処理
                                                             by Gushwell  
□━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━■

みなさん、こんにちは。GWはどうお過ごしでしたか。
GWで少し時間ができたので、今回はいつもよりも少し長めの記事になっています。
後半の「発展」のところではスレッドの同期についても扱っているので、是非最後
までお読みください。

それと、先日読者の方から励ましのお便りをいただきました。どうもありがとう
ございました。

■□───────────────────────────────────
■□ お題： 疑似並行処理 (http://ja.doukaku.org/215/)


数値（たとえば1から10）と、アルファベット（たとえばAからJまで）を順に出力
する別々のループ処理を並行に実行させ、共通の出力先に出力する極力シンプルな
コードを書いてください。

念のため、実行後、出力先に数値とアルファベットが混ざって出力されている（た
とえば、数値がすべて出力されてからアルファベットが続く…というふうになって
いない）ことを確認してください。混ざってさえいれば、それぞれ１文字ずつ交互
である必要はありませんし、もちろん交互でも構いません。

出力先や出力方法は自由です。標準出力、テキストファイル、コンテナオブジェク
ト（配列、リスト、コレクション）など使いやすいもので構いません。

（お題には"疑似"とありますが、疑似である必要はありません）

■□───────────────────────────────────
■□ 解答

using System;
using System.Threading;

namespace 並行処理 {
    class Program {
        static void Main(string[] args) {
            Thread th1 = new Thread(LoopA);
            Thread th2 = new Thread(LoopB);
            th1.Start();
            th2.Start();
            th1.Join();
            th2.Join();
            Console.WriteLine("End");
            Console.ReadLine();
        }
        static void LoopA() {
            for (int i = 1; i <= 10; i++) {
                Console.Write("{0} ", i);
                Thread.Sleep(1);
            }
        }
        static void LoopB() {
            for (char c = 'A'; c <= 'J'; c++) {
                Console.Write("{0} ", c);
                Thread.Sleep(1);
            }
        }
    }
}



■□───────────────────────────────────
■□ 解説

スレッドを使い２つのメソッド(LoopA, LoopB)を並行動作させています。

Threadのコンストラクタで、起動したいメソッドを渡し、Startメソッドで、スレ
ッドを起動しています。
Joinメソッドは、スレッドが終了するまでウエイトするメソッドです。上のコード
では、２つのスレッドが終わるまで待ち、"End" をコンソールに表示しています。
とても単純なコードですので、単にThreadを起動するだけならば、それほど難しい
ことは無いですね。

僕の環境だと、

1 A 2 B C 3 D 4 5 E 6 F G 7 8 H 9 I 10 J End

と表示されました。確かに、並行して動作しているのを確認できました。
Sleep()を取ってしまうと、LoopBに制御が渡る前に、LoopAが終ってしまうことも
あるため、Sleep()を入れています。
ループ回数がもう少し多ければ、Sleep()を入れなくても、並行して動作してい
るのを確実に確認できるはずです。


■□───────────────────────────────────
■□ 発展

LoopAとLoopBはほぼ同じコードですので、これをひとつのメソッドにしてみましょ
う。

 static void Main(string[] args) {
     Thread th1 = new Thread(Loop);
     Thread th2 = new Thread(Loop);
     th1.Start(Enumerable.Range(1,10));
     th2.Start("ABCDEFGHJ");
     th1.Join();
     th2.Join();
     Console.WriteLine("End");
     Console.ReadLine();
 }

 static void Loop(object obj) {
     foreach (var x in (IEnumerable)obj) {
         Console.Write("{0} ",x.ToString());
         Thread.Sleep(1);
     }
 }

Startメソッドで、表示するデータ列を渡しています。Loopメソッドは、引数でこ
のデータ列を受け取ります。

スレッドが利用するデータを引数として渡せるStartメソッドは、引数がobject型
に限定されていますので、内部でキャストしています。


■□───────────────────────────────────
■□ 発展(2)

今度は、必ず交互にデータが表示されるように２つのスレッドを同期させてみます。

 using System;
 using System.Threading;

 namespace 並行処理 {
     class Program {
         private static AutoResetEvent are1 = new AutoResetEvent(true);
         private static AutoResetEvent are2 = new AutoResetEvent(false);

         static void Main(string[] args) {
             Thread th1 = new Thread(LoopA);
             Thread th2 = new Thread(LoopB);
             th1.Start();
             th2.Start();
             th1.Join();
             th2.Join();
             Console.WriteLine("End");
             Console.ReadLine();
         }

         static void LoopA() {
             for (int i = 1; i <= 10; i++) {
                 are1.WaitOne();
                 Console.Write("{0} ", i);
                 are2.Set();
             }
         }
         static void LoopB() {
             for (char c = 'A'; c <= 'J'; c++) {
                 are2.WaitOne();
                 Console.Write("{0} ", c);
                 are1.Set();
             }
         }
     }
 }


Loopメソッド一つにしてしまったものでは、同期処理が面倒なので、最初に示した
LoopA, LoopBの２つのメソッドを使うコードを改良してみました。
２つのAutoResetEventを使い同期しています。

WaitOneメソッドというのは、リソースが使用可能になるまで待機するメソッドです。
なお、WaitOneから戻ると、自動的にリソース使用不可の状態になります。（これ
がAutoResetEventの性質です）
Setメソッドは、リソースを使用可能状態にするメソッドです。
実際には、リソースが使用可能な状態/不可の状態のフラグを変えるだけです。

動きを簡単にみてみましょう。
LoopAでは、are1の初期値がtrue（リソースが使用可能状態）なので、WaitOneがら
すぐに戻ってきて、Console.WriteLineを実行します。そして次に、ar2.Setを呼び
出し、LoopBに「動いて良いよ」とシグナルを出します。（つまり、リソースが使
用可能だというフラグを立てます）

LoopBでは、are2の初期値が falseなので、WaitOneで LoopAからシグナルを受け取
るまで待ち状態になります。LoopAで、Setメソッドが呼ばれると制御が戻り、
Console.WriteLineを呼び出します。続いてLoopAに「動いて良いよ」とシグナルを
出します。

これを繰り返すことで、確実に交互にひとつづつ出力するようになります。


■□───────────────────────────────────
■□ 次回のお題： 変形Fizz-Buzz問題 (http://ja.doukaku.org/77/)
 
以下の仕様を満たす文字列を20行出力するプログラムを作成してください。

1. 1行の出力は「<行番号> '：' <メッセージ>」であること。
2. 行番号が 3の倍数であるとき、メッセージは「Fizz」であること
3. 行番号が 5の倍数であるとき、メッセージは「Buzz」であること
4. 行番号が 3の倍数かつ5の倍数であるとき、メッセージは「FizzBuzz」であるこ
   と
5. 上記に記した条件以外のメッセージについては「hoge」であること
6. 条件分岐する場合、if文のみが使用でき、
   かつ、論理式が成立した場合の処理のみが記述できます。

というわけでこの問題はFizz-Buzz問題をelseなしならどう書く？という問題です。

出力例：
 1:hoge
 2:hoge
 3:Fizz
 4:hoge
 5:Buzz
 6:Fizz
 7:hoge
 8:hoge
 9:Fizz
10:Buzz
11:hoge
12:Fizz
13:hoge
14:hoge
15:FizzBuzz
16:hoge
17:hoge
18:Fizz
19:hoge
20:Buzz


─────────────────────────────────────
『C#プログラミングレッスン』  (ぼぼ週刊）                                 
─────────────────────────────────────
 ☆メールマガジンの感想をお待ちしています☆                               
   http://gushwell.ifdef.jp/mail.html                                     

 Published by Gushwell.                                                   
   Copyright (C) 2004-2010 Gushwell All rights reserved.                  
   Microsoft MVP for Visual C#(Apr 2005 - Mar 2011)                       
                                                                          
 <<■ Gushwell's Page ■>>                                                
 窓際プログラマ─の独り言        : http://gushwell.ldblog.jp/             
 Gushwellの読書ノート            : http://gushwell.jugem.jp/              
 Gushwell's F# Programming Diary : http://techbank.jp/gushwell/           
 Gushwell's C# Programming Page  : http://gushwell.ifdef.jp/              
   C#デザインパタ―ン : http://gushwell.ifdef.jp/dp/csdpindex.html        
                                                                          
 <<■ コミュニティtechbank.jp (http://techbank.jp/Community/) ■>>        
 Gushwellが参加している技術系コミュニティです。                           
 マイクロソフト系テクノロジー＆製品に特化したコミュニティです。Webサイトで
 は、VB、C#、VC++、SQL Server, BizTalk Server などの技術情報を公開していま
 す。皆さんの参加をお待ちしています。                                     
─────────────────────────────────────