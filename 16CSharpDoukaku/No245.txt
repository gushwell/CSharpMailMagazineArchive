■━ [C#プログラミングレッスン] ━━━━━━━━━━━━━━━ No.245 ━□
  
 「どう書く？org編」-- 重複する要素を取り除く
                                                             by Gushwell  
□━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━■



■□───────────────────────────────────
■□ お題：重複する要素を取り除く  (http://ja.doukaku.org/56/)


与えられたリストxsの中から、 2回以上出現するものを全部取り除いてください。

サンプル入力
[3, 1, 4, 1, 5, 9, 2, 6, 5]
サンプル出力
[3, 4, 9, 2, 6]

※ 1, 5 が取り除かれている点に注目

これはアレイのuniqの派生問題です。リストとかアレイという言葉は言語によって
まちまちの意味で使われているので、「配列のようなもの」という漠然とした意味
にとって構いません




■□───────────────────────────────────
■□ 解答


 static IEnumerable<int> UniqOnly(IEnumerable<int> list) {
     Dictionary<int, int> mem = new Dictionary<int, int>();
     foreach (var n in list) {
         if (mem.ContainsKey(n))
             mem[n] = mem[n] + 1;
         else
             mem[n] = 1;
     }
     List<int> result = new List<int>();
     foreach (var e in list) {
         if (mem[e] == 1)
             result.Add(e);
     }
     return result;
 }


このメソッドを利用する側のコードです。

 int[] array = { 3, 1, 4, 1, 5, 9, 2, 6, 5, 1 };
 var r = UniqOnly(array);
 foreach (var x in r) {
     Console.WriteLine(x);
 }

※ここでは、配列を渡していますが、List<int>も渡すことができます。


■□───────────────────────────────────
■□ 解説

UniqOnlyメソッドが何をやっているかといえば、Dictionary<int,int> を使い、要
素の出現回数を記憶します。
Dictionaryは、キーを使い、ランダムアクセスが可能です。

与えられた配列の要素(数値）をDictionaryのキーとし、出現回数をDictionaryの値
として記憶します。

mem.ContainsKeyで、Dictionaryにあるかどうかを調べ、存在していれば、

 mem[n] = mem[n] + 1;

で、出現回数に１を加え、存在していなければ、

 mem[n] = 1;

としています。

その後に、出現回数が１回のものだけを取り出し、リストに加え、そのリストを返
しています。
こうすることで、重複した要素を取り除くことができます。




■□───────────────────────────────────
■□ 発展

この関数は、配列でもリストでも扱えるように、IEnumerable<int>型を受け取って
います。
しかし、受け取れるのは、int型の要素を持つものに限られてしまうのが欠点です。
このコードを、どんどんブラッシュアップしていきます。
まず、この欠点を解消するために、ジェネリックメソッドに変更します。


 static IEnumerable<T> UniqOnly<T>(IEnumerable<T> list) {
     Dictionary<T,int> mem = new Dictionary<T,int>();
     foreach (var n in list) {
         if (mem.ContainsKey(n))
             mem[n] = mem[n] + 1;
         else
             mem[n] = 1;
     }
     List<T> result = new List<T>();
     foreach (var e in list) {
         if (mem[e] == 1)
             result.Add(e);
     }
     return result;
 }

これで、char[] や List<string>のオブジェクトを受け取れるようになりました。

注意しなければならないのは、最後のforeachは、

 foreach (var e in mem) {
     if (e.Value == 1)
         result.Add(e.Key);
 }
 return result;

ではないということです(foreachの in の後が異なります）。

このように書いてしまうと、Dictionaryオブジェクトは要素を追加した順序を保持
できないために、結果の順序も保障されません。引数listから要素を順に取り出す
ようにすれば、元の順序を保障することができます。

今度は、結果を List<T>ではなく、yield return を使ってみます。こうすれば、
List<T>のインスタンスを生成する必要がなくなります。

 static IEnumerable<T> UniqOnly<T>(IEnumerable<T> list) {
     Dictionary<T, int> mem = new Dictionary<T, int>();
     foreach (var n in list) {
         if (mem.ContainsKey(n))
             mem[n] = mem[n] + 1;
         else
             mem[n] = 1;
     }
     foreach (var e in list) {
         if (mem[e] == 1)
             yield return e;
     }
 }

ちなみに、最後のforeach文は、LINQを使えば、

 return list.Where(e => mem[e] == 1);

と書いても同じなので、

 static IEnumerable<T> UniqOnly<T>(IEnumerable<T> list) {
     Dictionary<T, int> mem = new Dictionary<T, int>();
     foreach (var n in list) {
         if (mem.ContainsKey(n))
             mem[n] = mem[n] + 1;
         else
             mem[n] = 1;
     }
     return list.Where(e => mem[e] == 1);
 }

と書けます。
LINQの話が出たので、
こんな書き方もできます。

 static IEnumerable<T> UniqOnly<T>(IEnumerable<T> list) {
     var q = from n in list
             group n by n;
     return from g in q
            where g.Count() == 1
            select g.Key;
 }

最初のクエリで、要素ごとにグルーピングし、次のクエリで、グルーピングされた
要素の数が１のものだけを抜き出しています。
基本的な考え方は、その前に示したコードと同じですね。


さらに、効率を無視すれば、

 static IEnumerable<T> UniqOnly<T>(IEnumerable<T> list) {
     return list.Where(n => (list.Count(x => x.Equals(n)) == 1));
 }

１行で済んでしまいます。
このコードが何をやっているかを調べるのは皆さんの宿題とします。




■□───────────────────────────────────
■□ 次回のお題： リストを逆順に表示 (http://ja.doukaku.org/27/)

リスト状のものを逆順に表示するメソッドを書いてください。

1, 2, 3, 4, 5

というリストが与えられたら、

5
4
3
2
1

と表示するメソッドを定義してください。
引数で与えられたリストの順番は保持してください。

※ Gushwellが一部問題文を書きなおしています。


─────────────────────────────────────
『C#プログラミングレッスン』  (ぼぼ週刊）                                 
─────────────────────────────────────
 ☆メールマガジンの感想お待ちしています☆                                 
   http://gushwell.ifdef.jp/mail.html                                     

 Published by Gushwell.                                                   
   Copyright (C) 2004-2009 Gushwell All rights reserved.                  
   Microsoft MVP for Visual C#(Apr 2005 - Mar 2010)                       
                                                                          
 <<■ Gushwell's Page ■>>                                                
 窓際プログラマ─の独り言  ：http://gushwell.ldblog.jp/                   
 窓際プログラマ─の読書三昧：http://gushwell.jugem.jp/                    
 Gushwell's F# Programming Diary : http://techbank.jp/gushwell/           
 Gushwell's C# Programming Page  ：http://gushwell.ifdef.jp/              
   C#デザインパタ─ン : http://gushwell.ifdef.jp/dp/csdpindex.html        
─────────────────────────────────────
