■━ [C#プログラミングレッスン] ━━━━━━━━━━━━━━━ No.242 ━□
  
 「どう書く？org編」-- バイナリクロック
                                                             by Gushwell  
□━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━■

■□───────────────────────────────────
■□ お題：バイナリクロック

時刻を二進数相当の表現で出力する時計アプリケーションを書いてください。 
20:18の場合，例えば以下の様な出力をするイメージです。 

出力例: 
　■□■□□
□■□□■□


※ リアルタイムで刻々と表示を変更させる必要はありません。指定した時刻を二
   進数相当の表現で出力できればOKです。


■□───────────────────────────────────
■□ 解答

 class Program {
     static void Main(string[] args) {
         // 現在の時刻を表示する
         BinaryClock bc = new BinaryClock();
         Console.WriteLine(bc.ToString());

         // 指定した時刻を表示する
         DateTime dt = new DateTime(2009, 1, 1, 20, 18, 0);
         Console.WriteLine(bc.ToString(dt));
         Console.ReadLine();
     }
 }

 public class BinaryClock {
     private static string ToBinString(int num, int width) {
         string format = string.Format("{{0,{0}}}", width);
         string s = String.Format(format, 
                                  System.Convert.ToString(num, 2));
         string result = "";
         foreach (char c in s)
             result += (c == '1') ? '■' : '□';
         return result;
     }

     public string ToString(DateTime dateTime) {
         return "　" + ToBinString(dateTime.Hour, 5) + "\n" + 
                ToBinString(dateTime.Minute, 6);
     }

     public override string ToString() {
         return ToString(DateTime.Now);
     }
 }


■□───────────────────────────────────
■□ 解説

ToBinStringメソッドが、このプログラムのもっとも中心となる箇所です。このメ
ソッドでは、与えられた数値numを□と■からなる文字列に変換しています。

まず、２進数文字列に変換します。これは、System.Convert.ToStringを使ってい
ます。
例えば、numが 5 の場合は、"101" という文字列が、numが 12 ならば、"1100" と
いう文字列が得られます。この２進数文字列をstring.Formatで指定幅で右詰めに
しています。width が 5 の場合は、"  101"となります。

このwidthは、時刻の時が5で、分が6になるので、

     string format = string.Format("{{0,{0}}}", width);

で、"{0,5}" あるいは "{0,6}" という文字列を生成し、５桁、６桁の文字列を生
成しています。

最後に、foreachを使い、"  101" の文字列を "□□■□■"に変換します。


このBinaryClockクラスでは、２つのToStringメソッドを定義しています。ひとつ
は、DateTime を受け取り、文字列に変換するものと、２つめのToStringは、現在
の時刻を文字列に変換します。
引数のない、ToStringは、Objectクラスに定義されていますので、override指定を
し、再定義しています。


このBinaryClockの使い方を示します。

 BinaryClock bc = new BinaryClock();
 Console.WriteLine(bc.ToString());
 Console.WriteLine(bc.ToString(new DateTime(2009, 1, 1, 20, 18, 0)));


■□───────────────────────────────────
■□ 発展

ToBinStringメソッドの

 string result = "";
 foreach (char c in s)
     result += (c == '1') ? '■' : '□';
 return result;

は、LINQを使うと、

 char[] bin = s.Select(c => c == '1' ? '■' : '□').ToArray();
 return new String(bin);

のように書けます。こういった処理で、Selectメソッドが使えるのは、興味深いで
すね。得られるのは、 char[]型なので、Stringのコンストラクタを使い、char[]
型の bin を文字列にしています。

効率という面では、あまり良いとはいえませんが、通常は、このコードが速度ネッ
クになることは無いと思います

では、LINQだと、効率の良いコードを書けないのかというと、そんなこともありま
せん。あまりなじみのないメソッドですが、Aggregateメソッドを使うと、効率は
そのままに、

  return s.Aggregate("", (t, c) => t + (c == '1' ? '■' : '□'));

と１行で記述することができます。


■□───────────────────────────────────
■□ 今回のポイント

・System.Convert.ToStringを使うと、２進数文字列に変換することができます。
・String.Formatで桁数を可変にしたい場合は、第１引数の書式指定の文字列を
  String.Formatで作成し、それを次の String.Formatに渡します。
・Stringは、のコンストラクタで、char[] を引数に渡すことで、char[]を文字列
  にすることができます。
・LINQのSelectメソッドは射影である。
  Selectという名前からは、「抽出する」というイメージが強いですが、Selectメ
  ソッドは、一連のシーケンスに対し、ある変換処理をする場合にも利用できます。
・クラスを定義して、再利用性を高める。
  今回は、BinaryClockというクラスを作成してみました。とても短いプログラム
  なので、クラスを定義するまでもないかもしれませんが、クラスとして独立させ
  ることで、再利用性が高まったと思います。
  このクラスを変更無しに、WinfowsFormsなどで使うことができます。
  また、クラスを定義する習慣をつけることで、より大きなプログラム作成に対応
  できる力を付けることにつながると思います。


■□───────────────────────────────────
■□ 次回のお題：隣り合う二項の差

整数のリストがxsが与えられたときに、隣り合う2要素の差のリストを作る関数
diffを作ってください。

サンプル入力
[3, 1, 4, 1, 5, 9, 2, 6, 5]
サンプル出力
[-2, 3, -3, 4, 4, -7, 4, -1]

 URL:http://ja.doukaku.org/49/


─────────────────────────────────────
『C#プログラミングレッスン』  (ぼぼ週刊）                                 
─────────────────────────────────────
 ☆メールマガジンの感想お待ちしています☆                                 
   http://gushwell.ifdef.jp/mail.html                                     

 Published by Gushwell.                                                   
   Copyright (C) 2004-2009 Gushwell All rights reserved.                  
   Microsoft MVP for Visual C#(Apr 2005 - Mar 2011)                       
                                                                          
 <<■ Gushwell's Page ■>>                                                
 窓際プログラマ─の独り言  ：http://gushwell.ldblog.jp/                   
 窓際プログラマ―の読書三昧：http://gushwell.jugem.jp/                    
 Gushwell's F# Programming Diary : http://techbank.jp/gushwell/           
 Gushwell's C# Programming Page  ：http://gushwell.ifdef.jp/              
   C#デザインパタ―ン : http://gushwell.ifdef.jp/dp/csdpindex.html        
                                                                          
 <<■ コミュニティtechbank.jp (http://techbank.jp/Community/) ■>>        
 Gushwellが参加している技術系コミュニティです。                           
 マイクロソフト系テクノロジー＆製品に特化したコミュニティです。Webサイトで
 は、VB、C#、VC++、SQL Server, BizTalk Server などの技術情報を公開していま
 す。皆さんの参加をお待ちしています。
─────────────────────────────────────