┏━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━┳━┳━┓
┃☆┃ C#プログラミングレッスン                         ┃＿┃□┃×┃
┣━┻━━━━━━━━━━━━━━━━━━━━━━━━━┻━┻━┻━┫
┃ファイルの扱い (2)  Stream                                  No.104┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

前回は、テキストファイルの読み込みについて説明しましたので、今回は書き
込みについて説明します。


■──────────────────────────────────
■ バイト単位で書き込む

まずは、バイト単位の書き込みです。

  1:using System;
  2:using System.IO;
  3:
  4:    static void Main(string[] args) {
  5:        using ( Stream stm = new FileStream(@"sample.dat", 
  6:                            FileMode.Create, FileAccess.Write) ) {
  7:            for ( byte b = (Byte)'A'; b <= (byte)'Z'; b++ ) {
  8:                stm.WriteByte(b);
  9:            }
 10:        }
 11:    }


5行目:
  new FileStream でファイルを書き込みモードでオープンし、そのインスタ
  ンスを Stream型の  変数 stm に代入しています。  using ステートメント
  を利用しているので、Close() あるいは、Dispose()は不要です。

8行目:
  WriteByteメソッドを使い、１byteずつデータを読み込んでいます。


■──────────────────────────────────
■ 行単位で書き込む
  

  1:  string[] lines = { "12345", "abcdefg", "wxyz", "あいうえお" };
  2:  using ( StreamWriter writer = new 
  3:                          StreamWriter(@"sample.txt",false) ) {
  4:      foreach ( string s in lines ) {
  5:          writer.WriteLine(s);
  6:      }
  7:  }

2行目:
  行単位でファイルに書き込むために、StreamWriterのインスタンスを生成し
  ています。
  第２引数のflaseは、 データをファイルの末尾に追加するかどうかの情報で、
  追加しないことを示しています。

5行目:
  WriteLineメソッドで行単位でファイルにデータを書いています。

StreamWriter のコンストラクタで、エンコーディングの指定をしていないた
め、この例では、バイト順マーク (BOM) のない UTF-8エンコードでデータが
書かれます。シフトJISにしたい場合には、

  using ( StreamWriter writer = 
              new StreamWriter(@"sample.txt",false,
                               Encoding.GetEncoding(932)) ) {

のように書きます。

また、Fileクラスのメソッドを使い、以下のようにも書くことができます。

  using ( StreamWriter sw = File.CreateText(@"sample.txt") ) {

ただし、CreateText メソッドは、UTF-8限定で、シフトJISなど他のエンコー
ディング指定はできません。
なお、Fileクラスには AppendText というstatic メソッドも用意されていま
す。



■──────────────────────────────────
■ 一気に書き込む


もし、データが配列に格納されているのならば、Fileクラスの WriteAllLines
メソッドを利用するのが簡単です。配列の内容を一気に書き出すことが出来ま
す。

  1: string[] lines = { "12345", "abcdefg", "wxyz", "あいうえお" };
  2: File.WriteAllLines("sample2.txt", lines, 
  3:                     Encoding.GetEncoding(932));


┌─┬─────────────────────────┬─┬─┬─┐
│☆│ C#プログラミングレッスン  (ぼぼ週刊）            │＿│□│×│
├─┴─────────────────────────┴─┴─┴─┤
│ Published by Gushwell.                                           │
│ Copyright (C) 2004-2006 Gushwell All rights reserved.            │
│ Microsoft MVP Visual Developer - Visual C#(Apr 2006 - Mar 2007)  │
│-------------------- Gushwell's Page ---------------------------- │
│ 窓際プログラマーの独り言  ：http://blog.livedoor.jp/gushwell/    │
│ 窓際プログラマーの読書三昧：http://gushwell.jugem.jp/            │
│ C#デザインパターン :                                             │
│  『増補改訂版Java言語で学ぶデザインパターン入門 / 結城 浩(著)』  │
│   のサンプルコードをC#に移植したものを掲載しています。           │
│   移植後のコードの公開は、結城氏の了解を得ています。             │
│   http://blog.livedoor.jp/gushwell/archives/50333227.html        │
└─────────────────────────────────┘