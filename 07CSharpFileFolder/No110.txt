┏━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━┳━┳━┓
┃☆┃ C#プログラミングレッスン                         ┃＿┃□┃×┃
┣━┻━━━━━━━━━━━━━━━━━━━━━━━━━┻━┻━┻━┫
┃ファイルの末尾にデータを追加                                No.110┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

ファイルの入出力、ファイルの属性、ディレクトリ、ドライブの操作と話を
進めてきましたが、Stream関連でいくつか説明し忘れていたものがあるので、
再度、数回に渡りStream関連について説明します。

今回は、ファイルの末尾にデータを追加する方法です。

■──────────────────────────────────
■ ファイルの末尾にテキストを追加する

using System;
using System.IO;
...
   static void Main(string[] args) {
       // ファイルの末尾に追加
       using ( StreamWriter writer = 
                              new StreamWriter("sample.txt", true) ) {
           writer.WriteLine("Append Data1");
           writer.WriteLine("Append Data2");
           writer.WriteLine("----");
           writer.Close();
       }

       // ファイル全体を表示
       using ( StreamReader reader = new StreamReader("sample.txt") ) {
           String line;
           while ( ( line = reader.ReadLine() ) != null ) {
               Console.WriteLine(line);
           }
           reader.Close();

       }
       Console.ReadLine();
   }


ファイルの末尾にデータを追加するには、StreamWriter のインスタンスの生成
方法が異なるだけで、あとの処理は、通常のファイルへの出力となんら変わり
はありません。

Stream のインスタンスを生成するには、StreamWriter のコンストラクタの第
２引数の append フラグに true を指定します。
ファイルが存在し、append フラグが false の場合は、ファイルが上書きされ
ます。ファイルが存在し、append フラグが true の場合は、データがファイル
の末尾に追加されます。それ以外の場合は、新しいファイルが作成されます。

ファイルが存在しない状況で、このプログラムを起動すると、

Append Data1
Append Data2
----

と表示されます。
再度、このプログラムを起動すれば、

Append Data1
Append Data2
----
Append Data1
Append Data2
----

と表示されます。


■──────────────────────────────────
■ もう一つの方法

StreamWriter のコンストラクタ呼び出し部分は、File クラスを使って、以下
のように書くこともできます。


・既存のファイルに UTF-8 エンコードされたテキストを付け加えるために 
  StreamWriter を開く。

 　 using ( StreamWriter writer = File.AppendText("sample.txt") ) {



・読み取り用に UTF-8 エンコードされた既存のテキストファイルを開く。

　  using ( StreamReader reader = File.OpenText("sample.txt") ) {


┌─┬─────────────────────────┬─┬─┬─┐
│☆│ C#プログラミングレッスン  (ぼぼ週刊）            │＿│□│×│
├─┴─────────────────────────┴─┴─┴─┤
│ Published by Gushwell.                                           │
│ Copyright (C) 2004-2006 Gushwell All rights reserved.            │
│ Microsoft MVP Visual Developer - Visual C#(Apr 2006 - Mar 2007)  │
│-------------------- Gushwell's Page ---------------------------- │
│ 窓際プログラマーの独り言  ：http://blog.livedoor.jp/gushwell/    │
│ 窓際プログラマーの読書三昧：http://gushwell.jugem.jp/            │
│ C#デザインパターン :                                             │
│  『増補改訂版Java言語で学ぶデザインパターン入門 / 結城 浩(著)』  │
│   のサンプルコードをC#に移植したものを掲載しています。           │
│   移植後のコードの公開は、結城氏の了解を得ています。             │
│   http://blog.livedoor.jp/gushwell/archives/50333227.html        │
└─────────────────────────────────┘