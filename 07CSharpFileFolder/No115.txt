┏━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━┳━┳━┓
┃☆┃ C#プログラミングレッスン                         ┃＿┃□┃×┃
┣━┻━━━━━━━━━━━━━━━━━━━━━━━━━┻━┻━┻━┫
┃  MemoryStream                                              No.115┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

■──────────────────────────────────
■ MemoryStreamとは

MemoryStreamは、コンピュータの主記憶をストリームとして扱うクラスです。
ひとつのプロセス内で、ファイルに出力したデータを、再度読み込むような
処理があった場合は、これをメモリストーリームに置き換えることで、処理速
度アップを図れる場合もあります。
暗号化やビットマップを扱う際に、メモリストリームがよく利用されるようで
す。

■──────────────────────────────────
■ メモリストリームへの出力

まずは、byte配列のデータを、メモリストリームに出力するコードです。


using System.Text;
using System.IO;

...

 static void Main(string[] args) {
     byte[] wbytes = Encoding.Unicode.GetBytes("おはようございます。");
     using ( MemoryStream memStream = new MemoryStream() ) {
         WriteTo(memStream, wbytes);
     }
 }

 private static void WriteTo(MemoryStream memStream, byte[] wbytes) {
     memStream.Write(wbytes, 0, wbytes.Length);
     for ( int i = 0; i < wbytes.Length; i++ ) {
         memStream.WriteByte(wbytes[i]);
     }
 }

この例では、"おはようございます。" という文字列を、byte配列に変換し、
そのbyte配列をメモリストリームに出力しています。WriteToメソッドでは、
WriteメソッドとWriteByteメソッドを使い、受け取ったbyte配列を２回出力し
ています。
出力する部分は、通常の Stream への出力となんら変わりません。
そういう意味では、

 private static void WriteTo(Stream stream, byte[] wbytes) {

としたほうが良いかもしれません。

ただ、どちらにせよ、上記プログラムは、これだけではまったく無意味です。
というのは、usingの外側に処理が移った時点で、メモリストーリームは
Disposeされているので、利用することができないからです。

ですので、通常は、Disposeが呼ばれる前に、出力したデータを利用する処理
を行わなくてはなりません。


■──────────────────────────────────
■ メモリストリームからの読み込み

では、上記のコードに、読み込むコードを追加しましょう。

using System.Text;
using System.IO;

...

 static void Main(string[] args) {
     byte[] wbytes = Encoding.Unicode.GetBytes("おはようございます。");
     using ( MemoryStream memStream = new MemoryStream() ) {
　　　　 // ストリームへの出力
         WriteTo(memStream, wbytes);
         // ストリームからの読み込み
         byte[] rbytes = ReadFrom(memStream);
         string s = Encoding.Unicode.GetString(rbytes);
         Console.WriteLine(s);
     }
 }

 private static void WriteTo(MemoryStream memStream, byte[] wbytes) {
     memStream.Write(wbytes, 0, wbytes.Length);
     for ( int i = 0; i < wbytes.Length; i++ ) {
         memStream.WriteByte(wbytes[i]);
     }
 }

 private static byte[] ReadFrom(MemoryStream memStream) {
     memStream.Seek(0, SeekOrigin.Begin);
     byte[] bytes = new byte[memStream.Length];
     memStream.Read(bytes, 0, bytes.Length);
     return bytes;
 }


ReadFrom メソッドに注目してください。この部分が、メモリストリームからデー
タを読み込み部分です。

Seek メソッドで、現在のストリーム内の位置を先頭に設定しなおしています。
これで、ストリームの先頭からデータを読むことができます。

次に読み込むバッファー用の配列は適切なサイズで初期化し、Read メソッド
で、ストリームからデータを読み込んでいます。

読み込んだデータは、Mainメソッド内で、

　Encoding.Unicode.GetString(rbytes);

と、byte配列を文字列に変換し、Consoleに出力しています。
上記コードを実行すると、

　おはようございます。おはようございます。

と表示されます。

┌─┬─────────────────────────┬─┬─┬─┐
│☆│ C#プログラミングレッスン  (ぼぼ週刊）            │＿│□│×│
├─┴─────────────────────────┴─┴─┴─┤
│ Published by Gushwell.                                           │
│ Copyright (C) 2004-2007 Gushwell All rights reserved.            │
│ Microsoft MVP Visual Developer - Visual C#(Apr 2006 - Mar 2007)  │
│-------------------- Gushwell's Page ---------------------------- │
│ 窓際プログラマーの独り言  ：http://blog.livedoor.jp/gushwell/    │
│ 窓際プログラマーの読書三昧：http://gushwell.jugem.jp/            │
│ C#デザインパターン :                                             │
│  『増補改訂版Java言語で学ぶデザインパターン入門 / 結城 浩(著)』  │
│   のサンプルコードをC#に移植したものを掲載しています。           │
│   移植後のコードの公開は、結城氏の了解を得ています。             │
│   http://blog.livedoor.jp/gushwell/archives/50333227.html        │
└─────────────────────────────────┘