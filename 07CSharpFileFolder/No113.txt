┏━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━┳━┳━┓
┃☆┃ C#プログラミングレッスン                         ┃＿┃□┃×┃
┣━┻━━━━━━━━━━━━━━━━━━━━━━━━━┻━┻━┻━┫
┃BinaryWriter                                                No.113┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

これまでは、テキストファイルを読み書きするプログラムの説明をしてきまし
たが、今回は、C# のプリミティブな型をそのまま読み書きする（バイナリファ
イルを扱う）プログラムの説明です。
バイナリファイルを扱う際に利用するクラスは、BinaryWriter, BinaryReader
の２つです。今回は、BinaryWriterの説明をします。

■──────────────────────────────────
■ BinaryWriterのサンプルコード

まずは、以下のコードを見てください。

  using ( BinaryWriter binWriter = new BinaryWriter(
                         File.Open("binary.dat", FileMode.Create)) ) {
      int intNum = 123;
      double doubleNum = 987.654;
      byte[] byteArray = { 0x31, 0x32, 0x33, 0x34, 0x35 };
      bool boolVal = true;
      string stringVal = "abcdefg";
      binWriter.Write(intNum);
      binWriter.Write(doubleNum);
      binWriter.Write(byteArray);
      binWriter.Write(boolVal);
      binWriter.Write(stringVal);
  }

int型、double型、byte配列、bool型、string型のデータを順に、ファイルに
出力しています。

作成されたバイナリファイルの内容をバイト列としてみると、以下のような内
容となります。

  7B 00 00 00 AC 1C 5A 64 3B DD 8E 40 31 32 33 34
  35 01 07 61 62 63 64 65 66 67

このデータを分解すると、以下のようになります。

int     4byte : 7B 00 00 00
double  8byte : AC 1C 5A 64 3B DD 8E 40
byte[]  5byte : 31 32 33 34 35
bool    1byte : 01
string  8byte : 07 61 62 63 64 65 66 67

この結果をみてわかるように、文字列データの先頭には、その長さを示すプレ
フィックスが付加されます。
文字列の長さにより、プレフィックスのサイズも変化します。


■──────────────────────────────────
■ コンストラクタ

BinaryWriterのコンストラクタは、

 BinaryWriter()

 BinaryWriter(Stream)

 BinaryWriter(Stream, Encoding)

の３つがありますが、ここでは、引数を一つ取るコンストラクタを利用してい
ます。
サンプルコードで利用したコンストラクタは、  文字列のエンコードとして  
UTF-8  を使用して、BinaryWriter クラスの新しいインスタンスを初期化しま
す。
File.Openで新たなStreamのインスタンスを生成し、BinaryWriterに渡します。
これで、"binary.dat"は、バイナリファイルとしてデータが書き込まれること
になります。


■──────────────────────────────────
■ Writerメソッド

Writeメソッドは、現在のストリームに引数で受け取った値を書き込みます。
Writeメソッドは多くのメソッドがオーバーロードされており、 C#のプリミテ
ィブな型すべてを受け取ることができます。

今回示したコードでは、 int, double bool, string, byte[] の５つです。

なお、配列で受け取れるのは、byte配列とchar配列のみになっています。
byte配列とchar配列は、

    public virtual void Write (
        byte[] buffer,
        int index,
        int count
    )

    public virtual void Write (
        char[] chars,
        int index,
        int count
    )

と、引数を３つ持つメソッドも用意されています。このメソッドを使うと、
配列の任意の位置から、任意の数だけファイルに出力することができます。

┌─┬─────────────────────────┬─┬─┬─┐
│☆│ C#プログラミングレッスン  (ぼぼ週刊）            │＿│□│×│
├─┴─────────────────────────┴─┴─┴─┤
│ Published by Gushwell.                                           │
│ Copyright (C) 2004-2006 Gushwell All rights reserved.            │
│ Microsoft MVP Visual Developer - Visual C#(Apr 2006 - Mar 2007)  │
│-------------------- Gushwell's Page ---------------------------- │
│ 窓際プログラマーの独り言  ：http://blog.livedoor.jp/gushwell/    │
│ 窓際プログラマーの読書三昧：http://gushwell.jugem.jp/            │
│ C#デザインパターン :                                             │
│  『増補改訂版Java言語で学ぶデザインパターン入門 / 結城 浩(著)』  │
│   のサンプルコードをC#に移植したものを掲載しています。           │
│   移植後のコードの公開は、結城氏の了解を得ています。             │
│   http://blog.livedoor.jp/gushwell/archives/50333227.html        │
>└─────────────────────────────────┘┏━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━┳━┳━┓
>┃☆┃ C#プログラミングレッスン                         ┃＿┃□┃×┃
>┣━┻━━━━━━━━━━━━━━━━━━━━━━━━━┻━┻━┻━┫
>┃BinaryReader                                                No.114┃
>┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
>
>■──────────────────────────────────
>■ BinaryReaderのサンプルコード
>
>もう一度、前回作成したコードを掲載します。
>
>using System.IO;
>...
>  using ( BinaryWriter binWriter = new BinaryWriter(
>                       File.Open("binary.dat", FileMode.Create)) ) {
>      int intNum = 123;
>      double doubleNum = 987.654;
>      byte[] byteArray = { 0x31, 0x32, 0x33, 0x34, 0x35 };
>      bool boolVal = true;
>      string stringVal = "abcdefg";
>      binWriter.Write(intNum);
>      binWriter.Write(doubleNum);
>      binWriter.Write(byteArray);
>      binWriter.Write(boolVal);
>      binWriter.Write(stringVal);
>  }
>
>このプログラムで作成されたバイナリファイルを読み込むコードは以下のよう
>になります。
>
>
>using System.IO;
>...
>  using ( BinaryReader binReader = new BinaryReader(
>　　　　　　　　　　　File.Open("binary.dat", FileMode.Open)) ) {
>      Console.WriteLine(binReader.ReadInt32());
>      Console.WriteLine(binReader.ReadDouble());
>      byte[] bs = binReader.ReadBytes(5);
>      Console.WriteLine(BitConverter.ToString(bs));
>    
>      Console.WriteLine(binReader.ReadBoolean());
>      Console.WriteLine(binReader.ReadString()); 
>  }
>
>結果は、
>
> 123
> 987.654
> 31-32-33-34-35
> True
> abcdefg
>
>です。
>byte 配列については、BitConverter クラスを使い、16 進の文字列で表示し
>て
>います。
>
>
>■──────────────────────────────────
>■コンストラクタ
>
>BinaryWriterのコンストラクタは、
>
>  BinaryReader (Stream) 
>
>  BinaryReader (Stream, Encoding) 
>
>の２つがありますが、ここでは、引数を一つ取るコンストラクタを利用してい
>ます。
>サンプルコードで利用したコンストラクタは、  文字列のエンコードとして  
>UTF-8  を使用して、BinaryWriter クラスの新しいインスタンスを初期化しま
>す。文字列が、Shift-JIS など他のエンコードが利用されている場合に、２つ
>めのコンストラクタを利用します。
>
>File.Openで新たなStreamのインスタンスを生成し、BinaryReaderに渡します。
>これで、"binary.dat"を、バイナリファイルとして扱うことが可能となります。
>
>
>■──────────────────────────────────
>■ Read系メソッド
>
>データを読み込むには、Readで始まるメソッドを利用します。
>今回は、ReadInt32, ReadDouble, ReadBytes, ReadBoolen, ReadString の５
>つ
>のメソッドを利用しています。
>
>また、
>public virtual int Read (
>byte[] buffer,
>int index,
>int count
>)
>
>というメソッドも用意されています。このメソッドを使うと、index をバイト
>配列内の開始点として、ストリームから count で指定したバイト数分のバイ
>ト
>を読み取り、結果を、buffer に格納します。
>なお、buffer には、データが格納されるのに、十分な領域が事前に割り当て
>ら
>れている必要があります。
>
>
>■──────────────────────────────────
>■ 注意点
>
>BinaryReader を利用するには、読み込むファイルのレイアウトを知っていな
>け
>ればなりません。どんなデータをどの順番で出力したのがを知っていないと、
>正しく読み込むことができません。
>
>今回示したコードも、int, double, byte[], bool, string の順番を間違える
>と正しく読むことができませんし、配列の場合は、その個数も知っている必要
>があります。
>
>そういった意味では、BinaryReader, BinaryWriter を使ったバイナリファイ
>ル
>の利用というのはかなり限定されたものになると思います。
>
>┌─┬─────────────────────────┬─┬─┬─┐
>│☆│ C#プログラミングレッスン  (ぼぼ週刊）            │＿│□│×│
>├─┴─────────────────────────┴─┴─┴─┤
>│ Published by Gushwell.                                           │
>│ Copyright (C) 2004-2006 Gushwell All rights reserved.            │
>│ Microsoft MVP Visual Developer - Visual C#(Apr 2006 - Mar 2007)  │
>│-------------------- Gushwell's Page ---------------------------- │
>│ 窓際プログラマーの独り言  ：http://blog.livedoor.jp/gushwell/    │
>│ 窓際プログラマーの読書三昧：http://gushwell.jugem.jp/            │
>│ C#デザインパターン :                                             │
>│  『増補改訂版Java言語で学ぶデザインパターン入門 / 結城 浩(著)』  │
>│   のサンプルコードをC#に移植したものを掲載しています。           │
>│   移植後のコードの公開は、結城氏の了解を得ています。             │
>│   http://blog.livedoor.jp/gushwell/archives/50333227.html        │
>└─────────────────────────────────┘
┏━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━┳━┳━┓
┃☆┃ C#プログラミングレッスン                         ┃＿┃□┃×┃
┣━┻━━━━━━━━━━━━━━━━━━━━━━━━━┻━┻━┻━┫
┃BinaryReader                                                No.114┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

■──────────────────────────────────
■ BinaryReaderのサンプルコード

もう一度、前回作成したコードを掲載します。

using System.IO;
...
  using ( BinaryWriter binWriter = new BinaryWriter(
                       File.Open("binary.dat", FileMode.Create)) ) {
      int intNum = 123;
      double doubleNum = 987.654;
      byte[] byteArray = { 0x31, 0x32, 0x33, 0x34, 0x35 };
      bool boolVal = true;
      string stringVal = "abcdefg";
      binWriter.Write(intNum);
      binWriter.Write(doubleNum);
      binWriter.Write(byteArray);
      binWriter.Write(boolVal);
      binWriter.Write(stringVal);
  }

このプログラムで作成されたバイナリファイルを読み込むコードは以下のよう
になります。


using System.IO;
...
  using ( BinaryReader binReader = new BinaryReader(
　　　　　　　　　　　File.Open("binary.dat", FileMode.Open)) ) {
      Console.WriteLine(binReader.ReadInt32());
      Console.WriteLine(binReader.ReadDouble());
      byte[] bs = binReader.ReadBytes(5);
      Console.WriteLine(BitConverter.ToString(bs));
    
      Console.WriteLine(binReader.ReadBoolean());
      Console.WriteLine(binReader.ReadString()); 
  }

結果は、

 123
 987.654
 31-32-33-34-35
 True
 abcdefg

です。
byte 配列については、BitConverter クラスを使い、16 進の文字列で表示して
います。


■──────────────────────────────────
■コンストラクタ

BinaryWriterのコンストラクタは、

  BinaryReader (Stream) 

  BinaryReader (Stream, Encoding) 

の２つがありますが、ここでは、引数を一つ取るコンストラクタを利用してい
ます。
サンプルコードで利用したコンストラクタは、  文字列のエンコードとして  
UTF-8  を使用して、BinaryWriter クラスの新しいインスタンスを初期化しま
す。文字列が、Shift-JIS など他のエンコードが利用されている場合に、２つ
めのコンストラクタを利用します。

File.Openで新たなStreamのインスタンスを生成し、BinaryReaderに渡します。
これで、"binary.dat"を、バイナリファイルとして扱うことが可能となります。


■──────────────────────────────────
■ Read系メソッド

データを読み込むには、Readで始まるメソッドを利用します。
今回は、ReadInt32, ReadDouble, ReadBytes, ReadBoolen, ReadString の５つ
のメソッドを利用しています。

また、
public virtual int Read (
byte[] buffer,
int index,
int count
)

というメソッドも用意されています。このメソッドを使うと、index をバイト
配列内の開始点として、ストリームから count で指定したバイト数分のバイト
を読み取り、結果を、buffer に格納します。
なお、buffer には、データが格納されるのに、十分な領域が事前に割り当てら
れている必要があります。


■──────────────────────────────────
■ 注意点

BinaryReader を利用するには、読み込むファイルのレイアウトを知っていなけ
ればなりません。どんなデータをどの順番で出力したのがを知っていないと、
正しく読み込むことができません。

今回示したコードも、int, double, byte[], bool, string の順番を間違える
と正しく読むことができませんし、配列の場合は、その個数も知っている必要
があります。

そういった意味では、BinaryReader, BinaryWriter を使ったバイナリファイル
の利用というのはかなり限定されたものになると思います。

┌─┬─────────────────────────┬─┬─┬─┐
│☆│ C#プログラミングレッスン  (ぼぼ週刊）            │＿│□│×│
├─┴─────────────────────────┴─┴─┴─┤
│ Published by Gushwell.                                           │
│ Copyright (C) 2004-2006 Gushwell All rights reserved.            │
│ Microsoft MVP Visual Developer - Visual C#(Apr 2006 - Mar 2007)  │
│-------------------- Gushwell's Page ---------------------------- │
│ 窓際プログラマーの独り言  ：http://blog.livedoor.jp/gushwell/    │
│ 窓際プログラマーの読書三昧：http://gushwell.jugem.jp/            │
│ C#デザインパターン :                                             │
│  『増補改訂版Java言語で学ぶデザインパターン入門 / 結城 浩(著)』  │
│   のサンプルコードをC#に移植したものを掲載しています。           │
│   移植後のコードの公開は、結城氏の了解を得ています。             │
│   http://blog.livedoor.jp/gushwell/archives/50333227.html        │
└─────────────────────────────────┘
