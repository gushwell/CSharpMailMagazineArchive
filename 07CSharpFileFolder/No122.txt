┏━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━┳━┳━┓
┃☆┃ C#プログラミングレッスン                         ┃＿┃□┃×┃
┣━┻━━━━━━━━━━━━━━━━━━━━━━━━━┻━┻━┻━┫
┃ XmlSerializer                                              No.122┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

■──────────────────────────────────
■ XmlSerializerとは

SOAPシリアル化と似たシリアル化で、XML シリアル化というものもあります。
SOAP シリアル化と大きな違いは、パブリックフィールド、パブリックプロパテ
ィだけが、シリアル化されるという点です。

ASP.NET を使用して作成された XML Web サービスは、XmlSerializer クラスを
使用しています。XML シリアル化で作成されたデータは、.NET のプラットフォー
ムに依存しないものとなりますので、他のプラットフォームとの（ネットワー
ク越しの）データ受け渡しに利用することができます。


■──────────────────────────────────
■ XMLシリアル化

XML シリアル化には、XmlSerializer クラスを使用します。

 public class MyObject {
     public int num = 0;
     public double real = 0;
     public String str = null;
     public DateTime dt;
     internal bool flag;
 }

というクラスがあったとします。このクラスのインスタンスをシリアル化する
コードを示します。

 MyObject obj = new MyObject();
 obj.num = 123;
 obj.real = 456.78;
 obj.str = "hoge hoge";

 XmlSerializer ser = new XmlSerializer(typeof(MyObject));
 TextWriter writer = new StreamWriter(@"xmlsample.xml");
 ser.Serialize(writer, obj);
 writer.Close();


結果は、以下の通りです。flag フィールドの内容が出力されていないことを確
認してください。

<?xml version="1.0" encoding="utf-8"?>
<MyObject xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <num>123</num>
  <real>456.78</real>
  <str>hoge hoge</str>
  <dt>2006-12-23T00:00:00</dt>
</MyObject>

※ 掲載の都合上、途中で改行しています。

■──────────────────────────────────
■ XML逆シリアル化

上記のコードで作成した XML ファイルを逆シリアル化し、MyObject のインス
タンスを得るコードを以下に示します。


 XmlSerializer ser = new XmlSerializer(typeof(MyObject));
 TextReader reader = new StreamReader(@"xmlsample.xml");
 MyObject obj = (MyObject)ser.Deserialize(reader);
 reader.Close();

 Console.WriteLine("num: {0}", obj.num);
 Console.WriteLine("real: {0}", obj.real);
 Console.WriteLine("str: {0}", obj.str);
 Console.WriteLine("dt: {0}", obj.dt);


┌─┬─────────────────────────┬─┬─┬─┐
│☆│ C#プログラミングレッスン  (ぼぼ週刊）            │＿│□│×│
├─┴─────────────────────────┴─┴─┴─┤
│ Published by Gushwell.                                           │
│ Copyright (C) 2004-2007 Gushwell All rights reserved.            │
│ Microsoft MVP Visual Developer - Visual C#(Apr 2006 - Mar 2007)  │
│-------------------- Gushwell's Page ---------------------------- │
│ 窓際プログラマーの独り言  ：http://blog.livedoor.jp/gushwell/    │
│ 窓際プログラマーの読書三昧：http://gushwell.jugem.jp/            │
│ C#デザインパターン :                                             │
│  『増補改訂版Java言語で学ぶデザインパターン入門 / 結城 浩(著)』  │
│   のサンプルコードをC#に移植したものを掲載しています。           │
│   移植後のコードの公開は、結城氏の了解を得ています。             │
│   http://blog.livedoor.jp/gushwell/archives/50333227.html        │
└─────────────────────────────────┘

