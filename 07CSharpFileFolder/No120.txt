┏━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━┳━┳━┓
┃☆┃ C#プログラミングレッスン                         ┃＿┃□┃×┃
┣━┻━━━━━━━━━━━━━━━━━━━━━━━━━┻━┻━┻━┫
┃シリアル化　　　　　　　　　                                No.120┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

■──────────────────────────────────
■ シリアル化とは

シリアル化とは、オブジェクトの状態を永続化または転送できる形式に変換す
ることです。シリアル化されたデータを元に戻すことを逆シリアル化と言いま
す。
このシリアル化の機能を使うと、オブジェクトの状態をファイルに保存し、次
回のプログラム起動時に復元したり、他のアプリケーションに渡したり、ネッ
トワーク経由で、データを送ることが可能になります。

今回から数回にわたり、このシリアル化の説明をします。

まずは、BinaryFormatter をつかった、シリアル化について説明します。

■──────────────────────────────────
■ BinaryFormatterによるシリアル化

オブジェクトをシリアル化可能にするためには、シリアル化したいクラスを 
Serializable 属性でマークすることが必要です。

[Serializable]
public class MyClass {
　 public int num = 0;
   public double real = 0;
   public String str = null;
}

次に、シリアル化するコードを示します。


 using System.Runtime.Serialization;
 using System.Runtime.Serialization.Formatters.Binary;
 ...

 MyClass obj = new MyClass();
 obj.num = 123;
 obj.real = 456.78;
 obj.str = "foge foge";
 IFormatter formatter = new BinaryFormatter();
 Stream stream = new FileStream("MyObject.bin", 
　　　　　　　　　　FileMode.Create, FileAccess.Write, FileShare.None);
 formatter.Serialize(stream, obj);
 stream.Close();


BinaryFormatter のインスタンスを生成し、Serialize メソッドでシリアル化
します。ここでは、FileStream のインスタンを指定していますので、ファイル
にシリアル化した結果が出力されます。

クラスのメンバ変数は、private としてマークされている場合でもシリアル化
対象となります。

■──────────────────────────────────
■ BinaryFormatterによる逆シリアル化

逆シリアル化するコードを示します。


 IFormatter formatter = new BinaryFormatter();
 Stream stream = new FileStream("MyObject.bin", FileMode.Open, 
　　　　　　　　　　　　　　　　FileAccess.Read, FileShare.Read);
 MyClass obj = (MyClass)formatter.Deserialize(stream);
 stream.Close();

 Console.WriteLine("num: {0}", obj.num);
 Console.WriteLine("real: {0}", obj.real);
 Console.WriteLine("str: {0}", obj.str);


Deserializeメソッドでは、シリアル化されたストリームを指定します。
Deserialize() の戻り値は、object 型ですので、それを本来の型にキャストし
ます。

なお、Deserialize でオブジェクトが生成される際は、そのクラスのコンスト
ラクタは呼び出されません。
そのため、シリアル化するクラスでは、コンストラクタを呼び出さないと、そ
の後の処理がうまく動かないような設計は避けてください。


┌─┬─────────────────────────┬─┬─┬─┐
│☆│ C#プログラミングレッスン  (ぼぼ週刊）            │＿│□│×│
├─┴─────────────────────────┴─┴─┴─┤
│ Published by Gushwell.                                           │
│ Copyright (C) 2004-2007 Gushwell All rights reserved.            │
│ Microsoft MVP Visual Developer - Visual C#(Apr 2006 - Mar 2007)  │
│-------------------- Gushwell's Page ---------------------------- │
│ 窓際プログラマーの独り言  ：http://blog.livedoor.jp/gushwell/    │
│ 窓際プログラマーの読書三昧：http://gushwell.jugem.jp/            │
│ C#デザインパターン :                                             │
│  『増補改訂版Java言語で学ぶデザインパターン入門 / 結城 浩(著)』  │
│   のサンプルコードをC#に移植したものを掲載しています。           │
│   移植後のコードの公開は、結城氏の了解を得ています。             │
│   http://blog.livedoor.jp/gushwell/archives/50333227.html        │
└─────────────────────────────────┘
