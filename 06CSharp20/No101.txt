┏━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━┳━┳━┓
┃☆┃ C#プログラミングレッスン                         ┃＿┃□┃×┃
┣━┻━━━━━━━━━━━━━━━━━━━━━━━━━┻━┻━┻━┫
┃静的クラス                                                  No.101┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

■──────────────────────────────────
■ 静的クラスの宣言

クラスによっては、そのメンバーがすべて static である場合があります。
そんな時、

 static class MyClass {
     static string text = "";
     static string Text {
         get { return text; }
         set { text = value; }
     }
     static int GetNumber() {
         return int.Parse(Text);
     }
 }

と、class に対して、static を指定することができます。
staticが付いたクラスは、インスタンス化することができないクラスであると
いう意味です、このため、

・静的メンバーのみ持つことができる。
・protected, protected internal のメンバーを持つことが出来ない。
・スーパークラスの指定ができない。（暗黙的にobjectから派生する）
・interface を実装することができない。
・sealed , abstract 修飾子は指定できない。
・インスタンスコンストラクタ、デストラクタを含めることができない。

といった制約があります。
これらは、インスタンス化できない static クラスの性質から、自然と導かれ
るものです。


■──────────────────────────────────
■ 静的クラスの参照

静的クラスを参照するのは、staticメンバーの参照となりますから、

  string s = MyClass.Text;

  int n = MyClass.GetNumber();

のように、クラス名でメンバーを呼び出します。この部分は、以前となんら変
わるところはありません。

なお、静的クラスを参照する際にも、いくつかの制限が存在します。
例えば、

・ジェネリック型引数に指定できない。
・配列にすることができない。
・キャストできない
・is、as 演算子が使えない
・sizeof 式が使えない。
などなど。

これらも、静的クラスが、インスタンス化できないことを考えれば、自然と導
かれるものです。
ただ、これらの制限は覚える必要は全くありません。普通にプログラミングし
ていれば、このようなこと(例えばキャストしたい）をやりたいという場面に
は遭遇しないはずですから。


┌─┬─────────────────────────┬─┬─┬─┐
│☆│ C#プログラミングレッスン  (ぼぼ週刊）            │＿│□│×│
├─┴─────────────────────────┴─┴─┴─┤
│ Published by Gushwell.                                           │
│ Copyright (C) 2004-2006 Gushwell All rights reserved.            │
│ Microsoft MVP Visual Developer - Visual C#(Apr 2006 - Mar 2007)  │
│-------------------- Gushwell's Page ---------------------------- │
│ 窓際プログラマーの独り言  ：http://blog.livedoor.jp/gushwell/    │
│ 窓際プログラマーの読書三昧：http://gushwell.jugem.jp/            │
│ C#デザインパターン :                                             │
│  『増補改訂版Java言語で学ぶデザインパターン入門 / 結城 浩(著)』  │
│   のサンプルコードをC#に移植したものを掲載しています。           │
│   移植後のコードの公開は、結城氏の了解を得ています。             │
│   http://blog.livedoor.jp/gushwell/archives/50333227.html        │
└─────────────────────────────────┘

