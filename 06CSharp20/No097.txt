┏━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━┳━┳━┓
┃☆┃ C#プログラミングレッスン                         ┃＿┃□┃×┃
┣━┻━━━━━━━━━━━━━━━━━━━━━━━━━┻━┻━┻━┫
┃パーシャルクラス                                            No.097┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

■──────────────────────────────────
■  パーシャルクラス

今までは、一つのクラスに関連するコードは、１つのソースコードに記述する
ことしかできませんでした。
パーシャルクラスを使うと、一つのクラスを複数のソースファイルに分割する
ことができます。

この説明を始めて聞いたときは、なんでそんなことが必要なのか理解できませ
んでした。そもそも、一つのクラスを複数のファイルに分割するというのは、
どう考えても適切な方法とは思えません。
そもそも、そんな大きなクラスは作るほうがおかしいのであって、クラスを分
割することを考えたほうが良いはずです。
しかし、C#2.0では、それが可能になっています。

それは、VisualStudioのコードジェネレータが作成するコードと、プログラマ
が作成するコードを分離するのが、その目的だと知って納得することが出来ま
した。

例えば、WindowsFormsの場合、コードジェネレータが作成したクラスにメソッ
ド等を追加することで、機能を拡張するわけですが、何らかの理由で、フォー
ムを再作成してしまうと、せっかく追加したコードも無くなってしまいます。
また、コードジェネレータが作成したコードを間違って変更してしまう危険も
あります。

もし、コードジェネレータで作成したコードを分離できれば、開発と保守が容
易になります。そのための機能がパーシャルクラスなわけです。

なお、Visual Studio 2005 のコードジェネレータの作成するクラスは、私の
確認した限りでは、すべて partial クラスになっているようです。

クラスを複数のソースファイルに分割するには、partial キーワードを使いま
す。

 public partial class Person {
     private int id;
     private string name;
     private string address;
     private DateTime birthday;
     ...
 }

 public partial class Person {
     public string Name {
         get { return name; }
     }
     public int GetAge() {
         ...
     }
     ...
 }

この２つの部分をコンパイルすることで、一つのクラスとして合体させること
ができます。


■──────────────────────────────────
■  属性

コードジェネレータで作成されたクラスに新たな属性を追加したくなった場合
も、パーシャルクラスの出番です。

 [MyAttribute01]
 public partial class Person {
     ...
 }

 [MyAttribute02]
 public partial class Person {
     public string Name {
         get { return name; }
     }
     public int GetAge() {
         ...
     }
     ...
 }
  
の場合、属性が結合され、Personクラスには、MyAttribute01 と 
MyAttribute02 の２つの属性が付加されることになります。


■──────────────────────────────────
■  基本クラス

パーシャルクラスで基本クラス（スーパークラス）を指定する場合は、すべて
のパーシャルクラスで、基本クラスが一致している必要があります。

ただし、以下のように記述することも可能です。

 public partial class MyClass {
 
 }

 public partial class MyClass : BaseClass {
 
 }

この場合は、基本クラスが、BaseClass となります。

■──────────────────────────────────
■  基本インターフェース

基本クラスとは異なり、インターフェースの場合は、各クラスで指定されたイ
ンターフェースの和集合となります。

 public partial class MyClass : IFoo{
 
 }

 public partial class MyClass : IBar, IBaz {
 
 }

の場合は、

 public partial class MyClass : IFoo, IBar, IBaz {
 
 }

となります。

┌─┬─────────────────────────┬─┬─┬─┐
│☆│ C#プログラミングレッスン  (ぼぼ週刊）            │＿│□│×│
├─┴─────────────────────────┴─┴─┴─┤
│ Published by Gushwell.                                           │
│ Copyright (C) 2004-2006 Gushwell All rights reserved.            │
│ Microsoft MVP Visual Developer - Visual C#(Apr 2006 - Mar 2006)  │
│-------------------- Gushwell's Page ---------------------------- │
│ 窓際プログラマーの独り言  ：http://blog.livedoor.jp/gushwell/    │
│ 窓際プログラマーの読書三昧：http://gushwell.jugem.jp/            │
│ C#デザインパターン :                                             │
│  『増補改訂版Java言語で学ぶデザインパターン入門 / 結城 浩(著)』  │
│   のサンプルコードをC#に移植したものを掲載しています。           │
│   移植後のコードの公開は、結城氏の了解を得ています。             │
│   http://blog.livedoor.jp/gushwell/archives/50333227.html        │
└─────────────────────────────────┘