┏━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━┳━┳━┓
┃☆┃ C#プログラミングレッスン                         ┃＿┃□┃×┃
┣━┻━━━━━━━━━━━━━━━━━━━━━━━━━┻━┻━┻━┫
┃Nullable Type (1)                                           No.098┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

Nullable Type

■──────────────────────────────────
■  Nullable Typeとは

データベースでは、項目に、null値を許容することができましたが、C#のよう
な汎用言語では、値型に null 値を与えることができませんでした。

例えば、データがまだ入力されていないことを示すのに、

  int n = null;

のような記述はできません。このため、-1 や int.MinValue などをnullの代
わりに使ったり、null値を示す別の変数を用意したり、あるいは、独自のnull
を許容する integer 型 クラスを作成するなどの工夫をする必要がありました。

しかし、こういったやり方を一貫させるのは、なかなか大変です。
C#2.0で追加された null許容型(Nullable Type)は、このような問題を解決し、
統一的な方法で、null値を扱うことが出来ます。

Nullable Typeの変数を宣言するのは、とても簡単です。

 int? x = 123;
 double? d = 987.65;

のように、? を値型の後ろにつけるだけです。

これで、

  x = null;

のような代入が可能になります。


■──────────────────────────────────
■  ２つのプロパティ

Nullable Typeには、パブリックな読み取り可能プロパティがあります。
１つは、bool型 のHasValue プロパティ。もう1つは、Valueプロパティです。
Valueプロパティは、その元となる値型です。

HasValue プロパティ
  true : オブジェクトに値がある （null以外の値が入っている）
  false: オブジェクトに値が無い （nullが代入されている）

Value
  Nullable オブジェクトの値。
  HasValue プロパティが false の場合は、InvalidOperationException
  例外がスローされます。 

この２つを使った簡単なコードを示します。

    int? n = 10;
    if ( n.HasValue )
        Console.WriteLine(n.Value);
    else
        Console.WriteLine("値はありません");


■──────────────────────────────────
■ 暗黙の型変換

さて、さきほどの

 int? n = 10;

というコードは、内部で暗黙の型変換が行われています。右辺の 10 は、int 
型であり、int? 型ではありません（int と int? は別の型です）。

つまり、int 型から、int? 型へ型変換が行われています。
同様に

 int? x = null;

も、null から、int? に型変換されています。
Nullable Type の型変換の例をいくつか示します。

  int i = 123;          
  int? n = i;          // int --> int?
  double? d = n;       // int? --> double?
  int j = (int)n;      // int? --> int

int? を int にするには、キャストが必要となりますので、注意してください。

-------------------
次回も引き続き、Nullable Typeの説明です。

┌─┬─────────────────────────┬─┬─┬─┐
│☆│ C#プログラミングレッスン  (ぼぼ週刊）            │＿│□│×│
├─┴─────────────────────────┴─┴─┴─┤
│ Published by Gushwell.                                           │
│ Copyright (C) 2004-2006 Gushwell All rights reserved.            │
│ Microsoft MVP Visual Developer - Visual C#(Apr 2006 - Mar 2006)  │
│-------------------- Gushwell's Page ---------------------------- │
│ 窓際プログラマーの独り言  ：http://blog.livedoor.jp/gushwell/    │
│ 窓際プログラマーの読書三昧：http://gushwell.jugem.jp/            │
│ C#デザインパターン :                                             │
│  『増補改訂版Java言語で学ぶデザインパターン入門 / 結城 浩(著)』  │
│   のサンプルコードをC#に移植したものを掲載しています。           │
│   移植後のコードの公開は、結城氏の了解を得ています。             │
│   http://blog.livedoor.jp/gushwell/archives/50333227.html        │
└─────────────────────────────────┘
