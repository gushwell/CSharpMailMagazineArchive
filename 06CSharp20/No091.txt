┏━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━┳━┳━┓
┃☆┃ C#プログラミングレッスン                         ┃＿┃□┃×┃
┣━┻━━━━━━━━━━━━━━━━━━━━━━━━━┻━┻━┻━┫
┃Generics(6) List<T> の利用                                  No.091┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

今回は、genericsの説明の最後として、List<T>クラスについてもう少し詳し
く見ていくこととします。
ただ、内容は、genericsの説明ではないのですが...

■──────────────────────────────────
■ ForEachメソッド

例えば、コレクションに格納されたすべてのオブジェクトに対して処理をした
い場合には、foreachを使うのが一般的でしたよね。こんな感じになります。

static void Main(string[] args) {
    List<int> list = new List<int>();
    list.Add(10);
    list.Add(20);
    list.Add(30);
    list.Add(-40);
    foreach( int n in list ) {
        Print(n);
    }
}

// たった１行のメソッドですが、ここで多くの処理をやると思ってください
static void Print(int n) {
    Console.WriteLine(n);
}

C#2.0では、このコードをもっと簡単に書くことができます。それが、ForEach
メソッドです。foreach 文は、以下の1行に置き換えることができます。

    list.ForEach(Print);

ForEachメソッドの引数に、メソッド名を記述すれば、すべてのオブジェクト
に対し、Pritntメソッドが呼び出されます。

なお、ForEachの引数は、Action型(delegate)であり、正確には、

    Action<int> print = new Action<int>(Print);
    list.ForEach(print);

のように書くのですが、C#2.0からは、いちいち、delegetを newするコードを
記述する必要がなくなりました。コンパイラが勝手に、delegateのインスタン
スを new するコードを内部で生成してくれます。


■──────────────────────────────────
■ TrueForAllメソッド

TrueForAllメソッドは、List 内のすべての要素が、指定された条件と一致す
るかどうかを調べます。 
条件は、メソッドとして定義します。
使い方は、ForEachメソッドと同様です。

    static bool IsPositive(int num) {
        return num > 0;
    }

    …
        bool b = list.TrueForAll(IsPositive);
        Console.WriteLine(b);

このコードは、すべての要素が、正数かどうかを判断しています。


■──────────────────────────────────
■ FindAllメソッド

FindAllメソッドは、指定された条件と一致するすべての要素を取得します。 
条件は、メソッドとして定義します。

    static bool IsPositive(int num) {
        return num > 0;
    }

    …
       List<int> list2 = list.FindAll(IsPositive);

このコードは、正数だけを取り出し、新たな List クラスのインスタンスに
格納する例です。


その他、Find, RemoveAll, Exists など、これまで見てきたメソッドと、同様
の使い方ができるメソッドが用意されています。これらのメソッドを上手く使
えば、今までよりも簡潔なコードが書けると思います。
是非、.NET Framework2.0 のドキュメントの 「List(of T)クラス」の説明を
読んで見てください。

┌─┬─────────────────────────┬─┬─┬─┐
│☆│ C#プログラミングレッスン  (ぼぼ週刊）            │＿│□│×│
├─┴─────────────────────────┴─┴─┴─┤
│ Published by Gushwell.                                           │
│ Copyright (C) 2004-2006 Gushwell All rights reserved.            │
│ Microsoft MVP Visual Developer - Visual C#(Apr 2006 - Mar 2006)  │
│-------------------- Gushwell's Page ---------------------------- │
│ 窓際プログラマーの独り言  ：http://blog.livedoor.jp/gushwell/    │
│ 窓際プログラマーの読書三昧：http://gushwell.jugem.jp/            │
│             よろしかったらアクセスしてみてください！             │
└─────────────────────────────────┘
