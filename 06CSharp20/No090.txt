┏━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━┳━┳━┓
┃☆┃ C#プログラミングレッスン                         ┃＿┃□┃×┃
┣━┻━━━━━━━━━━━━━━━━━━━━━━━━━┻━┻━┻━┫
┃Generics(5) ジェネリック その他の話題                       No.090┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

■──────────────────────────────────
■ default(T)

ジェネリッククラスとジェネリックメソッド内で、利用するパラメータ化され
た型 T に既定値を割り当てる場合に、default(T) を使います。
T が参照型か値型かによって、default(T)の値が変わります。

値型の場合は、ゼロを、参照型の場合は、null となります。

   public T DoSomething<T>(List<T> list) {
       for ( int i = 0; i < list.Count - 1 ; i++ )
           if ( list[i].Equals(list[i+1]) ) {
               return list[i];
           }
       return default(T);
   }

もちろん、where T : class として、制約を付加すれば、default(T) の箇所
は、null をそのまま記述しても問題ありません。


■──────────────────────────────────
■ キャスト

ジェネリックの中でキャストをすることは、あまり無いとは思うのですが、

   public T DoSomething<T>(List<T> list) {
       int i = (int)list[0];
       ...
  }

のように、特定の型にキャストしようとすると、エラーになります。
エラーを出さないためには、いったん object 型にキャストしなければいけま
せん。

   public T DoSomething<T>(List<T> list) {
       int i = (int)(object)list[0];
       ...
  }


■──────────────────────────────────
■ nullチェック

null かどうかの判断も可能です。

   public T DoSomething<T>(List<T> list) {
       if ( list[0] == null ) {
           ....
       }
       ...
  }

もちろん、T が値型の場合には、常に、false となります。まあ、このコード
もキャストと同様、危ういコードには違いないですが、文法上はこれを許して
います。


■──────────────────────────────────
■ .NET FrameworkのGenerics

..NETFramework には、System.Collections.Generic 名前空間に、沢山の
generics が定義されています。すべてを解説するわけにはいかないので、こ
こでは、主要な一覧を掲載するにとどめます。

 Comparer          IComparer ジェネリック インターフェイスの実装のため
                   の基本クラス。 
 Dictionary        キーと値のコレクション。 
 LinkedList        二重にリンクされたリスト。 
 List              インデックスを使用してアクセスできる、厳密に型指定
                   されたオブジェクトのリスト。
 Queue             オブジェクトの先入れ先出しコレクション。 
 SortedDictionary  キーで並べ替えられた、キー/値ペアのコレクション。 
 SortedList        関連付けられた IComparer 実装に基づいてキーで並べ替
                   えられたキー/値ペアのコレクション。 
 Stack             可変サイズの後入れ先出し (LIFO) コレクション。
 ICollection       ジェネリック コレクションを操作するインターフェー
                   ス 
 IComparer         2 つのオブジェクトを比較するために型が実装するイン
                   ターフェース。 
 IDictionary       キーと値のペアのジェネリックインターフェース。 
 IEnumerable       指定した型のコレクションに対する列挙子インターフェ
                   ース。 
 IEnumerator       ジェネリック コレクションに対する反復処理をサポート
                   するインターフェース。 
 IList             インデックスによって個別にアクセスできるコレクショ
                   ンインターフェース。 

なお、独自のジェネリッククラスを定義する際に、IList, ICollection とい
ったインターフェースを実装する場合には、以下のように、できる限りジェ
ネリック対応のインターフェースを使うことをお奨めします。

 public class MyList<T> : IList<T>, ICollection<T> {
     ...
 }


┌─┬─────────────────────────┬─┬─┬─┐
│☆│ C#プログラミングレッスン  (ぼぼ週刊）            │＿│□│×│
├─┴─────────────────────────┴─┴─┴─┤
│ Published by Gushwell.                                           │
│ Copyright (C) 2004-2006 Gushwell All rights reserved.            │
│ Microsoft MVP Visual Developer - Visual C#(Apr 2006 - Mar 2006)  │
│-------------------- Gushwell's Page ---------------------------- │
│ 窓際プログラマーの独り言  ：http://blog.livedoor.jp/gushwell/    │
│ 窓際プログラマーの読書三昧：http://gushwell.jugem.jp/            │
│             よろしかったらアクセスしてみてください！             │
└─────────────────────────────────┘
