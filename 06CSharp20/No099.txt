┏━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━┳━┳━┓
┃☆┃ C#プログラミングレッスン                         ┃＿┃□┃×┃
┣━┻━━━━━━━━━━━━━━━━━━━━━━━━━┻━┻━┻━┫
┃Nullable Type (2)                                           No.099┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

■──────────────────────────────────
■ Nullable Type の演算

Nullable Typeは、その元となる型と同じ演算が可能です。

  int? a = 10;
  int? b = 20;
  int? c = a + b;    // + 演算子が使える
  if ( c.HasValue ) Console.WriteLine(c.Value);

結果は、30  と表示されます。
次はどうでしょうか。

  int? a = 10;
  int? b = null;
  int? c = a + b;    // null を加える？
  if ( c.HasValue ) Console.WriteLine(c.Value);

この場合、a + b の結果は、null となり、何も表示されません。

では、次のコードはどうでしょうか？

  int? a = 10;
  int b = 20;
  int c = a + b;   // コンパイルエラー
  Console.WriteLine(c);

この場合は、コンパイルエラーとなります。演算の中に、Nullable Typeが
ある場合、結果の型も Nullable Type となりますので、

 int c = (int)(a + b);

とキャストする必要があります。
しかし、もし、a が値を持っていなかったら(nullだったら）どうでしょうか。
この場合、null を int に変換することができませんので、実行時に
InvalidOperationException例外が発生します。


■──────────────────────────────────
■ Nullable Type の比較

比較演算子(==, !=, <, >, <=, >=)も利用可能です。
<, >, <=, >= の場合は、１つまたは両方のオペランドがnullの場合には、
falseが返ります。

  int? a = null;
  int? b = 20;
  Console.WriteLine(a == null);
  Console.WriteLine(a != b);
  Console.WriteLine(a <= b);
  Console.WriteLine(a > b);

この結果は、

  True
  True
  False
  False

です。


■──────────────────────────────────
■ ??演算子

C#2.0では、?? 演算子（null合体演算子）という新たな演算子が追加されてい
ます。
例えば、

 int? a = 10;
 int? b = -1;
 int  c = a ?? 0;    // 0 は int型

の場合、c の値は 10 となります。
a が nullでなければ、a の値そのものが、a が null だった場合は、?? の次
に書いてある値(この例では 0）が、c に代入されます。
Nullable Typeの数値演算をする場合、この ?? 演算子をうまく利用すると良
いでしょう。
a ?? 0 の結果の型は int 型です。

ちなみに、a, b 共に int? 型の場合は、
  a ?? b
の結果は、int? 型となります。


○おまけ
実は、この ?? 演算子は、通常の参照型にも利用できます。

  string s = null;
  Console.WriteLine( s ?? "<Empty String>");

この例では、"<Empty String>" が出力されます。


┌─┬─────────────────────────┬─┬─┬─┐
│☆│ C#プログラミングレッスン  (ぼぼ週刊）            │＿│□│×│
├─┴─────────────────────────┴─┴─┴─┤
│ Published by Gushwell.                                           │
│ Copyright (C) 2004-2006 Gushwell All rights reserved.            │
│ Microsoft MVP Visual Developer - Visual C#(Apr 2006 - Mar 2006)  │
│-------------------- Gushwell's Page ---------------------------- │
│ 窓際プログラマーの独り言  ：http://blog.livedoor.jp/gushwell/    │
│ 窓際プログラマーの読書三昧：http://gushwell.jugem.jp/            │
│ C#デザインパターン :                                             │
│  『増補改訂版Java言語で学ぶデザインパターン入門 / 結城 浩(著)』  │
│   のサンプルコードをC#に移植したものを掲載しています。           │
│   移植後のコードの公開は、結城氏の了解を得ています。             │
│   http://blog.livedoor.jp/gushwell/archives/50333227.html        │
└─────────────────────────────────┘