┏━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━┳━┳━┓
┃☆┃ C#プログラミングレッスン                         ┃＿┃□┃×┃
┣━┻━━━━━━━━━━━━━━━━━━━━━━━━━┻━┻━┻━┫
┃匿名メソッド(4) 外部変数の落とし穴                          No.095┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

今回は、匿名メソッドの最後の説明として、匿名メソッドとローカル変数の
不思議な関係について見ていきます。

■──────────────────────────────────
■ ローカル変数のインスタンス化

まずは、匿名メソッドの説明の前に、ローカル変数のインスタンス化について、
考えて見ます。

 private void Foo() {
     for ( int i = 0; i < 3; i++ ) {
         int x = i * 2 + 1;
         Console.WriteLine(x);
     }
 }

このコードでは、x は、ループが繰り返される度に（つまり３回）インスタン
ス化されます。
しかし、次のコードでは、x は、一度だけインスタンス化されることになりま
す。

 private void Foo() {
     int x = 0;
     for ( int i = 0; i < 3; i++ ) {
         x = i * 2 + 1;
         Console.WriteLine(x);
     }
 }

この２つのメソッドは、出力される結果はまったく同じですので、インスタン
ス化される回数に注意を払うことは、あまりありません。


■──────────────────────────────────
■ ローカル変数のインスタンス化と匿名メソッド

しかし、これが匿名メソッドと外部変数と関係してくると、インスタンス化に
ついて正しい理解が必要になってきます。

コード例を示します。

  private delegate int D();

  private void Foo() {
      D[] ds = new D[3];
      for ( int i = 0; i < 3; i++ ) {
          int x = i * 2 + 1;
          ds[i] = delegate() {
              return x;
          };
      }
      foreach ( D d in ds ) {
          Console.WriteLine(d());
      }
  }

結果は、

 1
 3
 5

です。
匿名メソッドのインスタンスが配列 ds に格納され、foreach でその匿名メソ
ッド

  { return x; }

が3回呼び出されています。このときの xは、外部変数ですが、３つの匿名メ
ソッドで参照する x は、それぞれ別のインスタンスです。
xは３回インスタンス化され、それぞれが、３つの匿名メソッドと対応してい
るわけですね。

xは、匿名メソッドと関連付けられる（これをキャプチャされると言います）
ことで、有効期限が延長されます。foreach で呼び出される時点では、それぞ
れのxは、1, 3, 5 の値を保持していますので、その値が返り、コンソールに
出力されるわけです。

では、次のコードはどうでしょうか。


  private delegate int D();

  private void Foo() {
     D[]  ds = new D[3];
     int x;
     for ( int i = 0; i < 3; i++ ) {
         x = i * 2 + 1;
         ds[i] = delegate() {
             return x;
         };
     }

     foreach ( D d in ds ) {
         Console.WriteLine(d());
     }
 }


先ほどのコードとの違いは、x が、for 文の外で定義されているという部分だ
けです。
この場合、x は1回だけインスタンス化されるわけですから、３つの匿名メソ
ッドは、同じ x を参照することになります。つまり、foreach の中で、匿名
メソッドが呼び出される時点では、x の値は 5 ですので、結果は、

 5
 5
 5

となります。

このように配列などに匿名メソッドのインスタンスを保持するようなテクニッ
クを実際の開発の現場でどれくらい使われるのか、ちょっと疑問ですが、この
動きを知っていると、友達に一目置かれること間違いありません。

┌─┬─────────────────────────┬─┬─┬─┐
│☆│ C#プログラミングレッスン  (ぼぼ週刊）            │＿│□│×│
├─┴─────────────────────────┴─┴─┴─┤
│ Published by Gushwell.                                           │
│ Copyright (C) 2004-2006 Gushwell All rights reserved.            │
│ Microsoft MVP Visual Developer - Visual C#(Apr 2006 - Mar 2006)  │
│-------------------- Gushwell's Page ---------------------------- │
│ 窓際プログラマーの独り言  ：http://blog.livedoor.jp/gushwell/    │
│ 窓際プログラマーの読書三昧：http://gushwell.jugem.jp/            │
│ C#デザインパターン :                                             │
│  『増補改訂版Java言語で学ぶデザインパターン入門 / 結城 浩(著)』  │
│   のサンプルコードをC#に移植したものを掲載しています。           │
│   移植後のコードの公開は、結城氏の了解を得ています。             │
│   http://blog.livedoor.jp/gushwell/archives/50333227.html        │
└─────────────────────────────────┘