┏━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━┳━┳━┓
┃☆┃ C#プログラミングレッスン                         ┃＿┃□┃×┃
┣━┻━━━━━━━━━━━━━━━━━━━━━━━━━┻━┻━┻━┫
┃匿名メソッド(3)                                             No.094┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

■──────────────────────────────────
■ 匿名メソッドを使わない例

List<T>クラスには、デリゲートを引数に受け取るメソッドがいくつか用意さ
れています。Exists()メソッドを例に説明します。

 void button1_Click(object sender, EventArgs e) {
     List<int> list = new List<int>( 
         new int[] { 1,2,3,5,-8,13,21 }
     );
     if ( list.Exists(Match) ) {
         MessageBox.Show("見つかった");
     }

 }
 private bool Match(int value) {
     return ( value < 0 );
 }

この例は、Match()メソッドが trueを返した場合（つまり、負の数が リスト
に含まれている場合）に、メッセージを表示するプログラムです。

Existsメソッドの引数は、検索する要素の条件を定義する Predicate デリゲ
ートです。

旧来の書き方だと、

  if ( list.Exists(new Predicate<int>(Match)) ) {

ですね。
でも、こんな面倒な記述はC#2.0では不要になりました。


■──────────────────────────────────
■ 匿名メソッドを使えば

では、匿名メソッドを使うとどうなるでしょうか。以下のその例を示します。

 bool exist = list.Exists( delegate(int value) { 
                  return value < 0;
              } );
 if ( exist ) {
     MessageBox.Show("見つかった");
 }

 ※ if 文の中にすべて記述することもできますが、わかりにくくなるので、
    ２つの文に分けました。

Exists()メソッドの引数の中に、直接、判断のロジックを書くことができます。
匿名メソッドを使わないと、Match()メソッドが、コード上、Existsと離れた
場所にあるため、具体的にどんな条件なのかがすぐにはわかりませんでしたが、
匿名メソッドを使うことで、この問題（というほど大げさなものではないです
が）を解消することができます。


■──────────────────────────────────
■ もう一つの例

List<T>.Sort() と List<T>.ForEach() を使った例を示します。

 List<int> list = new List<int>( 
     new int[] { 1,2,3,-5,8,-13,21 }
 );

 list.Sort(delegate(int x, int y) { 
     return y - x;
 });

 list.ForEach(delegate(int x) {
     MessageBox.Show(x.ToString());
 });

まずは、Sort()メソッドです。
Sort()メソッドは、要素を比較する場合に使用する Comparison デリゲートを
引数に取ります。Comparison デリゲートは以下のように宣言されています。

 public delegate int Comparison<T> (T x, T y);

２つの引数をとり、その２つの大小を比較し、結果を 正、ゼロ、負で返しま
す。この例では、逆順にソートするために、y から x を引いています。
Sort と 比較メソッドが、近くにあるので、どんな順序で比較しているのかが、
すぐに分かります。

ForEach()メソッドは、foreach 文とほぼ同じことをるすメソッドです。
匿名メソッドの例としてここでは、ForEach()メソッドを使いましたが、この
ような例では、foreach 文を使ったほうが良いと思います。

  foreach ( int x in list ) {
     MessageBox.Show(x.ToString());
  }    

このほうが、すっきりしていますよね。

では、ForEach()メソッドは、どういう場面で利用するのかといえば、どちら
かというと、匿名メソッドではない、通常のデリゲートを使ったコードが推奨
されるような気がします。

こんな感じですね。

  list.ForEach(Show);

  ...

  private void Show<T>(T value) {
      MessageBox.Show(value.ToString());
  }

list 内のすべての要素に対して、Showメソッドを呼び出すコードです。
MessageBox.Show() を呼び出すだけのコードなので、あまり良い例ではありま
せんが、複数の行からなるメソッドの場合は、foreach文を使ったコードより
も、ForEach()メソッドのほうが簡潔に記述することができると思います。

┌─┬─────────────────────────┬─┬─┬─┐
│☆│ C#プログラミングレッスン  (ぼぼ週刊）            │＿│□│×│
├─┴─────────────────────────┴─┴─┴─┤
│ Published by Gushwell.                                           │
│ Copyright (C) 2004-2006 Gushwell All rights reserved.            │
│ Microsoft MVP Visual Developer - Visual C#(Apr 2006 - Mar 2006)  │
│-------------------- Gushwell's Page ---------------------------- │
│ 窓際プログラマーの独り言  ：http://blog.livedoor.jp/gushwell/    │
│ 窓際プログラマーの読書三昧：http://gushwell.jugem.jp/            │
│ C#デザインパターン :                                             │
│  『増補改訂版Java言語で学ぶデザインパターン入門 / 結城 浩(著)』  │
│   のサンプルコードをC#に移植したものを掲載しています。           │
│   移植後のコードの公開は、結城氏の了解を得ています。             │
│   http://blog.livedoor.jp/gushwell/archives/50333227.html        │
└─────────────────────────────────┘