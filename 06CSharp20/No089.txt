┏━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━┳━┳━┓
┃☆┃ C#プログラミングレッスン                         ┃＿┃□┃×┃
┣━┻━━━━━━━━━━━━━━━━━━━━━━━━━┻━┻━┻━┫
┃Generics(4) ジェネリックメソッド                            No.089┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛


■──────────────────────────────────
■ ジェネリッククラスを引数に受け取るメソッド

今までは、クラス全体に対し、型パラメータを指定するジェネリッククラスに
ついて説明してきましたが、場合によっては、メソッドに対して型パラメータ
を与えたくなる時があります。

例えば、
   
   PrintStack(stack);

というメソッドを作成したいとします。
このメソッドは、スタックに積まれた値をすべて取り出し、Consoleに値を出
力するものとします。

  Stack<int> stack = new Stack<int>();
  stack.Push(1);
  stack.Push(2);
  stack.Push(3);
  stack.Push(4);
  PrintStack(stack);

 ※ System.Collections.Generic に定義されている Stack<> を使っています。

この PrintStack メソッドはどのように定義すればよいでしょうか。

 public void PrintStack(Stack<int> stack) {
     while ( stack.Count > 0 ) {
         Console.WriteLine(stack.Pop().ToString());
     }
 }

と書けば、いちおう動きますが、この PrintStack メソッドは、Stack<int>
のインスタンスしか引数に受け取ることができません。
つまり、

  Stack<string> stack = new Stack<string>();
  ...
  PrintStack(stack);

と書くことができません。
これでは不便ですよね。


■──────────────────────────────────
■ ジェネリックメソッド

ジェネリックメソッドを定義することで、上記問題を解決することができます。

 public void PrintStack<T>(Stack<T> stack) {
     while ( stack.Count > 0 ) {
         Console.WriteLine(stack.Pop().ToString());
     }
 }

メソッド名の後ろに <T> を指定し、引数 Stack<int> の部分も Stack<T> と
します。
これで、以下のコードのように、任意の Stack<T> を受け取るPrintStack メ
ソッドを定義することができます。

  Stack<int> intstack = new Stack<int>();
  ...
  PrintStack(intstack);

  Stack<string> strstack = new Stack<string>();
  ...
  PrintStack(strstack);

ジェネリッククラスを引数に取るメソッドを書く際は、ジェネリックメソッド
を定義するようにすると良いでしょう。


■──────────────────────────────────
■ 型引数は省略

以下の Swap<T>() メソッドを例に、型引数の省略について説明します。

static void Swap<T>(ref T lhs, ref T rhs) {
    T temp = lhs;
    lhs = rhs;
    rhs = temp;
}

この Swap<T>() メソッドを呼び出すには、正式には

    int a = 1;
    int b = 2;
    Swap<int>(ref a, ref b);

のように書くわけですが、

    int a = 1;
    int b = 2;
    Swap(ref a, ref b);

のように型引数を省略することができます。この場合、コンパイラが、型推論
をしてくれます。

┌─┬─────────────────────────┬─┬─┬─┐
│☆│ C#プログラミングレッスン  (ぼぼ週刊）            │＿│□│×│
├─┴─────────────────────────┴─┴─┴─┤
│ Published by Gushwell.                                           │
│ Copyright (C) 2004-2006 Gushwell All rights reserved.            │
│ Microsoft MVP Visual Developer - Visual C#(Apr 2006 - Mar 2006)  │
│-------------------- Gushwell's Page ---------------------------- │
│ 窓際プログラマーの独り言  ：http://blog.livedoor.jp/gushwell/    │
│ 窓際プログラマーの読書三昧：http://gushwell.jugem.jp/            │
│             よろしかったらアクセスしてみてください！             │
└─────────────────────────────────┘
