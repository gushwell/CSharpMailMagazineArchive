┏━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━┳━┳━┓
┃☆┃ C#プログラミングレッスン                         ┃＿┃□┃×┃
┣━┻━━━━━━━━━━━━━━━━━━━━━━━━━┻━┻━┻━┫
┃Iterators(1)  反復子（イテレータ）                          No.096┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

■──────────────────────────────────
■  反復子(イテレータ)とは

従来の C# では、独自のコレクションクラスに foreachステートメントを適用
させようとすると、IEnummerableや IEnumratorインターフェースを実装する
必要があり、面倒なコーディングが必要でした。
しかし、C#2.0 で導入された  反復子（イテレータ）を使うことで、比較的簡
単に、実装することが可能になりました。

反復子とは、ある規則に沿った値を生成するステートメントブロックのことで
す。反復子には、１つ以上の yield ステートメントがあり、通常のステート
メントブロックとは区別されます。

■──────────────────────────────────
■  反復子(イテレータ)の例

具体的な反復子の例を見てみましょう。

  public class EnumSample01 {
      public System.Collections.IEnumerator GetEnumerator() {
          for ( int i = 0; i < 10; i += 2 ) {
              yield return i;
          }
      }
  }

まず、反復子は、System.Collections.IEnumerator を戻り値とする 
GetEnumerator() メソッドを実装する必要があります。 

このGetEnumerator() メソッドの中で、値を順に生成するコードを記述します。
上の例は、0から10までの偶数を列挙する例です。yield return ステートメン
トで値を生成しています。

yield return で値を別のところに溜め込んでおき、その値を foreach で順に
取り出していると思えば理解しやすいでしょうか。ただ、実際には、どこかに
値が溜め込まれるわけではありません。

foreach を使う側のコードは以下のとおりです。

  class Program {
      static void Main(string[] args) {
          EnumSample01 sample = new EnumSample01();
          foreach ( int num in sample )
              Console.Write("{0} ",num);
      } 
  }

この出力結果は、
  
  0 2 4 6 8

となります。
このように、反復子を定義することで、独自のコレクションクラスを配列や
ArrayList, List<T> などと同じように使えるようになります。

  
■──────────────────────────────────
■  反復子(イテレータ)のもう一つの例

EnumSample01 を以下のように書き換えることもできます。

  public class EnumSample01 {
      public System.Collections.IEnumerator GetEnumerator() {
          yield return 0;
          yield return 2;
          yield return 4;
          yield return 6;
          yield return 7;
          yield return 10;
      }
  }

なんか、とても奇妙なコードに見えますが、正しく動作します。

foreach ステートメントは、繰り返しの度に暗黙的に、GetEnumerator を呼び
出しています。 1回呼び出すごとに、一つの yield return が、実行されてい
るます。ぜひ、すべての行にブレークポイントを設定して確認してみてくださ
い。


■──────────────────────────────────
■ System.Collections.Generic.IEnumerator<T> 

C#2.0 では、ジェネリック機能が追加されたことは既に説明しましたが、
IEnumeratorインターフェースのジェネリック版も用意されています。

生成する値の型が特定されているのであれば、以下のように、Enumerator<T> 
を使うことも可能です。

  using System.Collections.Generic;
  ...
  public class EnumSample01 {
      public IEnumerator<int> GetEnumerator() {
          for ( int i = 0; i < 10; i += 2 ) {
              yield return i;
          }
      }
  }

┌─┬─────────────────────────┬─┬─┬─┐
│☆│ C#プログラミングレッスン  (ぼぼ週刊）            │＿│□│×│
├─┴─────────────────────────┴─┴─┴─┤
│ Published by Gushwell.                                           │
│ Copyright (C) 2004-2006 Gushwell All rights reserved.            │
│ Microsoft MVP Visual Developer - Visual C#(Apr 2006 - Mar 2006)  │
│-------------------- Gushwell's Page ---------------------------- │
│ 窓際プログラマーの独り言  ：http://blog.livedoor.jp/gushwell/    │
│ 窓際プログラマーの読書三昧：http://gushwell.jugem.jp/            │
│ C#デザインパターン :                                             │
│  『増補改訂版Java言語で学ぶデザインパターン入門 / 結城 浩(著)』  │
│   のサンプルコードをC#に移植したものを掲載しています。           │
│   移植後のコードの公開は、結城氏の了解を得ています。             │
│   http://blog.livedoor.jp/gushwell/archives/50333227.html        │
└─────────────────────────────────┘