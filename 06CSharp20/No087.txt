┏━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━┳━┳━┓
┃☆┃ C#プログラミングレッスン                         ┃＿┃□┃×┃
┣━┻━━━━━━━━━━━━━━━━━━━━━━━━━┻━┻━┻━┫
┃Generics(2) ジェネリッククラスの作成                        No.087┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛


■──────────────────────────────────
■ ジェネリックを使用したクラス

前回は、List<T> クラスを例に、ジェネリック型について説明しました。今回
は、ジェネリッククラスを定義する方法を説明します。

例えば、以下のような Stackクラスがあったとします。

 public class MyStack {
     private int size = 0;
     private const int MaxSize = 100;
     private object[] items;
     public MyStack() {
         items = new object[MaxSize];
     }
     public void Push(object x) {
         items[size++] = x;
     }
     public object Pop() {
         return items[--size];
     }
 }

 ※ このクラスの出来については、突っ込まないでください。

これは、ジェネリックを使わないクラスですが、これをジェネリックを使った
クラスに直してみましょう。
以下のようなコードになります。２つを良く見比べてくださいね。

 public class MyStack<T> {
     private int size = 0;
     private const int MaxSize = 100;
     private T[] items;
     public MyStack() {
         items = new T[MaxSize];
     }
     public void Push(T x) {
         items[size++] = x;
     }
     public T Pop() {
         return items[--size];
     }
 }

まず、ジェネリック型にするには、

  public class MyStack<T> {

のように、 <T> をクラス名の後ろに追加します。別に T でなくても良いので
すが、慣習的に T という識別名がよく使われています。

さらに、object と記述されている部分を T に変更します。
例えば、

     private T[] items;

では、T という型の配列を宣言していることになります。
この時点では、具体的な型は、分かりません。

   MyStack<int> stack = new MyStack<int>();

のように、実行時にインスタンスが生成されたときに決定されます。T が int
に置き換わる、つまり、型をパラメータとして渡していると考えれば、理解し
やすいでしょうか。


■──────────────────────────────────
■ ２つの型を指定する例

MyStack<T>は、型パラメータを一つ指定する例でしたが、複数の型を指定する
ことも出来ます。
例えば、System.Collections.Generic.Dictionary クラスの場合は、

  public class Dictionary<K, V> {
     ...
  }

のように、２つの型を受け取ります。
このDictionaryクラスは、Hashtable クラスのジェネリック版とも言えるクラ
スです。

  Dictionary<string, Person> dict = new Dictionary<string, Person>();
  dict.Add("Taro", new Person());
  Person p = dict["Taro"];

のような使い方ができます。

┌─┬─────────────────────────┬─┬─┬─┐
│☆│ C#プログラミングレッスン  (ぼぼ週刊）            │＿│□│×│
├─┴─────────────────────────┴─┴─┴─┤
│ Published by Gushwell.                                           │
│ Copyright (C) 2004-2006 Gushwell All rights reserved.            │
│ Microsoft MVP Visual Developer - Visual C#(Apr 2006 - Mar 2006)  │
│-------------------- Gushwell's Page ---------------------------- │
│ 窓際プログラマーの独り言  ：http://blog.livedoor.jp/gushwell/    │
│ 窓際プログラマーの読書三昧：http://gushwell.jugem.jp/            │
│             よろしかったらアクセスしてみてください！             │
└─────────────────────────────────┘