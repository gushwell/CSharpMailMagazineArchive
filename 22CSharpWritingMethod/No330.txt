■━ [C#プログラミングレッスン] ━━━━━━━━━━━━━━━ No.330 ━□

「プログラム書法編」-- ネーミング(1)
                                                           by Gushwell  
□━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━■


プログラミングにとって良い名前を付けるというのは、とても重要です。この名前
付けがうまくいけば、プログラムが読みやすく理解しやすくなり、保守性を向上さ
せます。
今回から、数回にわたり、良い変数名、良いプロパティ名、良いメソッド名を付け
るガイドラインについて簡単に説明したいと思います。

■□───────────────────────────────────
■□ ネーミングの大原則

「それが何を表すものかを説明する名前をつける」

これが、ネーミングの大原則です。例えば、現在の日付を表すとしたら、today,
currentDate などが良い名前です。一方、cd, day, date, d, td などの変数名は、
良い名前ではありません。
会員数を表す変数だとしたら、numberOfMembersでしょうか。num, nm, cnt などの
変数名は良い変数名とは言えません。

１行読み込むメソッドならば、単なるReadやInputよりも、ReadLine が良いでしょ
う。ReadLn と省略したり、SetLineのように読み手を混乱させる名前は良い名前と
は言えません。
読者の皆さんは、SetLineってまったく反対の意味じゃないか、と思うでしょうが、
こういった名前を付ける人もいるのです。
Wahtではなく、Howにとらわれているプログラマーは、そのメソッドが、「読み込ん
だ行を、バッファーに設定している」メソッドだとすると、こういった名前を付け
てしまいがちです。
ひどい場合は、LineSet という名前だったりします。これだと、まったく意味が通
じないですよね。


■□───────────────────────────────────
■□ 省略語は使わない

原則として、省略した単語は使わないようにします。次に示す名前は悪い例です。

btn, cnt, rtn, ttl, clr, drv, reg

ただし、アプリケーション開発においては、その省略形が一般的であり、意味の特
定できるものならば、利用しても良いと思いますが、こういった変数名を使う場合
は、できるだけそのスコープは短くするべきです。
例えば、
ans - answer
temp -  temporary.
doc - document
elem - element
mid - middle
min -  minimum
obj - object
prep - preposition
vol - volume
などが思い浮かびます。

※ クラスライブラリを作成する場合は、公開する識別子にこのような省略形は付け
  ないほうが良いでしょう。

当然ですが、省略形は使いすぎるのは良くありません。特にこのような単語を単独
で利用する場合には注意が必要です。
例えば、min は、その文脈によっては、minute なのか minimumなのかの区別がすぐ
にはつかない場合もあります。contなども、content か、contract か区別がすぐに
はつかません。
rec も recordなのか、receive なのか、receipt なのかの区別がつかません。結局、
こういったところで、横着すると後々困るのは、自分自身あるいは、メンテナンス
する人です。
ちなみにマイクロソフトのガイドラインでは、Ok と Id だけが省略形として許され
ています。

■□───────────────────────────────────
■□ 名前に数字を使わない

複数の変数を区別する目的で、名前に数字を使わないようにしてください。例えば、
name1, name2  といった名前は使いません。
大抵は、もっと良い名前があるはずです。どういった名前が適切かを考える努力を
してください。これを繰り返すことで、ネーミングのセンスも磨かれていくと思い
ます。
もし、どうしても思い浮かばなかったら、そのスコープを極力狭くすることが重要
です。

■□───────────────────────────────────
■□ Pascalとcamel形式を適切に使う

C#では、変数名やメソッド名などの識別子の形式として、Pascal形式とcamel形式の
２つがあります。

Pascal形式
 識別子の最初の文字と、それに続いて連結される各単語の最初の文字を大文字に
 します。
 Pascal 形式は、3 文字以上から構成される識別子に対して使用します。

   ErrorCode、GetType

Camel 形式
 識別子の最初の文字を小文字にし、それに続いて連結されている各単語の最初の
 文字を大文字にします。次に例を示します。

  backColor、familyName

なお、識別子のすべてを大文字にする場合もあります。その例を示します。

  IO

通常、3文字以上の単語をすべて大文字にすることはしません。
C#では、ローカル変数名、クラスのフィールド名、メソッドの仮引数名に、camel形
式を使います。
それ以外（クラス名、メソッド名、プロパティ名など）では、Pascal形式を使いま
す。なお、読み取り専用の静的フィールドにも、Pascal形式を使います。


■□───────────────────────────────────
■□ 大文字、小文字だけが違うpublicな名前を付けません。

名前の衝突を避ける目的で、同じスペルと、大文字小文字の違いしかない名前を付
けてはいけません。
例えば、Length と LENGTH と２つのプロパティを公開することは混乱の元となりま
す。

─────────────────────────────────────
『C#プログラミングレッスン』  (ほぼ週刊）                                 
☆皆さまからの感想をお待ちしています。http://gushwell.ifdef.jp/mail.html  
─────────────────────────────────────
Published by Gushwell.                                                    
 Copyright (C) 2012 Gushwell All rights reserved.                        
 Microsoft MVP for Visual C#(Apr 2005 - Mar 2013)                        

■Gushwell's Page                                                         
facebook Page                     : http://www.facebook.com/CSharpLesson  
Gushwell's C# Dev Notes           : http://gushwell.ldblog.jp/            
Gushwell's C# Programming Page    : http://gushwell.ifdef.jp/             
Gushwellの読書ノート              : http://gushwell.jugem.jp/             
Twitterアカウント                 : @gushwell                             
─────────────────────────────────────
