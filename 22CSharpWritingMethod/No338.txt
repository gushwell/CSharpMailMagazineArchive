■━ [C#プログラミングレッスン] ━━━━━━━━━━━━━━━ No.338 ━□

「プログラム書法編」-- 落穂ひろい
                                                           by Gushwell  
□━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━■

■□───────────────────────────────────
■□ return文は適切に使う。

メソッドの出口は一つでなくてはならないという信念を持っている人がいて、メソ
ッドの途中での return 文を一つに限定したがる人がいるようです。
しかし、これは、コードをより複雑にする危険があります。
例えば、ある条件の時だけ処理をさせたい場合には、メソッドの先頭で、

 if (...) 
     return false;
 if (...)
     return false;

と書くことで、これ以降のコードを単純化できます。return を使わないとすると
if の入れ子が深くなったり、余計な制御用変数を用意したりしなくてはなりません。
return を適切に使うことで、コードは理解しやすいものになります。


■□───────────────────────────────────
■□ 手続き部での深いネストは避ける

if, while, for などを入れ子にし、深いネスト構造にすると、プログラムを理解す
るのが困難になるとともに、間違いを犯しやすくなります。
特に、多段 if は、理解不能なコードとなる危険が高いです。普通のプログラマー
は、ネストをたどっているうちに、最初のif 文の条件が何だったかを忘れてしまい
ます。
これも、いくつまでと言い切るのは難しいですが、私はネストは３つくらいまでだ
と思っています。
それ以上深くなる場合は、アルゴリズムやデータ構造を見直したり、メソッドを分
割したりすることで、深いネストにならないようにしています。


■□───────────────────────────────────
■□ オーバーロードではひとつだけvirtualにする

サブクラスで機能拡張させたい場合は、最も長いオーバーロードだけを virtual に
します。短いオーバーロードは、長いオーバーロードを単に呼び出すだけにする必
要があります。

public vitual FileStream Open(FileMode mode,FileAccess access,
                                                  FileShare share) {
    ...
}

public FileStream Open(FileMode mode,FileAccess access) {
    return Open(mode,access,FileShare.None)
}

このようにしておけば、このクラスを継承し、機能を拡張したい場合は、virtualが
ついたOpenメソッドだけをoverrideすれば良いことが明白になります。
一つだけオーバーロードすれば、残りの引数の数が少ないオーバーロードは自動的
に機能拡張されることになります。


--------------------------------------------------------------------------

さて、４月下旬から開始した「書法編」ですが、今回をもって終わりにします。
プログラミングする上での指標をできるだけ自分の言葉として示せればと思って
連載を続けてきましたが、どうでしたでしょうか？

このところ仕事が忙しすぎて、自分としては、出来に納得いっていない部分もあり
ますが、読者の皆さんにとって一つでも得るものがあれば、うれしく思います。

次の話題は、「シリアル化」の予定です。
再開は、８月下旬を予定しています。
それではまた、「C#プログラミングレッスン」でお会いしましょう。

--------------------------------------------------------------------------


書法編では以下の文献を参考させていただきました。

参考文献
『プログラミング作法』 Brian W.Kernighan アスキー (2000/11)
 http://amzn.to/HckjBO
『Code Complete第2版〈上〉』日経BPソフトプレス (2005/03)
 http://amzn.to/H5tPXD
『MSDN ライブラリ - クラスライブラリ開発のデザイン ガイドライン』 
 http://msdn.microsoft.com/ja-jp/library/ms229042.aspx

==========================================================================
■ Gushwellの書籍

『C#プログラミング入門』
http://www.amazon.co.jp/exec/obidos/ASIN/4777515982/gaius-22/

目次は、こちらで確認できます。
http://www.kohgakusha.co.jp/books/detail/978-4-7775-1598-1

書評等
http://igeta-diary.blogspot.jp/2011/09/csharp-programming-intro.html
http://blog.hiros-dot.net/?p=1196

─────────────────────────────────────
『C#プログラミングレッスン』  (ほぼ週刊）                                 
☆皆さまからの感想をお待ちしています。http://gushwell.ifdef.jp/mail.html  
─────────────────────────────────────
Published by Gushwell.                                                    
 Copyright (C) 2012 Gushwell All rights reserved.                        
 Microsoft MVP for Visual C#(Apr 2005 - Mar 2013)                        

■Gushwell's Page                                                         
facebook Page                     : http://www.facebook.com/CSharpLesson  
Gushwell's C# Dev Notes           : http://gushwell.ldblog.jp/            
Gushwell's C# Programming Page    : http://gushwell.ifdef.jp/             
Gushwellの読書ノート              : http://gushwell.jugem.jp/             
Twitterアカウント                 : @gushwell                             
─────────────────────────────────────
