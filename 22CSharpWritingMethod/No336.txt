■━ [C#プログラミングレッスン] ━━━━━━━━━━━━━━━ No.336 ━□

「プログラム書法編」-- クラス(2)
                                                           by Gushwell  
□━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━■


■□───────────────────────────────────
■□ 継承はis-a関係の時に利用する

継承は、クラスの間に is-a関係が成り立つ時に利用します。

例えば、
・教師と生徒は人です。
・バスとタクシーは乗り物です。
・サービスも品物も商品である。
・現金支払いもカード支払いも支払いである。
のような関係が成り立つ時に、is a関係が成り立ちます。
このような関係の時に継承を使います。

一方、has-a関係、make-a関係の時には、継承を使ってはいけません。
・コンピュータとＣＰＵ
・売り上げと売り上げ明細
・アプリケーション設定情報とレジストリ
・StackとListクラス

つまり、CPUクラスから、Computerクラスを継承したり、Registryクラスから
MyAppSettingsクラスを継承してはいけないということです。
また、Listクラスを使って、Stackクラスを実現する場合でも、Listクラスから
Stackクラスを継承はしません。

初心者がよく間違えるのは、共通化＝継承という考え方です。
AとBクラスで共通して使いたい機能があるから、Xというスーパークラスを定義し、
そこに共通メソッドを定義するというやり方です。これは継承の間違った使い方で
す。
共通で使うFormクラスを定義し、それを継承元としてそれぞれのFormを定義する場
合に、その共通Formにどんどん共通メソッドを追加していくというやり方も良い継
承とは言えません。
このようなクラス階層は、クラス間の結合が強くなり、スーパークラスの変更がサ
ブクラスに思わぬ悪影響を及ぼすことがあります。そしてそれを回避するために、
コードが複雑さを増していき、ますます結合度が強くなり... とう悪循環に陥るこ
とになります。


■□───────────────────────────────────
■□ 継承よりもコンポジションを

「書法編」には適切な内容ではありませんが...

継承はとても強力な機能ですが、スーパークラスとサブクラスが強く結びつきます。
サブクラスは、スーパークラスの実装に依存してしまう場合が多く、スーパークラ
スのを変更すると、サブクラスも変更せざるを得なくなる場合があります。
サブクラスで共通に使うものだからといって、それをスーパークラスにもっていっ
たりすると、スーパークラスは非常に変化に弱いクラスとなってしまいます。
そのためには、前述の is-a 関係のある場合にのみ継承を使うことを徹底する
必要があります。
また、この継承の弱点を補うために、オブジェクトコンポジションを利用すること
も一つの解決策です。
オブジェクトコンポジションとは、プログラマーの視点で簡単に言えば、クラスＡ
のフィールドとして、別のクラスＢを定義し、クラスＢの機能を呼び出すことで、
クラスＡの機能を実現することです。
このコンポジションの良いところは、ブラックボックス再利用であるということで
す。
つまり、クラスＢのインターフェースが変更されなければ、クラスＢの実装を変更
しても、クラスＡを変更する必要はありません。
一方継承の場合は、ホワイトボックス再利用なので、クラスＢからクラスＡを継承
したとすると、クラスＢの変更がクラスＡにも大きく意影響してしまう可能性が
あるということです。

また、オブジェクトコンポジションは、クラスＢのインターフェースを隠し、クラ
スＢとは別のインターフェースを公開することができるという利点もあります。


■□───────────────────────────────────
■□ 深い継承を避ける

深い継承は避けます。いくつまでなら良いかという明確な指標を出すのは難しい
ですが、通常のアプリケーションでは、（.Net Frameworkから継承したクラスを
1階層とすると）２，３階層までで留めておけば良いと思います。
深い継承は、コードを理解することが大変ですし、デバッグも困難です。

─────────────────────────────────────
『C#プログラミングレッスン』  (ほぼ週刊）                                 
☆皆さまからの感想をお待ちしています。http://gushwell.ifdef.jp/mail.html  
─────────────────────────────────────
Published by Gushwell.                                                    
 Copyright (C) 2012 Gushwell All rights reserved.                        
 Microsoft MVP for Visual C#(Apr 2005 - Mar 2013)                        

■Gushwell's Page                                                         
facebook Page                     : http://www.facebook.com/CSharpLesson  
Gushwell's C# Dev Notes           : http://gushwell.ldblog.jp/            
Gushwell's C# Programming Page    : http://gushwell.ifdef.jp/             
Gushwellの読書ノート              : http://gushwell.jugem.jp/             
Twitterアカウント                 : @gushwell                             
─────────────────────────────────────
