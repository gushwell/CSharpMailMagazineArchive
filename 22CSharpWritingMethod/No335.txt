■━ [C#プログラミングレッスン] ━━━━━━━━━━━━━━━ No.335 ━□

「プログラム書法編」-- クラス(1)
                                                           by Gushwell  
□━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━■

今回から、数回に分けて、クラスを作成する際に守るべき事項について説明してい
きます。


■□───────────────────────────────────
■□ 実装の詳細を隠ぺいします

クラスを設計する際に重要なことは、実装詳細を隠すということです。
内部構造にアクセスできるクラスはある場面では便利でかゆいところに手が届く
と考えがちですが、このようなクラスは、変更に弱いクラスとなってしまいます。

機能を追加したり、内部のアルゴリズムやデータ構造を変え、より効率よくした
くても、公開した実装詳細が足かせになり、変更することが困難になります。あ
るいは、変更したことにより思わぬバグを引き起こす危険もあります。

実装詳細を隠すことで、上記のような不都合が起こりにくくすることができます。
具体的な内容を以下に示します。


■□───────────────────────────────────
■□ フィールドは公開しない

実装詳細を隠ぺいする基本は、フィールドを公開しないことです。
クラスのユーザが勝手にデータを変更できるようになっていると、クラス内部の値
の一貫性を維持することが困難になります。

フィールドを公開すると、以下のような不都合が起こります。

・変更してほしくない場面で、クラスに状態が変更されてしまう。
・クラスの機能拡張が困難になる。
・フィールドが変更されたことをクラス自身が把握できないために、不整合が発生
 してしまう。
 ある値が変更された時には、別の値も同時に変更する必要があるといったことが
 良くありますが、そういった制御ができなくなってしまいます。

そのためには、すべてのフィールドは、privateにします。そして、クラスが公開す
るインターフェースのみを使って、そのフィールドを管理するようにします。
もちろん公開する必要のないフィールドは、対応するpublicなプロパティは定義し
ません。

以下にその例を示します。

 private int readTimeout;
 public int ReadTimeout { 
     get { return readTimeout; }
     set { readTimeout = value; }
 }

C# 3.0以降では、以下のような記述が可能です。

 public int ReadTimeout { get; set; }

呼び出し元にプロパティの値を変更させたくない場合は、読み取り専用プロパティ
を作成してください。

public Encoding CurrentEncoding { get; }


また、ここでは、具体的なコードは示しませんが、例えば、アプリケーションの情
報を保持するレジストリ値を読み書きするクラスを作成した場合は、内部で使う
RegistryKey オブジェクトを公開せずに、値の読み書きを行うメソッドを用意しま
す。

なお、継承を考慮したクラスでは、フィールドをpirivateではなく、protectedとす
ることも考えられますが、この場合でも、フィールドを、privateとし、protected
なプロパティを定義した方が、クラス間の結びつきを弱くすることができます。


■□───────────────────────────────────
■□ 最小限のメソッドとプロパティを公開する

publicにするメソッドとクラスは、最小限とします。クラスが提供する機能は必要
十分である必要がありますが、必要以上であってはなりません。
特に多くのプログラマが利用するライブラリのクラスはなおさらです。
確かに、いろんな機能があれば使う側にとっては便利かもしれませんが、どれを使
うべきかで迷ったり、似たような機能がたくさんあると、使うべきメソッドを間違
えたりする危険があります。

私は、かつて、似たようなメソッドが複数公開されているクラスを利用するときに、
誤って、本来使うべきメソッドとは別のメソッドを使い、バグを作りこんだ苦い経
験があります。使うときにもっと良く調べるべきだったと反省しましたが、似たよ
うな紛らわしい機能を用意したクラス側にも問題があります。
また、こういったクラスは、クラスを作成する側からみても、メンテナンスするコ
ストが増加し、良いことはありません。


─────────────────────────────────────
『C#プログラミングレッスン』  (ほぼ週刊）                                 
☆皆さまからの感想をお待ちしています。http://gushwell.ifdef.jp/mail.html  
─────────────────────────────────────
Published by Gushwell.                                                    
 Copyright (C) 2012 Gushwell All rights reserved.                        
 Microsoft MVP for Visual C#(Apr 2005 - Mar 2013)                        

■Gushwell's Page                                                         
facebook Page                     : http://www.facebook.com/CSharpLesson  
Gushwell's C# Dev Notes           : http://gushwell.ldblog.jp/            
Gushwell's C# Programming Page    : http://gushwell.ifdef.jp/             
Gushwellの読書ノート              : http://gushwell.jugem.jp/             
Twitterアカウント                 : @gushwell                             
─────────────────────────────────────
