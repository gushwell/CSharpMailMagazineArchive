■━ [C#プログラミングレッスン] ━━━━━━━━━━━━━━━ No.327 ━□

「プログラム書法編」-- スタイル(2)
                                                           by Gushwell  
□━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━■


■□───────────────────────────────────
■□ 空白の一貫性を保とう。

どの場所に空白を使うかは、人によってかなり好みが違っていますが、一貫性を持
たせることが大切です。
適度な空白が視認性を上げてくれるます。

２つのコードを見比べてください。

 private const string IdTop="Top";
 [ConfigurationProperty(IdTop,DefaultValue=100)]
 public int Top{
     get{return(int)this[IdTop];}
     set{this[IdTop]=value;}
 }

 ------

 private const string IdTop = "Top";

 [ConfigurationProperty(IdTop, DefaultValue = 100)]
 public int Top {
     get { return (int)this[IdTop]; }
     set { this[IdTop] = value; }
 }

最初のコードだと、ちょっとごちゃごちゃした感じがあり、視認性が悪くなります。
この例はまだ良いほうですが、もう少し複雑なコードだと、さらに視認性が悪くな
ります。
一方、空白を多用すると間延びした感じになり、やはり視認性を落とすと思います。

 private const string IdTop = "Top" ;
 [ ConfigurationProperty ( IdTop , DefaultValue = 100 ) ]
 public int Top {
     get { return ( int ) this [ IdTop ] ; }
     set { this [ IdTop ] =    value ; }
 }

ちなみに私は、次のようなルールを採用しています。
1. if for などの制御フローキーワードの後には空白を置く。
2. for文の ; の後ろには空白を置く。
3. メソッドの引数の , の後ろには空白を置く。
4. 二項演算子の前後には空白を置く。
5. クラス定義時の : の前後には空白を置く。
6. { の前にコードを書く場合には、空白を置く。
7. { の後にコードを書く場合には、空白を置く。


■□───────────────────────────────────
■□ １文に詰め込みすぎるのはやめよう。

次のようなコードは、何か難しそうなことをやっているな、という感想を読み手に
持たせてしまい、読み手の心的ハードルを上げてしまいます。

return (new System.Uri(System.Reflection.Assembly.GetExecutingAssembly().CodeBase)).LocalPath;

上のコードは、複数の文に分割すれば、より短い時間で、コードを理解できるよう
になります。

string codeBase = System.Reflection.Assembly.GetExecutingAssembly().CodeBase;
var codeBaseUri = new System.Uri(codeBase);
return codeBaseUri.LocalPath;


LINQの拡張メソッドを繋げる場合も適当なところで改行するのが良いと思います。

var firstDay = Enumerable.Range(1, 7)
                         .Select(d => new DateTime(year,month,d))
                         .First(d => d.DayOfWeek == dayOfWeek);

このように途中で改行し、ドットの位置を合わせることで、理解しやすいコードに
なります。

==========================================================================

参考文献
『プログラミング作法』 Brian W.Kernighan アスキー (2000/11)
 http://amzn.to/HckjBO
『Code Complete第2版〈上〉』日経BPソフトプレス (2005/03)
 http://amzn.to/H5tPXD
『MSDN ライブラリ - クラスライブラリ開発のデザイン ガイドライン』 
 http://msdn.microsoft.com/ja-jp/library/ms229042.aspx


==========================================================================
■ Gushwellの書籍

『C#プログラミング入門』
http://www.amazon.co.jp/exec/obidos/ASIN/4777515982/gaius-22/

目次は、こちらで確認できます。
http://www.kohgakusha.co.jp/books/detail/978-4-7775-1598-1


─────────────────────────────────────
『C#プログラミングレッスン』  (ほぼ週刊）                                 
☆皆さまからの感想をお待ちしています。http://gushwell.ifdef.jp/mail.html  
─────────────────────────────────────
Published by Gushwell.                                                    
 Copyright (C) 2012 Gushwell All rights reserved.                        
 Microsoft MVP for Visual C#(Apr 2005 - Mar 2013)                        

■Gushwell's Page                                                         
facebook Page                     : http://www.facebook.com/CSharpLesson  
Gushwell's C# Dev Notes           : http://gushwell.ldblog.jp/            
Gushwell's C# Programming Page    : http://gushwell.ifdef.jp/             
Gushwellの読書ノート              : http://gushwell.jugem.jp/             
Twitterアカウント                 : @gushwell                             
─────────────────────────────────────
