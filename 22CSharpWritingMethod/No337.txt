■━ [C#プログラミングレッスン] ━━━━━━━━━━━━━━━ No.337 ━□

「プログラム書法編」-- メソッド
                                                           by Gushwell  
□━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━■

■□───────────────────────────────────
■□ メソッドは一つのことを行う

「メソッドは単機能にする」これはとても重要です。単機能のメソッドにすること
で様々なメリットが生まれます。

・理解しやすい。
・メンテナンスがしやすい。
・再利用しやすい。
・テストがしやすい。

メソッドが単機能ではないと、再利用する際にも足かせになります。メソッドのな
かの一部分だけを利用したいと思っても、再利用ができませんから、新たに同じよ
うなメソッドを作ったり、メソッドを分割し、再度テストしなおしたりする必要が
出てきてしまいます。
特に、「テストがしやすい」というのは見落とされがちですが、大切な点だと思い
ます。

パラメータの指定により、様々なことができるメソッドというものを時々見かけま
すが、こういったメソッドは、内部でたくさんの分岐があり、すべてのパターンで
のテストが難しくなります。
また、使う側もパラメータの組み合わせにより動きがどのように変わるのかが理解
しにくくなりますにで、メソッドは単機能にする上でも、パラメータの組み合わせ
でいろいろなことができるメソッドは、避けた方が良いと思います。


■□───────────────────────────────────
■□ メソッドは短く

長いメソッドは、一つのメソッドで多くのことをやりすぎているということであり、
「メソッドは単機能にする」という大原則が守られていないことを意味します。そ
のようなメソッドは、メンテナンスに多くのコストがかかることになります。つま
り、長いメソッドは、それだけで負の資産を抱えているということです。

メソッドの長さの明確な基準を示すことは難しいですが、私は、通常のコードの場
合ならば、１００行以内が一つの目安になると思っています。とは言ってもほとん
どのメソッドは、３０行程度にはおさまるでしょうから、クラスの中で１００行に
もなるメソッドというのは、ほんのわずかのはずです。

ちなみに、私が汎用ライブラリを書く場合、１０行程度に収まるメソッドというの
がたくさんできます。メソッドが短ければ、単体テストも簡単ですので、バグが入
り込む危険が少なくなります。

一方、業務アプリケーションでは、一度に多くの種類のデータを扱わなくてはいけ
ない場面が多いため、一つのメソッドが長くなりがちです。しかしだからと言って、
長いメソッドを肯定してはいけません。
ネットの書き込みなどを読むと、世の中には５００行もあるメソッドを当たり前の
ように書いている人もいるようです。きっとそういった人は長いメソッドを理解で
きる能力があるわけですから、余程頭が良いんだろうなーと思います。
しかしその頭の良さを、メソッドを単機能に分割し、メソッドに良い名前を付け、
メンテナンスしやすいコードにするために使ってほしいものです。


■□───────────────────────────────────
■□ メソッドの引数の数はできるだけ少なくする

メソッドの引数の数が多いと、呼び出し側は利用する際に、多くのことを考える必
要が出てきますから使い勝手が悪くなります。一方、メソッドを作成する側も引数
の組み合わせの爆発によりテストがとても大変になります。
そのため、引数の数は最小限のものにします。
もしどうしても多くの引数が必要ならば、引数が省略された時のデフォルト値を決
め、少ない引数で利用できるオーバーロードメソッドを用意します。

# C# 4.0では、オプション引数の機能を利用すれば、いくつものオーバーロード
# メソッドを用意する必要もなくなります。

引数はいくつまでなら良いのかというのもなかなか難しい問題ですが、経験的には
３つ以内、どんなに多くても６つまでにおさめることが必要だと思います。


■□───────────────────────────────────
■□ 引数の順番は、他のメソッドと同じにする

引数の順番は、他のメソッドと同じにします。一つのクラスの中で、引数の順番が
異なるメソッドがあると、混乱のもとです。
特に、型が同じ引数の順番が異なっていた場合、バグを作りこむ原因となります。

また、オーバーロードされたメソッドの引数の順序には一貫性を持たせなければな
りません。以下のように定義してはいけません。

public FileStream Open(FileShare share, FileMode mode, FileAccess access)
public FileStream Open(FileAccess access, FileMode mode)


■□───────────────────────────────────
■□ 引数の名前を統一する

オーバーロードされたメソッドの引数が、もう一つのオーバーロードの引数と同じ
ものを意味する場合は、必ず同じ名前を付けます。

例えば、

public FileStream Open(FileMode mode,FileAccess access,FileShare share)
public FileStream Open(FileMode mode,FileAccess access)

のようにします。以下のように書いてはいけません。

public FileStream Open(FileMode mode, FileAccess access, FileShare share)
public FileStream Open(FileMode fileMode, FileAccess fileAccess)



==========================================================================
■ Gushwellの書籍

『C#プログラミング入門』
http://www.amazon.co.jp/exec/obidos/ASIN/4777515982/gaius-22/

目次は、こちらで確認できます。
http://www.kohgakusha.co.jp/books/detail/978-4-7775-1598-1

書評等
http://igeta-diary.blogspot.jp/2011/09/csharp-programming-intro.html
http://blog.hiros-dot.net/?p=1196

─────────────────────────────────────
『C#プログラミングレッスン』  (ほぼ週刊）                                 
☆皆さまからの感想をお待ちしています。http://gushwell.ifdef.jp/mail.html  
─────────────────────────────────────
Published by Gushwell.                                                    
 Copyright (C) 2012 Gushwell All rights reserved.                        
 Microsoft MVP for Visual C#(Apr 2005 - Mar 2013)                        

■Gushwell's Page                                                         
facebook Page                     : http://www.facebook.com/CSharpLesson  
Gushwell's C# Dev Notes           : http://gushwell.ldblog.jp/            
Gushwell's C# Programming Page    : http://gushwell.ifdef.jp/             
Gushwellの読書ノート              : http://gushwell.jugem.jp/             
Twitterアカウント                 : @gushwell                             
─────────────────────────────────────

