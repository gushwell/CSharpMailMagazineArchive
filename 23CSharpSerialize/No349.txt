
■━ [C#プログラミングレッスン] ━━━━━━━━━━━━━━━ No.349 ━□

「シリアライズ編」-- JSONLシリアル化
                                                           by Gushwell  
□━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━■

シリアライズ編の最後は、JSON形式のシリアル化です。

■□───────────────────────────────────
■□ JSON形式へのシリアル化

あるオブジェクトをJSON形式へシリアル化するには、以下のアセンブリを参照に追
加する必要があります。

.NET Framework3.5
System.ServiceModel.Web (System.ServiceModel.Web.dll 内)

.NET Framework 4
System.Runtime.Serialization (System.Runtime.Serialization.dll 内)

※ この機能は、.NET Framework 3.0以前では利用できません。

JSON形式でシリアル化するには、クラスにDataContract属性を付加する必要があり
ます。対象となるフィールドにも、DataMember属性を付加してください。

  [DataContract]
  public class Book {
      [DataMember]
      public string title;

      [DataMember]
      public string author;

      [DataMember]
      public int price;
  }

シリアル化するコードは以下のようになります。

using System.Runtime.Serialization;
using System.Runtime.Serialization.Json;

...

  Book p = new Book() {
      title = "僕でもわかったC#入門",
      author = "gushwell",
      price = 980
  };
  using (Stream stream = new FileStream("sample.json", FileMode.Create,
                                                       FileAccess.Write)) {
      DataContractJsonSerializer serializer = 
                             new DataContractJsonSerializer(typeof(Book));
      serializer.WriteObject(stream, p);
  }


JSONシリアル化するには、DataContractJsonSerializerクラスを使います。シリ
アル化するには、WriteObjectメソッドを呼び出します。
メソッド名、クラス名は異なりますが、考え方は、XMLシリアル化とほぼ同じです
ね。

出力される JSONファイルは、次の通りです。

 {"author":"gushwell","price":980,"title":"僕でもわかったC#入門"}

XMLファイルに比べて、明らかにファイルサイズが小さくなることが分かると思い
ます。


次に逆シリアル化するコードを示します。


 using (Stream stream = new FileStream("sample.json", FileMode.Open,
                                                      FileAccess.Read)) {
     DataContractJsonSerializer serializer = 
                            new DataContractJsonSerializer(typeof(Book));
     Book book = serializer.ReadObject(stream) as Book;
     Console.WriteLine(book.title);
     Console.WriteLine(book.author);
     Console.WriteLine(book.price);
 }


それにしても、マイクロソフトは、なぜ、DataMember 属性を付けるような設計にし
たのでしょうね。XMLシリアル化のように、デフォルトで、publicなフィールドやプ
ロパティは、シリアル化の対象とし、XmlIgnoreのような属性で、シリアル化の対象
外にできた方が使い勝手が良かったと私個人は思っています。
このあたりの理由をご存じの方がいれば、是非お教えください。

─────────────────────────────────────

今回で「シリアライズ編」は終了です。いかがでしたでしょうか。

次回の話題は... まだ決まっていません m(_ _)m。
２，３週間ほどお休みをいただき、その間に考えようと思います。では、次回を
お楽しみにしていてください。

─────────────────────────────────────
『C#プログラミングレッスン』  (ほぼ週刊）                                 
☆皆さまからの感想をお待ちしています。http://gushwell.ifdef.jp/mail.html  
─────────────────────────────────────
Published by Gushwell.                                                    
Copyright (C) 2012 Gushwell All rights reserved.                          
Microsoft MVP for Visual C#(Apr 2005 - Mar 2013)                          
                                                                          
■Gushwell's Page                                                         
facebook Page                     : http://www.facebook.com/CSharpLesson  
Gushwell's C# Dev Notes           : http://gushwell.ldblog.jp/            
Gushwell's C# Programming Page    : http://gushwell.ifdef.jp/             
Gushwellの読書ノート              : http://gushwell.jugem.jp/             
Twitterアカウント                 : @gushwell                             
─────────────────────────────────────

