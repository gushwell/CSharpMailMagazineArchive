
■━ [C#プログラミングレッスン] ━━━━━━━━━━━━━━━ No.343 ━□

「シリアライズ編」-- バイナリシリアル化(4)
                                                           by Gushwell  
□━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━■

今回は、異なるバージョン間でのシリアル化、逆シリアル化について説明します。
いつもより長めの記事になってしまいましたが、是非最後までお読みください。


■□───────────────────────────────────
■□ 異なるバージョン間でのシリアル化、逆シリアル化

今更、こんなことを書く必要はないかもしれませんが、.NET Framework 1.1 以前
のシリアル化では、以下のような問題がありました。

・古いアプリケーションでシリアル化した（フィールドが欠落している）データ
  を、新しいアプリケーションで逆シリアル化すると例外が発生する。
・新しいアプリケーションでシリアル化した（フィールドが追加されてる）デー
  タを、古いアプリケーションで逆シリアル化すると例外が発生する。

.NET Framework 2.0 以降のシリアル化では上記のような問題を解決し、シリアル
化対象のクラスに容易に新しいフィールドを加えることが可能となっています。

■□───────────────────────────────────
■□ 旧バージョンと新バージョンのでシリアル化のコード

では、具体的なコードを見ていきましょう。

まずは、以下のクラスをシリアル化しましょう。

 // Version 1.0
 [Serializable]
 public class Person {
     public string Name { get; set; }
     public DateTime Birthday { get; set; }
 }

以下、シリアル化するコードです。

 Person obj = new Person {
     Name = "gushwell",
     Birthday = new DateTime(1980, 5, 12),
 };
 IFormatter formatter = new BinaryFormatter();
 using (Stream stream = new FileStream("Person.dat", FileMode.Create,
                                                      FileAccess.Write)) {
     formatter.Serialize(stream, obj);
 }

さて、ここで、PersonクラスにEMailAddressという新しいフィールドを加える必
要が出てきたとしましょう。新しいPersonクラスを示します。

 // Version 2.0
 [Serializable]
 public class Person {
     public string Name { get; set; }
     public DateTime Birthday { get; set; }
     public string EMailAddress { get; set; }
 }

MSDNには、追加したフィールドには、OptionalFieldAttribute 属性を付加すると
書かれていますが、プロパティには不可できないので、ここでは無視します。


■□───────────────────────────────────
■□ 旧バージョンのデータを新バージョンで逆シリアル化

では、先ほどのコードで、version1.0でシリアル化したデータを読み込み、
version2.0のコードで、逆シリアル化してみましょう。

逆シリアル化するコードは、以下の通りです。

 IFormatter formatter = new BinaryFormatter();
 Person obj = null;
 using (Stream stream = new FileStream("Person.dat", FileMode.Open,
                                                      FileAccess.Read)) {
     obj = (Person)formatter.Deserialize(stream);
 }
 // 以下、内容を確認するコード
 Console.WriteLine("Name = {0}", obj.Name);
 Console.WriteLine("Birthday = {0}", obj.Birthday);
 Console.WriteLine("eMail = {0}", obj.EMailAddress);

最後の行で、追加したフィールドの値を出力しています。

実行すると、以下の結果が得られます。

 Name = gushwell 
 Birthday = 1980/05/12 0:00:00
 email = 

version1.0のシリアル化したファイルには、emailの情報はありませんが、例外が
発生することなく逆シリアル化できています。もちろん、EMailAddress は、規定
値のnull が設定されます。


■□───────────────────────────────────
■□ 新バージョンのデータを旧バージョンで逆シリアル化

今度は、version2.0でシリアル化したファイルを、version1.0のアプリケーション
で読み込み逆シリアル化してみます。

コードは省略しようと思いましたが、一応載せておきましょう。

Version2.0 のコード

  // Version 2.0
  [Serializable]
  public class Person {
      public string Name { get; set; }
      public DateTime Birthday { get; set; }
      public string EMailAddress { get; set; }
  }
  ...

  Person obj = new Person {
      Name = "gushwell",
      Birthday = new DateTime(1980, 5, 12),
      EMailAddress = "gushwell@example.com"
  };
  IFormatter formatter = new BinaryFormatter();
  using (Stream stream = new FileStream("Person.dat", FileMode.Create, 
                                                       FileAccess.Write)) {
      formatter.Serialize(stream, obj);
  }


version1.0のコード

 // Version 2.0
 [Serializable]
 public class Person {
     public string Name { get; set; }
     public DateTime Birthday { get; set; }
 }
 ...

 IFormatter formatter = new BinaryFormatter();
 Person obj = null;
 using (Stream stream = new FileStream("Person.dat", FileMode.Open, 
                                                      FileAccess.Read)) {
     obj = (Person)formatter.Deserialize(stream);
 }
 Console.WriteLine("Name = {0}", obj.Name);
 Console.WriteLine("Birthday = {0}", obj.Birthday);

実行結果は、

 Name = gushwell 
 Birthday = 1980/05/12 0:00:00

となり、新しいバージョンで作成したファイルを、古いバージョンで読むことが
できました。


■□───────────────────────────────────
■□ バージョン管理のベストプラクティス

ＭＳＤＮには、バージョン管理のベストプラクティスとして以下の規則が掲載され
ています。
  http://msdn.microsoft.com/ja-jp/library/ms229752
それを抜粋しておきます。

・シリアル化したフィールドを削除しない。
・以前のバージョンでフィールドに NonSerializedAttribute 属性が適用されてい
  ない場合、新しいバージョンでもこの属性を適用しない。
・シリアル化したフィールドの名前または型を変更しない。
・新しいシリアル化フィールドを追加する場合は、OptionalFieldAttribute 属性を
  適用する。
・以前のバージョンでシリアル化できなかったフィールドから
  NonSerializedAttribute 属性を削除する場合は、OptionalFieldAttribute 属性
  を適用する。
・すべてのオプション フィールドに対して、既定値として 0 または null が許容
  される場合以外は、シリアル化コールバックを使用して意味のある既定値を設定
  する。
・型が今後のシリアル化エンジンと互換性を保つようにするには、次のガイドライ
  ンに従ってください。
・OptionalFieldAttribute 属性の VersionAdded プロパティを常に正しく設定する。
・バージョンの分岐は避ける。 

なお、前述のコードでも確認したように、OptionalFieldAttribute 属性が無い状態
で、逆シリアル化しても、例外が発生することなく、新しく追加したフィールドに
は、規定値が設定されるようです。ただ、ＭＳＤＮのベストプラクティスに従い、
OptionalFieldAttribute属性を適用した方が良いでしょう。ただし、その場合は、
自動実装プロパティは使えませんが...

─────────────────────────────────────
『C#プログラミングレッスン』  (ほぼ週刊）                                 
☆皆さまからの感想をお待ちしています。http://gushwell.ifdef.jp/mail.html  
─────────────────────────────────────
Published by Gushwell.                                                    
Copyright (C) 2012 Gushwell All rights reserved.                          
Microsoft MVP for Visual C#(Apr 2005 - Mar 2013)                          
                                                                          
■Gushwell's Page                                                         
facebook Page                     : http://www.facebook.com/CSharpLesson  
Gushwell's C# Dev Notes           : http://gushwell.ldblog.jp/            
Gushwell's C# Programming Page    : http://gushwell.ifdef.jp/             
Gushwellの読書ノート              : http://gushwell.jugem.jp/             
Twitterアカウント                 : @gushwell                             
─────────────────────────────────────
