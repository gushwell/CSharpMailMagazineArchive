■━ [C#プログラミングレッスン] ━━━━━━━━━━━━━━━ No.339 ━□

「シリアライズ編」-- シリアル化とは
                                                            by Gushwell  
□━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━■

みなさん、おはようございます。
本日から、「シリアライズ編」の連載開始です。

■□───────────────────────────────────
■□ シリアル化とは

シリアル化とは、オブジェクトの状態を永続化したり、ネットワーク越しに転送
したりできる形式に変換することです。あるいは、シリアライズと言います。

シリアル化したデータを元のオブジェクトに戻す変換のことを逆シリアル化（デ
シリアライズ）と言います。

また、オブジェクトをシリアル化してファイルなどに記憶することを永続化と言
います。

このシリアル化と逆シリアル化を使うことで、オブジェクトをファイルに保管し
たり、ネットワークを通じ他のコンピュータに転送することが可能となります。

.NET Framework では、バイナリシリアル化とXMLシリアル化の２つのシリアル化
が用意されています。

■バイナリシリアル化
オブジェクトの内容をそのまま維持したい時に利用します、ファイル、メモリ、
ネットワーク上などにシリアル化したデータを出力します。この出力したデータ
を読み込み、逆シリアル化することで、オブジェクトを元のジョイ謡に復元する
ことができます。

■XMLシリアル化
バイナリシリアル化とは異なり、パブリック プロパティとパブリック フィール
ドのみがシリアル化されます。そのため、オブジェクトそのものを維持すること
はできあせん。
バイナリシリアル化は、シリアル化する側と、逆シリアル化する側が、両方とも.
NET Frameworkの環境である必要がありますが、XMLシリアル化は、そういった制約
はありません。Web経由でデータを受け渡す場合には、有効な手段となります。

なお、.NET Framework3.5以降では、JSON形式へのシリアル化も用意されています。

アプリケーションで、オブジェクトの内容を保存しておきたいという要求は良く
あることです。
アプリケーション終了時に、オブジェクトの状態を保存し、アプリケーションを
再度起動した時には、オブジェクトの状態を復元するシナリオを考えた場合、
.NET Frameworkのシリアル化のサポートなしに、この機能を実現することも可能
ですが、多数のオブジェクトを扱う場合や、フィールドの数が多い場合は、その
方法はとても煩雑です。.NET Frameworkのシリアル化のメカニズムを利用するこ
とでこの煩わしさから解放されます。
また、複数のアプリケーション間でデータをやり取りしたいといった場合もシリ
アル化のメカニズムが有効に機能します。

この連載では、以下の内容について、具体的なコードを示し説明してゆく予定で
す。

1. バイナリシリアル化と逆シリアル化
2. XMLシリアル化と逆シリアル化
3. 選択的シリアル化
4. 異なるバージョン間でのシリアル化
5. JSONシリアル化と逆シリアル化

※ すみません、今回は具体的なコードはなしです(^^;

─────────────────────────────────────
『C#プログラミングレッスン』  (ほぼ週刊）                                 
☆皆さまからの感想をお待ちしています。http://gushwell.ifdef.jp/mail.html  
─────────────────────────────────────
Published by Gushwell.                                                    
 Copyright (C) 2012 Gushwell All rights reserved.                        
 Microsoft MVP for Visual C#(Apr 2005 - Mar 2013)                        

■Gushwell's Page                                                         
facebook Page                     : http://www.facebook.com/CSharpLesson  
Gushwell's C# Dev Notes           : http://gushwell.ldblog.jp/            
Gushwell's C# Programming Page    : http://gushwell.ifdef.jp/             
Gushwellの読書ノート              : http://gushwell.jugem.jp/             
Twitterアカウント                 : @gushwell                             
─────────────────────────────────────
