
■━ [C#プログラミングレッスン] ━━━━━━━━━━━━━━━ No.341 ━□

「シリアライズ編」-- バイナリシリアル化(2)
                                                            by Gushwell  
□━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━■

■□───────────────────────────────────
■□ Serializableオブジェクトを継承した場合

先週は、バイナリシリアル化の基本的なコードをお見せしましたが、MyObjectを継
承した 以下のようなMyObject2 ではどうでしょうか。

 public class MyObject2 : MyObject {
     public double d2 = 0.0;
 }

シリアル化するコードは、MyObject2のインスタンスを生成している以外は、先ほ
どと変わりはありません。

 MyObject2 obj = new MyObject2 {
     n1 = 10,
     n2 = 123,
     d1 = 987.6,
     str = "sample string",
     date = new DateTime(2012, 9, 10),
 };
 IFormatter formatter = new BinaryFormatter();
 using (Stream stream = new FileStream("TestFile.dat", FileMode.Create, 
                                                       FileAccess.Write)) {
     formatter.Serialize(stream, obj);
 }

しかし、コンパイルは通りますが、実行時に例外が発生してしまいます。

  型 'Serialization.MyObject2' はシリアル化可能として設定されていません。

この例外を回避し、シリアル化を可能にするには、以下のように、MyObject2にも
Serializable属性を付ける必要があります。


 [Serializable]
 public class MyObject2 : MyObject {
     public double d2 = 0.0;
 }


■□───────────────────────────────────
■□ 選択的シリアル化

クラスのフィールドにはシリアル化できない（しても意味のない）フィールドが
存在する場合があります。
例えば、Stream型のオブジェクトや、スレッドID,データベースへのコネクション
オブジェクトなどは、逆シリアル化した時には、すでに使えない状態になってい
る可能性があります。
そのようなフィールドは、 [NonSerialized] 属性を付加して、フィールドがシリ
アル化されないようにすることができます。

 [Serializable]
 public class MyObject {
     public int n1 = 0;
     public int n2 = 0;
     [NonSerialized] 
     public double d1 = 0.0;
     public String str = null;
     [NonSerialized] 
     public DateTime date;
 }


この例では、d1 と date がシリアル化の対象から除外されます。


■□───────────────────────────────────
■□ 配列、コレクションのシリアル化

なお、ここでは示しませんでしたが、フィールドが配列やコレクションであって
も、[Serializable]属性が付加されていれば、そのフィールドは正しくシリアル
化されることになります。

例えば、ArrayクラスやList<T>ジェネリッククラスには、Serializable属性が付
加されていますので、以下のようなMyObjectクラスも正しくシリアル化されるこ
とになります。

 [Serializable]
 public class MyObject {
     public int n1 = 0;
     public string[] items;
     public MyChildObject child;
 }

 [Serializable]
 public class MyChildObject {
     public double d1 = 0.0;
     public List<int> nums;
 }


==========================================================================
■ Gushwellの書籍

『C#プログラミング入門』
 http://www.amazon.co.jp/exec/obidos/ASIN/4777515982/gaius-22/

 目次は、こちらで確認できます。
 http://www.kohgakusha.co.jp/books/detail/978-4-7775-1598-1


─────────────────────────────────────
『C#プログラミングレッスン』  (ほぼ週刊）                                 
☆皆さまからの感想をお待ちしています。http://gushwell.ifdef.jp/mail.html  
─────────────────────────────────────
Published by Gushwell.                                                    
 Copyright (C) 2012 Gushwell All rights reserved.                         
 Microsoft MVP for Visual C#(Apr 2005 - Mar 2013)                         
                                                                          
■Gushwell's Page                                                         
facebook Page                     : http://www.facebook.com/CSharpLesson  
Gushwell's C# Dev Notes           : http://gushwell.ldblog.jp/            
Gushwell's C# Programming Page    : http://gushwell.ifdef.jp/             
Gushwellの読書ノート              : http://gushwell.jugem.jp/             
Twitterアカウント                 : @gushwell                             
─────────────────────────────────────


