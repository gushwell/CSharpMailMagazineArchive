
■━ [C#プログラミングレッスン] ━━━━━━━━━━━━━━━ No.345 ━□

「シリアライズ編」-- XMLシリアル化(2)
                                                           by Gushwell  
□━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━■


■□───────────────────────────────────
■□ privateフィールドの扱い。

前回のXMLシリアル化の説明では、すべてのフィールドがpublicなクラスを例に
取りましたが、private フィールドはどうなるのでしょうか。
以下のクラスで試してみます。

 public class MyObject {
     public int n1 = 0;
     public int n2 = 0;
     private int n3 = 0;  // ※ 非公開
     public void SetPrivateVar(int x) {
         n3 = x;
     }
     public void PrintPrivateVar() {
         Console.WriteLine("n3 = {0}", n3);
     }
 }

フィールド n3 は、privateになっています。これをシリアル化してみます。

 MyObject obj = new MyObject {
     n1 = 10,
     n2 = 123,
 };
 obj.SetPrivateVar(67);
 XmlSerializer serializer = new XmlSerializer(typeof(MyObject));
 using (Stream stream = new FileStream("sample.xml", FileMode.Create,
                                                      FileAccess.Write)) {
     serializer.Serialize(stream, obj);
 }

このコードを実行すると、sample.xmlは、次のようになります。


 <?xml version="1.0"?>
 <MyObject xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
           xmlns:xsd="http://www.w3.org/2001/XMLSchema">
   <n1>10</n1>
   <n2>123</n2>
 </MyObject>

n3は出力されていません。つまり、バイナリシリアル化と異なり、XMLシリアル化で
は、private変数は、シリアル化の対象にはならないということです。
proteced変数も同様にシリアル化の対象にはなりません。

実際に逆シリアル化してみると以下のようになります。

 XmlSerializer serializer = new XmlSerializer(typeof(MyObject));
 MyObject obj = null;
 using (Stream stream = new FileStream("sample.xml", FileMode.Open, 
                                                      FileAccess.Read)) {
     obj = (MyObject)serializer.Deserialize(stream);
 }
 Console.WriteLine("n1 = {0}", obj.n1);
 Console.WriteLine("n2 = {0}", obj.n2);
 obj.PrintPrivateVar();

結果です。

 n1 = 10
 n2 = 123
 n3 = 0

XMLファイルに無い値は、規定値が設定されます。


■□───────────────────────────────────
■□ プロパティのシリアル化

では、publicなプロパティは、どういう扱いになるのでしょうか。
これも試してみましょう。

 public class MyObject {
     public int n1 = 0;
     public int n2 = 0;
     private int n3 = 0;
     public int N3 {
         get { return n3; }
         set { n3 = value; }
     }
 }
 ...

 MyObject obj = new MyObject {
     n1 = 10,
     n2 = 123,
     N3 = 456,

 };
 XmlSerializer serializer = new XmlSerializer(typeof(MyObject));
 using (Stream stream = new FileStream("sample.xml", FileMode.Create,
                                                      FileAccess.Write)) {
     serializer.Serialize(stream, obj);
 }

出力される XMLは次の通りです。

 <?xml version="1.0"?>
 <MyObject xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
           xmlns:xsd="http://www.w3.org/2001/XMLSchema">
   <n1>10</n1>
   <n2>123</n2>
   <N3>456</N3>
 </MyObject>

publicなプロパティは、シリアル化の対象となることが確認できました。
 
なお、バイナリシリアル化と同様、配列やコレクションあるいは、独自に定義し
たクラスをフィールドとして持っているクラスも、シリアル化が可能です。
ただし、シリアル化対象となるのは、publicフィールド、publicプロパティのみ
となります。

─────────────────────────────────────
『C#プログラミングレッスン』  (ほぼ週刊）                                 
☆皆さまからの感想をお待ちしています。http://gushwell.ifdef.jp/mail.html  
─────────────────────────────────────
Published by Gushwell.                                                    
Copyright (C) 2012 Gushwell All rights reserved.                          
Microsoft MVP for Visual C#(Apr 2005 - Mar 2013)                          
                                                                          
■Gushwell's Page                                                         
facebook Page                     : http://www.facebook.com/CSharpLesson  
Gushwell's C# Dev Notes           : http://gushwell.ldblog.jp/            
Gushwell's C# Programming Page    : http://gushwell.ifdef.jp/             
Gushwellの読書ノート              : http://gushwell.jugem.jp/             
Twitterアカウント                 : @gushwell                             
─────────────────────────────────────
