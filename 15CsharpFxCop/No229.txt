■━ [C#プログラミングレッスン] ━━━━━━━━━━━━━ No.229 ━□
  
 「FxCopに学ぶ編」 -- CA1002: Do not expose generic lists (前編)
                                                         by Gushwell  
□━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━■


■□─────────────────────────────────
■□ CA1002: Do not expose generic lists

FxCopには、 "Do not expose generic lists" (ジェネリックリストを公開し
しないでください）というルールがあります。
なぜ、ジェネリックリストを公開してはいけないのでしょうか。今回は、この
理由を具体的例を示しながら考えてみたいと思います。

あなたは、以下のようなクラスを作り、他の開発者に公開していたとします。
このクラスでは、Albumsプロパティとしてジェネリックリストを公開していま
す。

 public class Singer {
     private List<string> albums = new List<string>();
     public List<string> Albums {
         get { return albums; }
     }
     ...
 }

しばらくしてから、開発者から、Albumsリストにアルバムが追加されたことを
Singerクラス内で補足し、AlbumAdded イベント発行するように、機能を追加
してほしいと依頼されました。
以下のようなクラスにしてほしいのだそうです。

 public class Singer {
     private List<string> albums = new List<string>();
     public List<string> Albums {
         get { return albums; }
     }

     public event EventHandler AlbumAdded;

     ...
 }

ただし、既存のインターフェースは変えないでほしいと。
つまり、

 Singer singer = new Singer();
 singer.Album.Add("ABC");

というコードは書きなおしたくないとのだそうです。まあこれは当然の要求
ですね。

あなたは、いろいろ考えましたが良い案が思い浮かびません。
下記のようなコードにし、AlbumListの中で、追加を捕捉できれば解決できそう
なのですが...

 public class Singer {
     private AlbumList albums = new AlbumList();
     public List<string> Albums {    // ここは、List<string>のまま
         get { return albums; }
     }

     public event EventHandler AlbumAdded;

     ...
 }

List<string>を継承しAlbumListクラスで機能を拡張しようとしましたが、
List<T>は、仮想メソッドを用意していないので、拡張することができません。

結局、AddAlbumというメソッドを追加することで対応しました。

 public class Singer {
     private AlbumList albums = new AlbumList();
     public List<string> Albums {    // ここは、List<string>のまま
         get { return albums; }
     }
     public void AddAlbum(string name) {
         albums.Add(name);
         ... ここでイベントを発行
         if (AlbumAdded != null)
            AlbumAdded(this, e);
     }
     public event EventHandler AlbumAdded;

     ...
 }

このため、SingerクラスのAlbumsプロパティ

 singer.Album.Add("ABC");

という記述は、

 singer.AddAlbum("ABC");

のように変更してもらうことになってしまいました。
なぜこのようなことになってしまったのか、それは、List<T>をプロパティと
して公開してしまったことが原因です。
はじめから AddAlbumというメソッドを用意しておけばよかったと思うかもし
れませんが、どんな要求が来るかなんて予想できませんので、
DeleteAlbum(), FindAlbum() などいろんなメソッドをあらかじめ用意しなく
てはならなくなります。これは非現実的です。

(次回に続く）

■ 参照MSDNページ
  CA1002: ジェネリック リストを公開しません （しないでください）
  http://msdn.microsoft.com/ja-jp/library/ms182142.aspx


───────────────────────────────────
『C#プログラミングレッスン』  (ぼぼ週刊）
───────────────────────────────────
 Published by Gushwell.
  Copyright (C) 2004-2009 Gushwell All rights reserved.
  Microsoft MVP - Visual C#(Apr 2005 - Mar 2010)

 <<■ Gushwell's Page ■>>
 窓際プログラマ─の独り言  ：http://gushwell.ldblog.jp/
 窓際プログラマ─の読書三昧：http://gushwell.jugem.jp/
 Gushwell's F# Programming Diary : http://techbank.jp/gushwell/
 Gushwell's C# Programming Page  ：http://gushwell.ifdef.jp/
  C#デザインパタ─ン : http://gushwell.ifdef.jp/dp/csdpindex.html

 ☆メールマガジンの感想お待ちしています☆
  http://gushwell.ifdef.jp/mail.html

 <<■ コミュニティtechbank.jp (http://techbank.jp/Community/) ■>>
 Gushwellが参加している技術系コミュニティです。
 マイクロソフト系テクノロジー＆製品に特化したコミュニティで、Webサイト
 では、VB、C#、VC++、SQL Server, BizTalk Server などの技術情報を公開し
 ています。皆さんの参加をお待ちしています。
 ブロガーさんも募集中です。
───────────────────────────────────

