■━ [C#プログラミングレッスン] ━━━━━━━━━━━━━ No.233 ━□

 「FxCopに学ぶ編」-- CA2227: Collection properties should be read only

                                                        by Gushwell
□━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━■

■□─────────────────────────────────
■□ CA2227: Collection properties should be read only


以下のように、コレクションクラスを書き込み可能なプロパティとして公開し
てはいけません。

 public class Sample {
    private List<string> list = new List<string>();
    public Sample() {
        list.Add("C#");
        list.Add("VB");
        list.Add("C++");
    }
    public List<string> List {
        get { return list; }
        set { list = value; }   // 書き込み可能
    }
 }

コレクションクラスを、書き込み可能なプロパティとして公開してしまうと、
以下のようなコードが書けてしまいます。

 Sample s = new Sample();
 s.List = new List<string> {
    "Ruby", "Python", "Perl"
 };
 foreach (var x in s.List)
    Console.WriteLine(x);

Sampleクラスの外側で、Listの内容が置き換わることは、たぶんライブラリ側
にとって望ましくないことです。

たとえば、Sampleクラス内で、listコレクションから得られるなんらかの情報
をprivateフィールドにキャッシュしていたとします。
しかし、上記のように

 s.List = new List<string> {
    "Ruby", "Python", "Perl"
 };

とListを変更されてしまうと、listの内容と、キャッシュの内容が食い違って
しまうことになり、動作がおかしくなる可能性があります。
まあ、プロパティのsetterの中でキャッシュ更新の処理を書けば対応できますが、

 s.List = new List<string> {
    "Ruby", "Python", "Perl"
 };

というコードを許してしまうと、一部を置き換えたいのか、全部を置き換えた
いのか、それともクリアしたいのかというWhat ではなく、Howをコーディング
することになってしまいます。
情報隠蔽の原則を壊しているインターフェースと言えると思います。

そのため、FxCopのルールでは、Clear, AddRangeメソッドなどを用意すること
を推奨しています。

 public class Sample {
    private List<string> list = new List<string>();
    public Sample() {
        list.Add("C#");
        list.Add("VB");
        list.Add("C++");
    }
    public List<string> List {
        get { return list; }
    }
    public void Clear() {
        list.Clear();
    }
    public void AddRange(string[] items) {
        list.AddRange(items);
    }
 }

なお、このコードは、No229で説明した 「CA1002: ジェネリック リストを公
開しません」のルールに抵触しますので、その対応もする必要があります。


■ 参照MSDNページ
 CA2227: プロパティは読み取り専用でなければなりません
 http://msdn.microsoft.com/ja-jp/library/ms182331.aspx

───────────────────────────────────
『C#プログラミングレッスン』  (ぼぼ週刊）
───────────────────────────────────
 Published by Gushwell.
 Copyright (C) 2004-2009 Gushwell All rights reserved.
 Microsoft MVP - Visual C#(Apr 2005 - Mar 2010)

 <<■ Gushwell's Page ■>>
 窓際プログラマ─の独り言  ：http://gushwell.ldblog.jp/
 窓際プログラマ─の読書三昧：http://gushwell.jugem.jp/
 Gushwell's F# Programming Diary : http://techbank.jp/gushwell/
 Gushwell's C# Programming Page  ：http://gushwell.ifdef.jp/
 C#デザインパタ─ン : http://gushwell.ifdef.jp/dp/csdpindex.html

 ☆メールマガジンの感想お待ちしています☆
 http://gushwell.ifdef.jp/mail.html

 <<■ コミュニティtechbank.jp (http://techbank.jp/Community/) ■>>
 Gushwellが参加している技術系コミュニティです。
 マイクロソフト系テクノロジー＆製品に特化したコミュニティで、Webサイト
 では、VB、C#、VC++、SQL Server, BizTalk Server などの技術情報を公開し
 ています。皆さんの参加をお待ちしています。
 ブロガーさんも募集中です。
───────────────────────────────────
