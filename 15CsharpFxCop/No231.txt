■━ [C#プログラミングレッスン] ━━━━━━━━━━━━━ No.231 ━□
  
 「FxCopに学ぶ編」 --   CA1819: Properties should not return arrays
                                                         by Gushwell  
□━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━■


■□─────────────────────────────────
■□ CA1819: Properties should not return arrays

読み取り専用の配列を返したいために、以下のようなプロパティを作成しまし
た。

 public class Sample {
     private int[] nums;

     public Sample() {
         this.nums = new int[] { 1, 2, 3, 4, 5, 6, 7, 8, 9 }
     }

     public int[] Numbers {    // 配列を返すプロパティ
         get {
             return this.nums;
         }
     }
 }

しかし、これでは配列の要素を保護することはできません。
たとえば、

  Sample obj = new Sample();
  obj.Numbers[0] = 1;

というコードを許してしまいます。
もしかしたら、これはSampleクラス作成者の意図に反した使い方かもしれませ
ん。Sampleクラスは予期しない個所で、private な配列 numsの要素を書き換
えられることになってしまいますから、通常は好ましくありません。
Sampleオブジェクト内部の不整合がおこる可能性があります。

そこで、以下のように、配列の複写を返すように変更しました。

 public int[] Numbers {
     get {
         int[] array = new int[this.nums.Length];
         for (int i = 0; i < array.Length; i++) {
             array[i] = nums[i];
         }
         return array;
     }
 }


 ※ get の中は、return (int[])nums.Clone(); で済んでしまうの
    ですが、説明の都合上、自分の要素を一つ一つコピーしています。

こうすることで、

  Sample obj = new Sample();
  obj.Numbers[0] = 1;

というコードを書かれても、複製に対して変更を行っているために、Sampleク
ラスオブジェクトに影響を与えることはありません。

しかし、これはこれで問題があります。
それは、多くの開発者は、プロパティの取得はフィールドへのアクセス同様に、
コストがほとんどかからないという認識があるということです。そのため、次
のようなコードを何の疑問を持たずに書くことになります。

 Sample obj = new Sample();
 for (int i = 0; i < obj.Numbers.Length; i++) {
     // ループの中でNumbersプロパティを参照
     Console.WriteLine(obj.Numbers[i]);
  }

しかし、このコードは、パフォーマンス的にはとても不利なコードとなってし
まいます。実際、

 public int[] Numbers {
     get {
         int[] array = new int[this.nums.Length];
         for (int i = 0; i < array.Length; i++) {
             Console.WriteLine(i);
             array[i] = nums[i];
         }
         return array;
     }
 }

とデバッグ行を入れて実行してもらえれば、それがわかると思います。

これを回避するもっとも簡単な方法は、

 public int[] GetNumbers() {
     int[] array = new int[this.nums.Length];
     for (int i = 0; i < array.Length; i++)
         array[i] = nums[i];
     return array;
 }

とメソッドにする方法です。こうすることで、コストがかかることを利用者に
意識させることができます。よほどの初心者でもない限り、以下のようなコー
ドは書かないと思います。

 for (int i = 0; i < obj.GetNumbers().Length; i++) {
     int[] nums = obj.GetNumbers();
     Console.WriteLine(nums[i]);
 }

ふつうは、

 int[] nums = obj.GetNumbers();
 for (int i = 0; i < nums.Length; i++) {
     Console.WriteLine(nums[i]);
 }

と書くでしょう。こうすれば、パフォーマンスの影響はありません。

もう一つの方法は、

 public IEnumerable<int> Numbers {
     get { return nums; }
 }

と IEnumerable<int>を返すようにすることです。
インデックスを指定したアクセスはできなくなりますが、要素を書き換えられ
る心配はなくなります。

 foreach (var n in  obj.Numbers) {
      Console.WriteLine(n);
 }

とforeachを使ってアクセスできます。また、LINQ to Objectを使ったアクセ
スも可能です。


■ 参照MSDNページ
  CA1819: プロパティで配列を返さないでください
  http://msdn.microsoft.com/ja-jp/library/0fss9skc.aspx

───────────────────────────────────
『C#プログラミングレッスン』  (ぼぼ週刊）
───────────────────────────────────
 Published by Gushwell.
  Copyright (C) 2004-2009 Gushwell All rights reserved.
  Microsoft MVP - Visual C#(Apr 2005 - Mar 2010)

 <<■ Gushwell's Page ■>>
 窓際プログラマ─の独り言  ：http://gushwell.ldblog.jp/
 窓際プログラマ─の読書三昧：http://gushwell.jugem.jp/
 Gushwell's F# Programming Diary : http://techbank.jp/gushwell/
 Gushwell's C# Programming Page  ：http://gushwell.ifdef.jp/
  C#デザインパタ─ン : http://gushwell.ifdef.jp/dp/csdpindex.html

 ☆メールマガジンの感想お待ちしています☆
  http://gushwell.ifdef.jp/mail.html

 <<■ コミュニティtechbank.jp (http://techbank.jp/Community/) ■>>
 Gushwellが参加している技術系コミュニティです。
 マイクロソフト系テクノロジー＆製品に特化したコミュニティで、Webサイト
 では、VB、C#、VC++、SQL Server, BizTalk Server などの技術情報を公開し
 ています。皆さんの参加をお待ちしています。
 ブロガーさんも募集中です。
───────────────────────────────────
