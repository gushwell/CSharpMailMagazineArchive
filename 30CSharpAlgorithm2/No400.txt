■━ [C#プログラミングレッスン] ━━━━━━━━━━━━━━━ No.400 ━□

「続・アルゴリズム編」-- マージ処理
                                                          by Gushwell
□━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━■


購読者のみなさん、おはようございます。
このメールマガジンも、今回で第400号を迎えることができました。＼(^o^)／
いやー、頑張りました(笑）
さすがに感慨深いものがありますね。これも購読してくれている皆さんのおかげだ
と感謝しています。


それでは、前回の予告通り、マージ処理の問題を解いていこうと思います。

■□───────────────────────────────────
■□ 問題 （マージ）

2つのソートされた配列A、Bがあります。Aの配列には十分な空きがあり、後ろにBを
追加することができます。
このとき、BをAにソートされた状態でマージするメソッドを書いてください。

 出展：『世界で闘うプログラミング力を鍛える150問』
 http://www.amazon.co.jp/exec/obidos/ASIN/4839942390/gaius-22/


■□───────────────────────────────────
■□ 方針を決める。

まず直ぐに頭に思い浮かんだのは、配列Aと配列Bについて先頭から見ていって、Bが
小さければ、配列Aの中身を、一文字後ろにずらしてから、Bの値を配列Aにセットす
るというやり方。
でも、これって、配列Aの中身を１文字後ろにずらすという処理を何回も（最悪はB
の要素数の数だけ）やる必要がでてきます。これは効率が悪そうです。

それならば、配列Aには後ろに十分な空き領域があるのですから最初に、Bの要素数
分後ろにずらしてから、配列Aと配列Bの併合処理をすれば効率的です。

これは、結局、配列Aと配列Bを配列Cにマージするやり方と同じですね。

■□───────────────────────────────────
■□ 下位メソッドから実装する

方針はこれで決まりましたから、コードを書いていきます。
まずは、配列Aを後ろにずらす処理です。

 private static int MoveToBottom(int[] a, int actualCount) {
     int i = actualCount - 1;
     int j = a.Length - 1;
     while (i >= 0) {
         a[j--] = a[i--];
     }
     return j + 1;
 }

配列Aの実際の要素数は、A.Lengthでは求められないので、実際の要素数を求まりま
せんから、actualCount という引き数を渡してもらうことにします。
移動は、実際の要素が入っている最後尾の要素からインデックスをひとつずつ減ら
しながら移動をしています。
そうすると、移動後の先頭要素のインデックスを求めることが簡単になります。

なお、Bの要素数だけを後ろにずらすというやり方もありますが、ここでは、Bの要
素数に依存しないように、配列Aだけの情報をつかって後ろにずらすようにしていま
す。



■□───────────────────────────────────
■□ 上位メソッドを実装する

MoveToBottomが出来上がったので、後は、AとBをマージさせるだけです。

  public static void Merge(int[] a, int actualCount, int[] b) {
      int i = 0;
      int ax = MoveToBottom(a, actualCount); ;
      int bx = 0;
      while (ax < a.Length && bx < b.Length) {
          if (a[ax] < b[bx]) {
              a[i++] = a[ax++];
          } else {
              a[i++] = b[bx++];
          }
      }
      if (ax < a.Length) {
          while (ax < a.Length)
              a[i++] = a[ax++];
      } else {
          while (bx < b.Length)
              a[i++] = b[bx++];
      }
  }

僕は、このように下位メソッドから実装するというやり方をよく採ります。
部品を最初に用意し、後から、部品を組み合わせて目的を達するコードを作成しま
す。このほうが、一度に考えることが少なくて済むので、僕の頭にはあっている感
じです。


■□───────────────────────────────────
■□ 制約を無くした場合を考える。

さて、これで問題の趣旨どおりに動作するようになりましたが、こういった問題は、
アルゴリズムを考える訓練として役立つということであって、実際のC#プログラミ
ングではこういったコードを書くことはまずないでしょう。

実際には新たな配列の領域を確保し、そこに結果をマージしていくのが普通だと思
います。そもそも「Aの配列には十分な空きがあり」という前提が普通は成り立ちま
せん。

僕が普通だと思うコードを書いてみました。

  public static int[] Merge(int[] a, int[] b) {
      int ax = 0;
      int bx = 0;
      int cx = 0;
      int[] c = new int[a.Length + b.Length];
      while (ax < a.Length && bx < b.Length) {
          if (a[ax] < b[bx]) {
              c[cx++] = a[ax++];
          } else {
              c[cx++] = b[bx++];
          }
      }
      if (ax < a.Length) {
          while (ax < a.Length)
              c[cx++] = a[ax++];
      } else {
          while (bx < b.Length)
              c[cx++] = b[bx++];
      }
      return c;
  }


次のようなコードも考えられます。僕はたとえコードが長くなっても上のコードを
支持しますが、まあこれは好き嫌いの範疇かなと思います。

 public static int[] Merge(int[] a, int[] b) {
     int ax = 0;
     int bx = 0;
     int cx = 0;
     int[] c = new int[a.Length + b.Length];
     while (ax < a.Length || bx < b.Length) {
         if (ax >= a.Length)
             c[cx++] = b[bx++];
         else if (bx < b.Length && a[ax] < b[bx]) {
             c[cx++] = a[ax++];
         } else {
             c[cx++] = b[bx++];
         }
     }
     return c;
 }


─────────────────────────────────────
『C#プログラミングレッスン』  (ほぼ週刊）
☆皆さまからの感想をお待ちしています。http://gushwell.ifdef.jp/mail.html
─────────────────────────────────────
Published by Gushwell.
Copyright (C) 2014 Gushwell All rights reserved.
Microsoft MVP for Visual C#(Apr 2005 - Mar 2015)

■Gushwell's Page
facebook Page                     : http://www.facebook.com/CSharpLesson
Gushwell's C# Dev Notes           : http://gushwell.ldblog.jp/
Gushwell's C# Programming Page    : http://gushwell.ifdef.jp/
気ままな読書ノート                : http://gwbooks.hatenablog.com/
Twitterアカウント                 : @gushwell
─────────────────────────────────────