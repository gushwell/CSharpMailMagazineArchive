■━ [C#プログラミングレッスン] ━━━━━━━━━━━━━━━ No.402 ━□

「続・アルゴリズム編」-- 再帰(1)
                                                          by Gushwell
□━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━■

今回は、再帰処理の問題です。

■□───────────────────────────────────
■□ 問題 （再帰）

子供がN段の階段を駆け上がりますが、一歩で1段、2段、もしくは3段登ることがで
きます。このとき、考え得る階段の上り方が何通りあるかを求めるメソッドを実装
してください。

 出展：『世界で闘うプログラミング力を鍛える150問』
 http://www.amazon.co.jp/exec/obidos/ASIN/4839942390/gaius-22/


■□───────────────────────────────────
■□ 具体的な例で問題を考える。

今回も、具体的な例（N=1,2,3,4,...）で考えて見ましょう。

N=1のとき
これは、１歩で上るだけなので、1通りですね。

N=2のとき
1段ずつ登るのと、2段いっぺんに登る2通りがあります。
これを[1,1], [2]と表しましょう。

N=3のときは、
[1,1,1][1,2][2,1][3]の4通り

N=4のときは
最初の１歩で３段登ったときは、
 [3,1] の1通り。
最初の１歩で２段登ったときは、
 [2,1,1][2,2]の２通り。
最初の１歩で１段登ったときは、
 [1,1,1,1][1,1,2][1,2,1][1,3]の４通り
となって、
全部で、７通りになります。
このN=4のときを良く眺めてみましょう。
これって、N=1の場合、N=2の場合、N=3の場合の数を足したものですよね。

つまり、何通りあるかを求める関数を f(N)と表せば、

f(1) = 1
f(2) = 2
f(3) = 4
f(4) = f(3) + f(2) + f(1) = 1 + 2 + 4 = 7

となります。
じゃあ f(5)のときはどうでしょう。
これも、N=4のときと同様に考えて見ます。

最初の１歩で３段登ったときは、
 あと残りは２段なので、f(2)の2通り。
最初の１歩で２段登ったときは、
 残りの段数は3段なので、f(3)の4通り。
最初の１歩で１段登ったときは、
 残りの段数は4段なので、f(4)の7通り。

で、f(2) + f(3) + f(4)となります。
ここまでくれば、一般解が分かりますね。

 f(N) = f(N-1) + f(N-2) + f(N-3)

と表せます。ただし、

f(1)=1
f(2)=2
f(3)=4

です。


■□───────────────────────────────────
■□ 実装する。

ここまでくればコードに落とせますね。

 static int Stepup1(int n) {
     if (n <= 1)
         return 1;
     if (n == 2)
         return 2;
     if (n == 3)
         return 4;
     return Stepup1(n - 1) + Stepup1(n - 2) + Stepup1(n - 3);
 }


■□───────────────────────────────────
■□ コードを改良する。

でも、ifが3つもあるのは、なんかイヤです。美しくない。
ということで、f(3)の時をもう少し分解してみます。

最初の１歩で３段登ったときは、
 ゴールなので、[3]の１通り。これを f(0)とする。
最初の１歩で２段登ったときは、
 残りの段数は1段なので、f(1)で、[2,1]の１通り。
最初の１歩で１段登ったときは、
 残りの段数は２段なので、f(2)の2通り。

となり、全部で４通りになります。

f(3) = f(0) + f(1) + f(2)

で、f(0)は１通りと数えれば、４が求まりますね。

では、f(2)の時も分解してみます。
最初の１歩で３段登ったときは、
 これは、ありえないので、0通り。これを f(-1)とする。
最初の１歩で２段登ったときは、
 残りの段数は0段なので、f(0)の１通り。
最初の１歩で１段登ったときは、
 残りの段数は1段なので、f(1)の2通り。

つまり、f(-1)は、0とすれば、以下の式が成り立ちます。

f(2) = f(-1) + f(0) + f(1)

f(1)も同様に、f(-2)を  0とすれば、以下の式が成り立ちます。

f(1)=f(-2)+f(-1)+f(0)=1

つまり、

 f(N) = f(N-1)+f(N-2)+f(N-3)
 ただし、
    N<0 のときは、0
    N=1 のときは、1

となります。これをコードに落としたのが以下のコードです。

       static int Stepup2(int n) {
           if (n < 0)
               return 0;
           if (n == 0)
               return 1;
           return Stepup2(n - 1) + Stepup2(n - 2) + Stepup2(n - 3);
       }

先ほどよりは、すっきりしたコードになりました。if がひとつ減っただけと言われ
れば何も言えないですが...


プログラムって手続きを書くものだという固定概念があると、この再帰処理のコー
ドをみても、理解が追いつかないかもしれませんね。ある程度慣れが必要だと思い
ます。
ただ、理解してほしいのは、再帰的な定義をそのまま書いたようなコードであっても、
実際には、Stepup メソッドが何回も何回も呼び出されることで、処理を行っている
ということです。
いまいちピンとこないという方は、Visual Studioでステップインを繰り返してこの
コードがどう動いているのかを根気よく追いかけるなどして、理解を深めると良い
と思います。

実際、僕も最初に再帰処理に出会ったときは、さっぱり分かりませんでした。
当時は、デバッグ環境も貧弱でステップ実行なんて機能はありませんでしたし、周
りには誰も教えてくれる人もいませんでしたので、紙と鉛筆を使い、変数とスタッ
クの状態の変化を根気よく調べるということをやりました。
頭の回転が遅い僕は、それでやっと理解できた記憶があります。


■□───────────────────────────────────
■□ ２つのメソッドの結果を比較してみる。

話がそれました。では、実行してみましょう。

   static void Main(string[] args) {

       for (int n = 1; n < 10; n++) {
           int ans = Stepup1(n);
           Console.WriteLine("N={0} -> {1}", n, ans);
       }
       for (int n = 1; n < 10; n++) {
           int ans = Stepup2(n);
           Console.WriteLine("N={0} -> {1}", n, ans);
       }
       Console.ReadLine();
   }

以下、実行結果です。
上に示した２つのメソッドともに、同じ結果を表示しました。

   N=1 -> 1
   N=2 -> 2
   N=3 -> 4
   N=4 -> 7
   N=5 -> 13
   N=6 -> 24
   N=7 -> 44
   N=8 -> 81
   N=9 -> 149
   N=1 -> 1
   N=2 -> 2
   N=3 -> 4
   N=4 -> 7
   N=5 -> 13
   N=6 -> 24
   N=7 -> 44
   N=8 -> 81
   N=9 -> 149

--------------------------------------------------------------------------

再帰処理のコード、理解していただけたでしょうか？
再帰処理を書いたことがなむ、手続き型のループ処理に馴染んでいる方は、なかな
か、理解するのは大変かもしれませんが、再帰処理のコードが書けるようになると、
一気にプログラミングの幅が広がります。
再帰処理は苦手だという方は、僕のブログ記事

 「C#プログラマーのための再帰処理・超入門 」
  http://gushwell.ldblog.jp/archives/52169579.html

も併せてお読みいただけると理解が深まると思います。

次回も再帰処理の問題を取り上げる予定です。

─────────────────────────────────────
『C#プログラミングレッスン』  (ほぼ週刊）
☆皆さまからの感想をお待ちしています。http://gushwell.ifdef.jp/mail.html
─────────────────────────────────────
Published by Gushwell.
Copyright (C) 2014 Gushwell All rights reserved.
Microsoft MVP for Visual C#(Apr 2005 - Mar 2015)

■Gushwell's Page
facebook Page                     : http://www.facebook.com/CSharpLesson
Gushwell's C# Dev Notes           : http://gushwell.ldblog.jp/
Gushwell's C# Programming Page    : http://gushwell.ifdef.jp/
気ままな読書ノート                : http://gwbooks.hatenablog.com/
Twitterアカウント                 : @gushwell
─────────────────────────────────────
