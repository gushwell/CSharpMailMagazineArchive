■━ [C#プログラミングレッスン] ━━━━━━━━━━━━━━━ No.401 ━□

「続・アルゴリズム編」-- 算術
                                                          by Gushwell
□━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━■

みなさん、おはようございます。
このところ猛暑が続いていて、すでに夏バテ気味のGushwellですが、みなさん
いかがお過ごしでしょうか？

今回は、ちょと趣向を変えた問題にチャレンジします。
ただ、これまでと変わらないのは、「具体的な例で考える」という姿勢です。
「具体的な例で考える」ことで、それまで見えなかったものが見えてきますし、あ
とから、「あれ、このケースが抜けていた！」なんていう「見落としも無くなって
くると思います。


■□───────────────────────────────────
■□ 問題 （算術）


加算演算子だけを用いて、整数値の乗算、減算、除算を行うメソッドを実装してく
ださい。

 出展：『世界で闘うプログラミング力を鍛える150問』
 http://www.amazon.co.jp/exec/obidos/ASIN/4839942390/gaius-22/



■□───────────────────────────────────
■□ 準備 符号を反転させる。

まず、減算 x - y について考えて見ましょう。

 x - y = x + (-y) 

ですから、y の符号を反転できれば、減算を行うことができますね。
-1 を掛ければ、符合を反転できるのですが、* 演算子が使えないので、別の方法を
考えなければなりません。
ということで、減算の実装の前に、整数 num の符号を反転する方法を考えたいと思
います。

以下のような方法で符号の実現できますね。

numが、-n ならば、+1 を n回足す。
numが、+n ならば、-1 を n回足す。

では、n回という判断をどうやるかについて考えます。もし、numが正数ならば、
num に -1 をループの度に加えていって num が 0 になるまで繰り返せばよいです
ね。

一方、numが負数ならば、num に +1 をループの度に加えていって num が 0 になる
まで繰り返すことで実現できます。

つまり、最初に +1か -1 かを求めてしまえば、場合わけせずにひとつのループで
書くことができます。具体的には、以下のコードを見てください。

   static class IntExtenstions {
       public static int InvertSign(this int num) {
           int x = (num > 0) ? -1 : 1;
           int result = 0;
           while (num != 0) {
               result += x;
               num += x;
           }
           return result;
       }
   }

C#らしく、int の拡張メソッドとして、InvertSignメソッドを実装しています。
これで準備が整いました。

-1 の マイナス記号は、厳密には単項演算子ですが、これは利用できるものと
しています。本当に「演算子」が + だけしか使えないとすると、関係演算子や比較
演算子も使えないことになり、それだと問題を解くのが不可能になってしまいます
からね。


■□───────────────────────────────────
■□ 減算を実装する。

では、減算のコードです。先ほど書いたように、符号を反転させたものを加えれば
よいですね。

   static class IntExtenstions {
       ...
       public static int Subtract(this int x, int y) {
           return x + InvertSign(y);
       }
   }

これも、intの拡張メソッドとして実装します。



■□───────────────────────────────────
■□ 乗算を実装する。


乗算は、減算に比べるとすこし厄介です。具体的な例で考えて見ましょう。

2 * 3 
-2 * 3 
2 * -3 
-2 * -3 

この４つのパターンを網羅すればよいはずです。
この４つの掛け算を加算の式に変形させると次のように書けます。

2 * 3 = 2 + 2 + 2 
      = 6

-2 * 3 = -2 + -2 + -2 
       = -6;

2 * -3 = 2 * -1 * 3 
       = -2 * 3 
       = -2 + -2 + -2 
       = -6

-2 * -3 = -2 * -1 * 3 
        = 2 * 3 
        = 2 + 2 + 2 
        = 6

掛ける数の絶対値である3回繰り返すというのは、InvertSign でやったのと同じで
すから、x * y を計算する場合は、

yが正のときには、x を abs(y)の数だけ加算すれば求まります。一方、y が負のと
きには、xの符号を反転させてから、abs(y)の数だけ加算を繰り返せばOKですね。
これをC#のコードに落としたのが、以下の目メソッドです。

   static class IntExtenstions {
       ...
       public static int Multiple(this int x, int y) {
           int inc = (y > 0) ? -1 : 1;
           int result = 0;
           int m = (y >= 0) ? x : x.InvertSign();
           while (y != 0) {  // 必ず 0 になる。
               result += m;
               y += inc;
           }
           return result;
       }
   }


■□───────────────────────────────────
■□ 除算を実装する。

最後に割り算です。これも具体的な例で考えてみましょう。
乗算と同様に以下の４つのパターンに対応すればよいですね。

6 / 3
6 / -3
-6 / 3
-6 / -3

どのパターンも、6 / 3 を求め、その答えに対して、それぞれの符号をみて、
必要ならば符号を反転させれば良さそうです。

なので、やることは x / y を計算する場合は、x ,y の絶対値を求めることです。
絶対値を absx, absy とすれば、初期値ゼロの変数に、absy を足していき、その変
数が、absxを超えるまで繰り返します。このとき繰り返した回数から１を引いた値
が absx / absy の答えになります。

absxからabsyを引いてゆくというやり方もありますが、直接引き算はできないのが
ルールなので、そのつどSubtractメソッドを呼ぶ必要があり、効率的ではありませ
ん。

ここで求めた商は、正数どうしの割り算なので、最後に、x, y の符号を判断してど
ちらか一方が負数ならば、求めた商の符号を反転したものを答えとしています。

   static class IntExtenstions {
       ...
       public static int Divide(this int x, int y) {
           if (y == 0)
               throw new System.DivideByZeroException();
           int absx = (x >= 0) ? x : x.InvertSign();
           int absy = (y >= 0) ? y : y.InvertSign();
           int quotient = 0;    // quotient:商
           int prod = 0;        // product:積
           while (absx >= prod) {
               prod += absy;
               quotient++;
           }
           quotient = quotient.Subtract(1);
           return ((x < 0) && (y > 0)) || ((x > 0) && (y < 0)) 
               ? quotient.InvertSign() : quotient;
       }
   }

■□───────────────────────────────────
■□ IntExtenstionsの利用サンプル

最後に、このクラスを使ったサンプルコードをお見せします。

     Console.WriteLine((20 - 8) / 6 * -5);
     // 結果が上と同じになればOK.
     var n = 20.Subtract(8).Divide(6).Multiple(-5);
     Console.WriteLine(n);

--------------------------------------------------------------------------

次回は、再帰処理について考えていく予定です。
では、来週またお会いしましょう。

─────────────────────────────────────
『C#プログラミングレッスン』  (ほぼ週刊）
☆皆さまからの感想をお待ちしています。http://gushwell.ifdef.jp/mail.html
─────────────────────────────────────
Published by Gushwell.
Copyright (C) 2014 Gushwell All rights reserved.
Microsoft MVP for Visual C#(Apr 2005 - Mar 2015)

■Gushwell's Page
facebook Page                     : http://www.facebook.com/CSharpLesson
Gushwell's C# Dev Notes           : http://gushwell.ldblog.jp/
Gushwell's C# Programming Page    : http://gushwell.ifdef.jp/
気ままな読書ノート                : http://gwbooks.hatenablog.com/
Twitterアカウント                 : @gushwell
─────────────────────────────────────