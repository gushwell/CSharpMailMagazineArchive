■━ [C#プログラミングレッスン] ━━━━━━━━━━━━━━━ No.404 ━□

「続・アルゴリズム編」-- 木構造(1)
                                                          by Gushwell
□━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━■


■□───────────────────────────────────
■□ 問題 （木構造）

2分木が平衡がどうかを調べる関数を実装してください。平衡木とは、どのノードの
2つの部分木も、その高さの差が1以下であるような木であると定義します。

 出展：『世界で闘うプログラミング力を鍛える150問』
 http://www.amazon.co.jp/exec/obidos/ASIN/4839942390/gaius-22/


■□───────────────────────────────────
■□ 木構造を表すクラスを作る

木構造（ツリー構造とも言います）とは何かについての解説はここでは割愛します。
Wikipediaの以下のページを参照してください。
 http://ja.wikipedia.org/wiki/木構造_(データ構造)

まずは、問題を解く前に、２分木を表すクラスを定義する必要がありますね。

ちなみに、２分木とは、この木構造の一種で枝が高々２つに限定されているデータ
構造です。

この２分木の節にあたるノードを表すクラスはこんな感じですね。

 class TreeNode {
     public TreeNode Left { get; set ;}
     public TreeNode Right { get; set ;}
     public int Value { get; set; }
 }

TreeNodeクラスの中に、自分自身と同じ型の TreeNodeのプロパティを保有している
ことに注目してください。
また、このTreeNodeでは、int型の値をValueプロパティで保持するようにしていま
す。（あとでジェネリックにするつもりです）


通常、各ノードの値は、以下のような関係があります。

 左の子ノード値  ≦ 親ノードの値 ≦ 右の子ノードの値

しかし、ここの問題では、平衡がどうかを調べる機能だけを実装すればよいので、
上記制約は考慮しないこととします。

問題には、「平衡かどうかを調べる関数を実装してください」とあるので、
IsBalanceというメソッドを、TreeNode に加えれば、基本的なクラスのインターフ
ェースはよさそうです。

 class TreeNode {
     public TreeNode Left { get; set ;}
     public TreeNode Right { get; set ;}
     public int Value { get; set; }
     public bool IsBalance() { ... }
 }

ちなみに、木(ツリー）を表す。

 class Tree {
     public TreeNode TopNode { get; set; }
 }

といったTreeクラスを定義しても良いのですが、ここでは、TreeNodeだけに注目し
て実装していこうと思います。


■□───────────────────────────────────
■□ NULLオブジェクトを導入する

子ノードを持たない場合は、どうしましょうか？ Left, Right に null を設定する
ことで対応できそうですが、ここでは、Nullオブジェクトを導入したいと思います。

ということで、併せて、ITreeNode<T> というインターフェースも定義します。この
ITreeNode<T> インターフェースを実装する形で、NullNodeクラスを実装します。

 public interface ITreeNode<T> {
     ITreeNode<T> Left { get; set; }     // 左側の部分木
     ITreeNode<T> Right { get; set; }    // 右側の部分木
     T Value { get; set; }
     bool IsBalance();
 }

 public class NullNode<T> : ITreeNode<T> {
     public ITreeNode<T> Left { get; set; }
     public ITreeNode<T> Right { get; set; }
     public T Value { get; set; }
     public bool IsBalance() {
         return true;
     }
 }

いちおう、ジェネリッククラスにして、int以外の値も持てるようにしておきました。
NullNode の IsBalanceメソッドでは、trueを返すか、falseを返すかを決めないと
いけませんが、「子ノードを持たないノードのバランスは取れている」と考えれば、
trueを返しておいたほうがよさそうです。
もし、実装していて不都合が出てくれば変更します。


■□───────────────────────────────────
■□ 木構造の高さとは

それでは、いよいよ、IsBalanceメソッドの実装をしていこうと思います。

 public class TreeNode<T> : ITreeNode<T> {
     public ITreeNode<T> Left { get; set; }
     public ITreeNode<T> Right { get; set; }
     public T Value { get; set; }
     public bool IsBalance() { ... }
 }

IsBalanceが何をするメソッドなのか、問題文を再度読み直しましょう。
「平衡木とは、どのノードの2つの部分木も、その高さの差が1以下であるような木
であると定義します。」
ということなので、まずは部分木の高さを求める必要がありますね。

この高さを求めるメソッドを GetDepth メソッドとしましょう。一般的には、植物
の木は上に向かって伸びるのですが、コンピュータのtreeは、下に向かって伸びる
図がよく使われるので、高さではなく深さ(Depth)という用語を採用します。

具体的に考えてみます。
前提として子ノードを持たない（つまりNullNodeを保持している）親ノードだけの
Treeの深さは１として数えます。
もし、左のノードには子ノードを持たない部分木があり、右にはNullNodeがあると
すれば、その場合は深さは２とします。
もし、左の部分木の深さが３で、右の部分木の深さが５だったら、親ノードの１を
加えるので、深さは６ですね。
つまり、左右の部分木の深さを求めて、数の大きいほうに１加えた値が、その部分
木の深さとなります。

コードで書けば、こんな感じ。

 public int GetDepth() {
     int depth1 = this.Left.GetDepth();
     int depth2 = this.Right.GetDepth();
     return Math.Max(depth1, depth2) + 1;
 }

このGetDepthメソッドは、このメルマガを読んでいる人には言わずと知れた再帰処
理ですね。
この再帰メソッドは、子ノードをどんどん辿っていって、最後には、NullNode にた
どり着きますから、NullNode の GetDepth を実装しておかないといけません。ノー
ドが無いんだから、当然深さは 0 ですよね。
NullNodeを導入したことで、GetDepthメソッドの中で、nullかどうかの判断が必要
ないので、ものすごくシンプルなコードになっています。

で、ここまでの実装はどうなったかというと、以下のようになりました。

 public interface ITreeNode<T> {
     ITreeNode<T> Left { get; set; }     // 左側の部分木
     ITreeNode<T> Right { get; set; }    // 右側の部分木
     T Value { get; set; }
     int GetDepth();
     bool IsBalance();
 }

 public class NullNode<T> : ITreeNode<T> {
     public ITreeNode<T> Left { get; set; }
     public ITreeNode<T> Right { get; set; }
     public T Value { get; set; }
     public int GetDepth() {
         return 0;
     }
     public bool IsBalance() {
         return true;
     }
 }

 public class TreeNode<T> : ITreeNode<T> {
     public ITreeNode<T> Left { get; set; }
     public ITreeNode<T> Right { get; set; }
     public T Value { get; set; }

     public int GetDepth() {
         int depth1 = this.Left.GetDepth();
         int depth2 = this.Right.GetDepth();
         return Math.Max(depth1, depth2) + 1;
     }

     public bool IsBalance() { 
         // これはまだ未実装 ... 
     }
 }

そういえば、コンストラクタを定義していませんでした。
TreeNode<T>クラスに以下のようなコンストラクタを定義しておきましょう。

     public TreeNode() {
         Right = new NullNode<T>();
         Left = new NullNode<T>();
     }

初期値は、左右どちらも子ノードを持たないという設定です。


深さが求められるようになったので、いよいよ、IsBalance の実装です...が、
随分と長くなってしまいましたので、続きは次回ということにしたいと思います。

---------------------------------------------------------------------------

このようなプリミティブなクラスの設計・実装をしたことがない人にとっては
もしかしたら、消化不良になってしまった方もいるかと思います。
是非、次回までにしっかりと理解しておいてくださいね。、

─────────────────────────────────────
『C#プログラミングレッスン』  (ほぼ週刊）
☆皆さまからの感想をお待ちしています。http://gushwell.ifdef.jp/mail.html
─────────────────────────────────────
Published by Gushwell.
Copyright (C) 2014 Gushwell All rights reserved.
Microsoft MVP for Visual C#(Apr 2005 - Mar 2015)

■Gushwell's Page
facebook Page                     : http://www.facebook.com/CSharpLesson
Gushwell's C# Dev Notes           : http://gushwell.ldblog.jp/
Gushwell's C# Programming Page    : http://gushwell.ifdef.jp/
気ままな読書ノート                : http://gwbooks.hatenablog.com/
Twitterアカウント                 : @gushwell
─────────────────────────────────────