■━ [C#プログラミングレッスン] ━━━━━━━━━━━━━━━ No.393 ━□

「MEF編」-- リビルドしないで機能を追加する
                                                           by Gushwell
□━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━■


前回までは、機能を差し替えるプログラムを見てきましたが、今度は、機能を追加
するというプログラムについて考えてみましょう。プラグイン可能なアプリケーシ
ョンに近いイメージですね。

■□───────────────────────────────────
■□ プログラムのフレームワーク側を作る

前回示した Mainメソッドを以下のように書き換えます。

    using System;
    using System.ComponentModel.Composition.Hosting;

    namespace MEFSample {
        class Program {
            static void Main(string[] args) {
                var catalog = new DirectoryCatalog("Plugin");
                var container = new CompositionContainer(catalog);
                string str = Console.ReadLine();
                var objs = container.GetExportedValues<ITextConverter>();

                foreach (var obj in objs) {
                    str = obj.Convert(str);
                }
                Console.WriteLine(str);
                Console.ReadLine();
            }
        }
    }

前回までは GetExportedValue メソッドを使い、一つのオブジェクトを生成してい
いましたが、今回は、GetExportedValue から複数形の GetExportedValues に変更
しています。
これにより、カタログ内にあるITextConverterオブジェクトをすべて取得すること
ができます。

つまり、Pluginフォルダに、TextUpper、 AddBrackets の２つのDLLがあれば、２つ
のオブジェクトが取得できることになります。

今回のプログラムでは、foreach 文でこの複数のオブジェクトのConvertメソッドを
順に呼び出しています。

例えば、当プログラムを実行し、Microsoft Windows と入力すれば、
[MICROSOFT WINDOWS] と出力されます。


■□───────────────────────────────────
■□ 機能を追加する

では、さらに、「すべての半角空白を除去する」機能を追加してみましょう。

MEF編を最初から読んできた読者の方ならば、以降の説明を読まなくても、実装でき
ると思いますので、実際にチャレンジしてみてください。

いちおう、説明しますね。

 1. pluginソリューションフォルダに、SpaceRemoverプロジェクト（クラスライブ
    ラリ）を追加します。

 2. 参照設定に、
     System.ComponentModel.Composition
     ITextConverter 
    を追加します。

 3. SpaceRemoverクラスを定義します。     

    これまでと同様に、名前空間は、MEFSampleとします。

    using System.ComponentModel.Composition;

    namespace MEFSample {
        [Export(typeof(ITextConverter))]
        public class SpaceRemover : ITextConverter {
            public string Convert(string s) {
                return s.Replace(" ","");
            }
        }
    }

 4. ビルドして作成された、SpaceRemover.dllを MEFSample.exeがあるフォルダに
    あるPluginフォルダにコピーします。


これで実行する準備ができました。F5キーで実行してみましょう。

 "  Hello MEF World! "

という入力に対して、

 "[HELLOMEFWORLD!]"

という出力が得られるはずです。

このプログラムでは、DLLを呼び出す順番を制御できていませんが、GUIアプリでは、
どの機能をどの順番で呼び出すかをユーザに指定させることも可能ですね。

例えば、
 public interface ITextConverter {
     string Convert(string s);
     string Name {get;}            // この機能の名前
     string Description {get;}     // 機能の概要
 }

と２つのプロパティを追加し、それぞれの具象クラスで、これらのプロパティを実
装すれば、NameとDescriptionの値を画面に表示し、ユーザにどれを利用するのか、
どの順番で呼び出すのかを指定してもらうことできますよね。

蛇足ですが、このサンプルでは呼び出し順序で結果が左右されませんが、変換機能
によっては、呼び出し順序が結果に差異が出てきます。

次回はDI機能(「Dependency Injection」)について説明しようと思います。

─────────────────────────────────────
『C#プログラミングレッスン』  (ほぼ週刊）
☆皆さまからの感想をお待ちしています。http://gushwell.ifdef.jp/mail.html
─────────────────────────────────────
Published by Gushwell.
Copyright (C) 2014 Gushwell All rights reserved.
Microsoft MVP for Visual C#(Apr 2005 - Mar 2015)

■Gushwell's Page
facebook Page                     : http://www.facebook.com/CSharpLesson
Gushwell's C# Dev Notes           : http://gushwell.ldblog.jp/
Gushwell's C# Programming Page    : http://gushwell.ifdef.jp/
気ままな読書ノート                : http://gwbooks.hatenablog.com/
Twitterアカウント                 : @gushwell
─────────────────────────────────────
