■━ [C#プログラミングレッスン] ━━━━━━━━━━━━━━━ No.394 ━□

「MEF編」-- Dependency Injection
                                                           by Gushwell
□━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━■


■□───────────────────────────────────
■□ 機能を差し替えられるクラス

前回のお約束の通り、今回は「依存性の注入（Dependency Injection）」について
説明したいと思いますが、依存性の注入が何かという説明は後回しにして、まずは、
以下のTextProcessorクラスのコードを読んでください。

    using System;

    namespace MEFSample {
        class TextProcessor {
            private ITextConverter _textConverter = null;

            public TextProcessor(ITextConverter converter) {
                _textConverter = converter;
            }

            public string Execute(string s) {
                return _textConverter.Convert(s);
            }
        }
    }

このTextProcessorクラスは、ITextConverterインターフェース型のフィールドを持
っており、このインスタンスをコンストラクタで受け取っています。
Executeメソッドでは、この_textConverterのConvertメソッドを呼び出し、文字列
を加工しています。

TextProcessor クラスの中で、直接具体的な文字列加工のコードを書かずに、間接
的にITextConverterのConvertメソッドを呼び出しています。
こうすることで、TextProcessorは、加工ロジックを差し替えることが可能になりま
す。

前回までに作成した TextUpper, AddBrackets, SpaceRemoverといったクラスのイン
スタンスをコンストラクタに渡せば、TextProcessorはいろんな文字列加工が可能に
なりますね。

まあ実際のアプリケーションでは、こんな単純ではなく、このTextProcessor自身も
独自のコードを持っていて、その一部の機能として、ITextConverterを使うという
構造になっている場合もあると思います。

※ TextProcessorが、独自ロジックを持たずに、ファサードの役割を果たし、複数
   のクラスのメソッドを呼び出すインターフェースを提供するという場合はあると
   思います。
   しかし、この記事の本質から逸脱するので、ここでは触れないこととします。


■□───────────────────────────────────
■□ TextProcessorクラスをMEF対応にする

話を戻しましょう。

このTextProcessorを使う側の視点にたった場合、依存関係にある ITextConverter
の具象クラスのインスタンスを生成し、それをTextProcessorのコンストラクタに
渡すという厄介な仕事が待っています。

特に頻繁に複数の機能を使い分けたいといった要求があると、その都度
TextProcessorを呼び出す側のコードを変更し、ビルドしなおすというやり方は良い
方法とはいえません。

ここで出番となるのが、MEFです。もっとも、MEFがなくても実現はできますが、
MEFを使えば、この方法を統一することができます。では、MEFを使ったコードをお
見せします。

 using System;
 using System.ComponentModel.Composition;
 using System.ComponentModel.Composition.Hosting;

 namespace MEFSample {
     class Program {
         static void Main(string[] args) {
             var catalog = new AssemblyCatalog(typeof(Program).Assembly);
             var container = new CompositionContainer(catalog);
             var tp = container.GetExportedValue<TextProcessor>();
             string s = tp.Execute("Hello MEF World!");
             Console.WriteLine(s);
             Console.ReadLine();
         }
     }

     [Export]
     public class TextProcessor {
         [Import(typeof(ITextConverter))]
         private ITextConverter _textConverter = null;

         public string Execute(string s) {
             return _textConverter.Convert(s);
         }
     }

     [Export(typeof(ITextConverter))]
     public class TextUpper : ITextConverter {
         public TextUpper() {
             Console.WriteLine("Created ToUpper");
         }

         public string Convert(string s) {
             return s.ToUpper();
         }
     }
 }

TextUpperクラスは、以前おみせしたものと同じものです。ITextConverter インタ
ーフェースのコードはここでは掲載していませんが、前回同様、別プロジェクトで
定義してあるものと仮定しています。

TextProcessorクラスは、以下のような変更を加えています。
 1. クラスに[Export]属性を付加
 2. コンストラクタを削除
 3 _textConverterフィールドに、Import属性を付加

Mainメソッドでは、AssemblyCatalog を利用し、同一アセンブリ内にあるクラスを
対象としています。
GetExportedValue メソッドで、アセンブリにある TextUpperクラスのインスタンス
を生成し、そのオブジェクトが返ってきます。このとき、TextUpperインスタンス生
成は、コンテナが自動でやってくれます。


■□───────────────────────────────────
■□ 依存性の注入とは

繰り返しになりますが、今回見てきたソースコードのどこにも、 TextProcessor と
TextUpper の依存関係を直接的に示してる箇所はありません。
Mainメソッドでは、TextProcessorクラスを利用していますが、TextUpper クラスを
直接指定していません。TextProcessorクラス内にも、TextUpper クラスは出てきま
せん。
それでも、実行すれば、TextProcessorオブジェクトは、TextUpperオブジェクトの
Convertメソッドを呼び出します。

これをMEFを使って、この２つを結びつけているわけです。

ちなみに、ソフトウェアの専門用語では、このクラス間の依存関係をプログラムの
ソースコードから排除し、別の方法（設定ファイル等）でクラス間の依存関係を指
定することを依存性の注入（Dependency Injection）と読んでいます。

 ※ 注入という単語がどうもなじめないのは僕だけでしょうか？

今回示したコードでは設定ファイルではなく、C#の属性を使って依存性を注入して
いることになります。

なお、「NO.392」で示したように、上記クラスをそれぞれ別アセンブリとして分割
し、DirectoryCatalogクラスを使ってカタログを生成すれば、ITextConverter実装
した具象クラスのアセンブリを差し替えるだけで、機能を変更することが可能とな
ります。


─────────────────────────────────────
『C#プログラミングレッスン』  (ほぼ週刊）
☆皆さまからの感想をお待ちしています。http://gushwell.ifdef.jp/mail.html
─────────────────────────────────────
Published by Gushwell.
Copyright (C) 2014 Gushwell All rights reserved.
Microsoft MVP for Visual C#(Apr 2005 - Mar 2015)

■Gushwell's Page
facebook Page                     : http://www.facebook.com/CSharpLesson
Gushwell's C# Dev Notes           : http://gushwell.ldblog.jp/
Gushwell's C# Programming Page    : http://gushwell.ifdef.jp/
気ままな読書ノート                : http://gwbooks.hatenablog.com/
Twitterアカウント                 : @gushwell
─────────────────────────────────────
