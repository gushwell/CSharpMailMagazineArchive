
■━ [C#プログラミングレッスン] ━━━━━━━━━━━━━━━ No.397 ━□

「MEF編」-- 属性を使わない方法
                                                           by Gushwell
□━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━■


このシリーズの最終回として、.NET4.5に追加された属性を使わないImport Export
の方法についてみていきます。
今回示す方法を使えば、既存のクラスに対してもMEFを適用できますし、
属性を気にせずに、MEFのパートクラスを定義していくことが可能になります。


■□───────────────────────────────────
■□ ITextConverterインターフェースの定義

まずは、前回までと同様、ITextConverterインターフェースの定義

 namespace MEFSample {
     public interface ITextConverter {
         string Convert(string s);
     }
 }

■□───────────────────────────────────
■□ ITextConverterからクラスを派生

次に、今回は、ここから２つのクラスを派生させます。

 namespace MEFSample {

     public class TextUpper : ITextConverter {

         public string Convert(string s) {
             return s.ToUpper();
         }
     }

     public class Addbrackets : ITextConverter {
         public string Convert(string s) {
             return "[" + s + "]";
         }
     }
 }

Export属性はつけません。
MEFを意識しないで普通にインターフェースとその派生クラスを定義すれば、MEFの
パートクラスが定義できます。


■□───────────────────────────────────
■□ TextProcessor クラスの定義

次は、TextProcessor クラスの定義です。この中で、Exportと Importのコードを
書いていきます。

 using System.Collections.Generic;
 using System.ComponentModel.Composition.Hosting;
 using System.ComponentModel.Composition.Primitives;
 using System.ComponentModel.Composition.Registration;

 namespace MEFSample {
     class TextProcessor {

         private IEnumerable<ITextConverter> Converters { get; set; }

         public TextProcessor() {
             var rb = new RegistrationBuilder();
             rb.ForTypesDerivedFrom<ITextConverter>().Export<ITextConverter>();
             rb.ForType<Export>().Export<Export>();

             var catalog = new AssemblyCatalog(typeof(Program).Assembly, rb);
             var container = new CompositionContainer(catalog);
             Converters = container.GetExportedValues<ITextConverter>();
         }

         public string Convert(string s) {
             foreach (var conv in Converters) {
                 s = conv.Convert(s);
             }
             return s;
         }
     }
 }

利用するのは、RegistrationBuilder クラスです。
ここでは、ForTypesDerivedFrom メソッドを呼び出し、ITextConverter から派生された
クラスを Exportしています。
これが、Export属性を付ける代わりになります。
Exportの完了を示すために、rb.ForType<Export>().Export<Export>() を呼び出します。
これで準備ができました。
あとは、これまでどおりに、カタログ と コンテナを作成します。
今回は、GetExportedValues メソッドを使い、すべての ITextConverter 派生クラスを
インポートしています。

Convert メソッドでは、foreach で ITextConverter 派生クラスのメソッドを順に
適用しています。

■□───────────────────────────────────
■□ TextProcessor クラスを利用する

最後に、TextProcessor を利用するコードを示します。

 using System;

 namespace MEFSample {
     class Program {
         static void Main(string[] args) {
             var tp = new TextProcessor();
             var s = tp.Convert("Hello world");
             Console.WriteLine(s);
             Console.ReadLine();
         }
     }
 }


これを実行すると、

 [HELLO WORLD]

という文字列が表示されます。

----------------------------------------

以上で、MEF編は終了です。
２，３週間お休みをいただいた後は、３月末でいったん中断していた「アルゴリズ
ム編」を再開する予定です。


─────────────────────────────────────
『C#プログラミングレッスン』  (ほぼ週刊）
☆皆さまからの感想をお待ちしています。http://gushwell.ifdef.jp/mail.html
─────────────────────────────────────
Published by Gushwell.
Copyright (C) 2014 Gushwell All rights reserved.
Microsoft MVP for Visual C#(Apr 2005 - Mar 2015)

■Gushwell's Page
facebook Page                     : http://www.facebook.com/CSharpLesson
Gushwell's C# Dev Notes           : http://gushwell.ldblog.jp/
Gushwell's C# Programming Page    : http://gushwell.ifdef.jp/
気ままな読書ノート                : http://gwbooks.hatenablog.com/
Twitterアカウント                 : @gushwell
─────────────────────────────────────
