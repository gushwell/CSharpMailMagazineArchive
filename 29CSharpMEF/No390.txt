■━ [C#プログラミングレッスン] ━━━━━━━━━━━━━━━ No.390 ━□

「MEF編」-- はじめての MEF
                                                           by Gushwell
□━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━■

私事ですが、Microsoft MVP Award (カテゴリ Visual C#) を再受賞することが
できました。おかげさまで10年連続の受賞となります。
これも、当メールマガジンを皆様に購読していただいているおかげです。ありが
とうございました。
Microsoft MVP の名に恥じぬよう、今後も情報発信していきたいと思っております。
これからもよろしくお願いします。

さて、今号から MEF について解説していきます。

■□───────────────────────────────────
■□ MEFとは

MEF(Managed Extensibility Framework)とは、拡張可能なアプリケーションを作成
するための .NET Framrworkが提供するフレームワークです。
このMEFを利用すれば、オブジェクト指向の設計原則のひとつであるOpen-Close-
Principle(オープン・クローズドの原則)を実現することが可能となります。
「拡張に対して開いて（オープン：Open）いて、修正に対して閉じて（クローズド：
Closed）いなければならない。」というのがOpen-Close-Principleの定義なわけで
すが、このOpen-Close-Principleがどのように実現されるのかは、次回以降で説明
します。


■□───────────────────────────────────
■□ MEFを構成する３つのパート

  
まず、MEFを理解するには、３つの用語について知る必要があります。それは、パー
ト、カタログ、合成コンテナです。

「パート」はMEFが扱う実行可能なコンポーネントのことです。

「カタログ」は、パートを検出するためのオブジェクトです。MEFでは、指定された
型、アセンブリ、ディレクトリからパートを検出することができます。

「合成コンテナ」は、カタログで検出したパートを利用可能にするための仕組みを
提供します。パートオブジェクトのインスタンス化をするのは、この合成コンテナ
の役割です。以降、この合成コンテナのことを単にコンテナと表記します。
「合成コンテナ」は、Composition Container の略ですが、どちらかといえば、
「組立コンテナ」のほうが良いかなと個人的には思っています。


■□───────────────────────────────────
■□ 初めてのMEFプログラミング

例えば、以下のようなクラスを考えてみましょう。

    public class TextConverter {
        public string Convert(string s) {
            return s.ToUpper();
        }
    }

このクラスを普通に利用する分には特に説明の必要ありませんね。

では、このクラスをMEFのパート（コンポーネント）として利用するにはどうすれば
よいかを見ていきましょう。
まず、準備として、プロジェクトに、System.ComponentModel.Composition を参照
設定に追加します。
これで、MEFの機能が利用できるようになります。

まずやるのが、[Export]属性をクラスに付加することです。

    [Export]
    public class TextConverter {
        public string Convert(string s) {
            return s.ToUpper();
        }
    }


これで、TextConverterクラスをMEFがパートとして認識できるようになります。

このMEFがパートであるTextConverterクラスを利用するのに、カタログを作成と、
コンテナの作成を行います。

  var catalog = new AssemblyCatalog(typeof(Program).Assembly);
  var container = new CompositionContainer(catalog);

ここでは、カタログの作成には、MEFが提供する AssemblyCatalogクラスを利用して
います。
引き数で指定したアセンブリのカタログを作成し、ここからパートを検索できるよ
うにします。このカタログを引数にして、CompositionContainerクラスのコンスト
ラクタで、コンテナを作成します、

コンテナが用意できたので、次にすることが、コンテナからTextConverterオブジェ
クトのインスタンスを得ることです。

 var obj = container.GetExportedValue<TextConverter>();

型パラーメータにTextConverterを指定しないといけないのが面倒ですが、これでイ
ンスタンスを得られましたので、あとは、普通に呼び出すだけです。

以下が、MEFを使い、TextConverter クラスの Convert メソッドを呼び出すコード
となります。

  var catalog = new AssemblyCatalog(typeof(Program).Assembly);
  var container = new CompositionContainer(catalog);
  var obj = container.GetExportedValue<TextConverter>();
  string str = obj.Convert("hello world!");
  Console.WriteLine(str);

でも、これだけでは、面倒になっただけで、何が良いのか分かりませんね。
AssemblyCatalogやCompositionContainerを使うとどういう利点があるのかは、次回
以降ということで(^^;)


─────────────────────────────────────
『C#プログラミングレッスン』  (ほぼ週刊）
☆皆さまからの感想をお待ちしています。http://gushwell.ifdef.jp/mail.html
─────────────────────────────────────
Published by Gushwell.
Copyright (C) 2014 Gushwell All rights reserved.
Microsoft MVP for Visual C#(Apr 2005 - Mar 2015)

■Gushwell's Page
facebook Page                     : http://www.facebook.com/CSharpLesson
Gushwell's C# Dev Notes           : http://gushwell.ldblog.jp/
Gushwell's C# Programming Page    : http://gushwell.ifdef.jp/
気ままな読書ノート                : http://gwbooks.hatenablog.com/
Twitterアカウント                 : @gushwell
─────────────────────────────────────
