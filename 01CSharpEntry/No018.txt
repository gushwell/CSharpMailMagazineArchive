┏━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━┳━┳━┓
┃☆┃ C#プログラミングレッスン            -- 入門編 -- ┃＿┃□┃×┃
┗━┻━━━━━━━━━━━━━━━━━━━━━━━━━┻━┻━┻━┛
                                                          − No.018 −
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
■関数                                                     2004/12/10
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

C#の講座で、関数を説明すべきかどうか迷ったのですが、オブジェクト指向が
どうのこうの言う前に、関数という概念を知っておいたほうが良いと思うので、
今回は、関数の説明をしたいと思います。
なお、実をいうとC#では、関数と言わずにメソッドというのですが、ここでは
あえて、関数と言う名前を使わせてもらいます。

■──────────────────────────────────
■ 今日のサンプルコード

◆プログラムコード

  1: using System;
  2:
  3: class Program {
  4:     static void Main() {
  5:         string s = Console.ReadLine();
  6:         double num = double.Parse(s);
  7:         double meter = YardToMeter(num);
  8:         Console.WriteLine(meter);
  9:     }
 10:
 11:     static double YardToMeter(double yd) {
 12:         double meter = yd * 0.9144;
 13:         return meter;
 14:     }
 15: }



◆実行結果

 4.0                <--- キーボードから入力したデータ
 3.6576

■──────────────────────────────────
■ プログラムの解説

◆サンプルコードの動作

まずは、サンプルコードで関数の動きを順に追っていきましょう。今回のプロ
グラムでは、"YardToMeter" が関数で、ヤードからメートルを求める機能を実
装しています。

 1) 5行目で、Console.ReadLineでキーボードからのデータを s に代入します。
 2) 6行目で、double.Parseで数値に変換し、numに代入しています。
 3) 7行目で、YardToMeter という関数を numを引数にして呼び出しています。
 4) YardToMeterが呼び出されると、 制御は 11行目に移ります。 7行目の
   （）の中に記述した num は、YardToMeterの 引数 yd に渡されます。
 5) この yd を元に、YardToMeter 関数は、メートルを求め、
      return meter;
    で値を呼び出し元に返します。
 6) 制御が呼び出し元に戻り、返された値が、変数 meter に代入されます。
 7) 結果が出力されます。

◆関数の利点

プログラムの初心者の方には、関数を導入することで、却って処理が複雑にな
ったように感じる方もいるかもしれません。しかし、一度関数を作成してしま
えば、他のところでも利用できますし、どういった計算式だったかなど、細か
な事を忘れてしまえる、などの利点があります。
もし、大きなプログラムのあちこちで、ヤードからメートルを求める必要があ
ったらどうでしょうか。
ヤードからメートルを求める部分すべてで、

   double meter = yard / 0.9144;

と書くよりは、

   double meter = YardToMeter(yard);

と書いたほうが、良いですよね。
えっ、直接、計算式を書いたほうが簡単ですって。確かにこの例ではそうかも
知れませんが、この計算式がもっと複雑だったらどうでしょうか。全ての箇所
で複雑な計算式を書くよりは、一度、どこかで、関数を定義し、この関数を呼
び出したほうが、間違いが少ないし、「何をやっているのか」が明確になりま
すよね。

つまり、関数は、

 ・繰り返し記述される同じコードを一つにまとめることで、無駄を省き、間
   違いを起こし難くする。

ことができます。また、同じ記述が繰り返し現れなくても、関数を作成するこ
とで、

 ・「何をやるのか」をより明確にできる。
 ・プログラムを適度な大きさに分割でき、より理解しやすくなる。
 ・細部を知らなくても、プログラムの全体像を理解しやすくなる。

などの効用もあります。


◆関数の定義

関数の定義部分を再度詳しく見て行きましょう。関数は以下にような形になっ
ています。

  戻り値 関数名（引数の宣言） {
      宣言と文
  }

なお、戻り値の前に書いてある static は、今のところおまじないだと思って
ください。

YardToMeterでは、

        static double YardToMeter(double yd) {
            double meter = yd * 0.9144;
            return meter;
        }

となっていますので、
  戻り値の型  double
  関数名      YardToMeter
  引数        引数名 yd、yd の型 double
ということが分かります。
この例では、 戻り値が、double 型ですが、int型 string型などを返す関数も
作成することができますし、以下のように複数の引数を受け取る関数を作るこ
ともできます。

      static double SampleFunction(double num, string msg) {
          ...
      }


◆return文

return文は、 呼んだプログラムに値を返す命令です。return の後ろに任意の
式を書けます。

  return 式;

式の値が、呼び出し元に返されます。式を書けるので、

            return yd * 0.9144;

と１行で済ましてしまうこともできます。 return 文が実行されると、その関
数が終わり、呼び出し元に制御が戻ります。
つまり、もし

      static double YardToMeter(double yd) {
          double meter = yd * 0.9144;
          return meter;
          Console.WriteLine("実行されない");
      }

という関数があるとすると、 return 文に後にある

          Console.WriteLine("実行されない");

は、実行されないことになります。


■──────────────────────────────────
■ 補足事項・関連事項

◆戻り値の無い関数

戻り値の無い関数と言うものも存在します。何も返さない関数というのは、何
か変ですが、次をみてください。

    static void PrintAll(int[] nums) {
        foreach ( int n in nums )
            Console.WriteLine(n);
    }

PrintAllが関数です。 void というのは、「戻り値が何もない」ということを
意味しています。そのため、PrintAll関数では、

    return 式;

という、文が現れません。

ちなみに、値を返さない void 関数の場合でも、return文を使うことができま
す。この場合、return の後ろに 式は書きません。
returnに出会うと、その関数から抜け出し、制御が呼び出し元に戻ることにな
ります。 return 文が無いと、その関数の最後まで処理を実行してから、制御
が呼び出し元に戻ります。


◆式も引数に渡すことができる。

サンプルコードでは、

  7:         double meter = YardToMeter(num);

と変数を関数の引数に渡していましたが、( ) の中には、式を書くこともでき
ます。つまり、

  6:         double num = double.Parse(s);
  7:         double meter = YardToMeter(num);

この２行は、

  7:         double meter = YardToMeter(double.Parse(s));

と１行にすることも可能です。double.Parse(s) の 結果が、YardToMeter に
渡ることになります。


◆Mainも関数

さて、ここまで読んだ読者の方は、いままで、何度となく出てきたMainも関数
であることに気が付いたと思います。
今回のサンプルコードのMain関数は、引数も戻り値も無い特殊な関数と言えま
す。

また、今回のサンプルコードに出てきた ReadLine, WriteLine, Parse も関数
(メソッド）です。これらは、.NET Framework で提供済みのものです。
