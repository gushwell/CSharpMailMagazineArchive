┏━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━┳━┳━┓
┃☆┃ C#プログラミングレッスン            -- 入門編 -- ┃＿┃□┃×┃
┗━┻━━━━━━━━━━━━━━━━━━━━━━━━━┻━┻━┻━┛
                                                          − No.006 −
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
■条件分岐 if 文                                           2004/09/17
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

■──────────────────────────────────
■ 今日のプログラム

◆プログラムコード

  1: using System;
  2:
  3: class Sample1 {
  4:     static void Main(string[] args) {
  5:         for ( int i = 1; i <= 50; i++ ) {
  6:             if ( (i % 4 == 0) && (i % 6 != 0) )
  7:                 Console.WriteLine("{0}",i);
  8:         }
  9:     }
 10: }

◆実行結果

 4
 8
 16
 20
 28
 32
 40
 44

■──────────────────────────────────
■ プログラムの解説

今回のプログラムは、１から５０までの整数で、４で割り切れて、６で割り切
れない数値を表示するプログラムです。

◆if 文

if 文の構文は、次の形式となります。

  if ( 式 )
     ステートメント１
  [else
     ステートメント２]


() の中の式が成り立った時には、 ステートメント１を実行し、成り立たなか
ったらステートメント２を実行します。else以降は省略可能です。

複数のステートメントを実行する場合は、複数のステートメントを { と } で
括ります。

  if ( i > 10 ) {
       Console.WriteLine("i > 10が成り立ちました。");
       Console.WriteLine("i の値は {0} です。",i);
  }


当然、この「ステートメント」には、for文や if 文を記述することもできます。

  if ( x == 0 ) {
      Console.WriteLine("x == 0");
      for ( int i = 0; i < 10; i++ )
          Console.WriteLine("{0}", i);
  }


◆ && 演算子

&& は 「かつ」の意味で、 && の前後の式が共に真(true) なら、true を返し
ます。どちらか一方でも、偽(false)ならば、false を返します。

つまり、今回の例では、
  (i % 4 == 0)
と
  (i % 6 != 0)
が共に成り立った時だけ、7行目を実行することになります。

なお、 ( i % 4 == 0 ) が成り立たない（つまり、４で割り切れない）場合に
は、(i % 6 != 0)を調べても意味がありませんので、この式は実行されません。

なお、「または」を意味する演算子は、|| となります。

  ( i % 4 == 0 ) || ( i % 6 == 0 )

と書けば、 「i が 4で割り切れる」または「i が 6で割り切れる」場合に、
trueとなります。



■──────────────────────────────────
■ 補足事項・関連事項

◆{ } を使って else の対応を明示する

if 文では、{ ] を使うことで、if に対応した else を関連付けることもでき
ます。

  if ( x > 10 )
      if ( y > 20 )
          Console.Write("Statement_1");
      else
          Console.Write("Statement_2");

上のコードでは、 else は、( y > 20 ) が成り立たない(falseの)時に実行さ
れます。一方、( x > 10 ) が成り立たない(falseの)時に、"statement_2" を
表示するには、以下のように、{ } を付けます。

  if ( x > 10 ) {
      if (y > 20)
          Console.Write("Statement_1");
  } else
      Console.Write("Statement_2");

よく間違うのは、以下のように書いてしまうことです。

  if ( x > 10 )                     .... (*1)
      if ( y > 20 )                 .... (*2)
          Console.Write("Statement_1");
  else
      Console.Write("Statement_2");

ちょっと見には、else は、(*1) の if に対応しているように見えますが、C#
コンパイラから見た場合には、字下げには何の意味もありませんので、文法的
には、この else は、(*2) に対応していることになります。
もちろん、C#が字下げを理解していないからといって、字下げを行わないのは
いけません。プログラムの構造と字下げは一致させるようにしてください。

プログラミングになれていない方は、if 文を書くときには、必ず { } で括る
習慣を付けておいたほうが、間違いが少なくなると思います。
