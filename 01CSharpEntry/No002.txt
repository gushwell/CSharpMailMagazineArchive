┏━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━┳━┳━┓
┃☆┃ C#プログラミングレッスン            -- 入門編 -- ┃＿┃□┃×┃
┗━┻━━━━━━━━━━━━━━━━━━━━━━━━━┻━┻━┻━┛
                                                          − No.002 −
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
■ C#で変数を使うには、                                     2004/08/24
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

■──────────────────────────────────
■ 今日のプログラム

今回のプログラムは、プログラミングの重要な概念の一つである「変数」を使
った例です。

◆プログラムコード

  1: class Sample1 {
  2:    static void Main() {
  3:        string person;
  4:        person = "山田さん";
  5:        System.Console.WriteLine(person + "、こんにちは");
  6:        System.Console.WriteLine(person + "、お久しぶりです");
  7:    }
  8: }

  ※先頭の「数値:」は説明用ですので、プログラムの一部ではありません。

◆結果
このプログラムの結果は、コンソール画面に以下の文字列が表示されます。

  山田さん、こんにちは
  山田さん、お久しぶりです


■──────────────────────────────────
■ プログラムの解説

◆変数とは

変数とはプログラムの中で、文字や数値などを入れておく箱のような物です。
この箱には、一つの値しか入りません。またこの箱には、どのような種類の値
が入れられるかが決められています。数値用の箱には、文字列を入れることは
できませんし、文字列用の箱には、数値を入れることはできません。

この変数という箱は、プログラムの中でいくつでも作ることができます。そう
なると複数の変数を特定する必要がでてきます。これを特定するのが変数名で
す。変数に名前を付けて、区別をするわけですね。

◆変数の宣言

変数を宣言しているのは、

  2:     string person;

の行で、personという名前の変数がstring型であることを宣言しています。こ
のperson変数には、文字列が格納されます。stringは、C# のキーワードとな
ります。
変数の宣言は、<型名>の後に、<変数名> を書きます。

◆代入

次の行で、 変数personに、"山田さん" という文字列を入れています。これを
プログラムの世界では、「代入」と言います。
なお、変数というくらいですから、一度設定した値を後から変更することもで
きます。

   person = "山田さん";
   System.Console.WriteLine(person + "、こんにちは");
   person = "佐藤さん";
   System.Console.WriteLine(person + "、お久しぶりです");

◆文字列の連結

  5:     System.Console.WriteLine(person + "、こんにちは");

の 「peron + "、こんにちは"」の部分は、+ 記号を使い、２つの文字列を連
結しています。5行目と6行目が実行されると、

  山田さん、こんにちは
  山田さん、お久しぶりです

と表示されます。

もちろん、今回の例では、同じ結果を得るのに、変数を使わないこともできま
すが、変数を使うことで、複雑な処理を簡潔に記述できたり、様々なケースに
対応できるプログラムを書く事ができるようになります。


■──────────────────────────────────
■ 補足事項

◆変数の初期化

C#では、変数の宣言と、初期化を一度に行うことができます。
3行目と4行目を

  string person = "山田さん";

とすれば、1行にすることができます。C#では、変数の宣言と初期化を一緒に
行うことが一般的です。変数宣言時に、初期化することを習慣にしておけば、
初期化忘れのようなミスを少なくすることができます。

◆変数名

変数に名前を付けるときには、いくつか守らなければいけない点があります。
まず、変数名を数値や記号で始めることができません。また、記号は、途中に
入れることもできません。ですから、以下のような変数は無効となります。

  2nd
  %name
  next-node

有効な変数名を以下にあげます。

  no2
  _name
  nextNode

   ・数値は、先頭以外なら使うことができます。
   ・アンダースコア(_)は、変数名に使うことが許されています。
   ・C#では、2つの単語をつなげる場合には、２番目以降の単語の先頭を大文
     字にすることが一般的です。
     なお、next_node と アンダースコアでつなげることもでます。

  ※「会社名」といった日本語の変数名を付けることもできますが、一般的に
    は、利用されていないようです。
    これは私見ですが、ソースコードが全世界共通の言語であることを考える
    と、日本語の変数名の使用は避けたほうが良いと思います。

また、C#が定めたキーワードを変数名にすることもできません。例えば、

  this
  byte
  object

などといった変数名を付けることはできません。参考までに、C#のキーワード
を以下に示しておきます。

--------------------------------------------------------------------
abstract  as        base      bool      break     byte      case
catch     char      checked   class     const     continue  decimal
default   delegate  do        double    else      enum      event
explicit  extern    false     finally   fixed     float     for
foreach   goto      if        implicit  in        int       interface
internal  is        lock      long      namespace new       null
object    operator  out       override  params    private   protected
public    readonly  ref       return    sbyte     sealed    short
sizeof    stackalloc  static  string    struct    switch    this
throw     true      try       typeof    uint      ulong     unchecked
unsafe    ushort    using     virtual   volatile  void      while
--------------------------------------------------------------------
