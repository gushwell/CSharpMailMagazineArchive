
┏━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━┳━┳━┓
┃☆┃ C#プログラミングレッスン            -- 入門編 -- ┃＿┃□┃×┃
┗━┻━━━━━━━━━━━━━━━━━━━━━━━━━┻━┻━┻━┛
                                                          − No.007 −
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
■ switch 文                                                2004/09/24
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

■──────────────────────────────────
■ 今日のプログラム

◆プログラムコード

  1: using System;
  2:
  3: class Sample007 {
  4:     static void Main() {
  5:         string str = Console.ReadLine();
  6:         int num = int.Parse(str);
  7:         switch ( num ) {
  8:         case 1:
  9:             Console.WriteLine("1が入力されました");
 10:             break;
 11:         case 2:
 12:             Console.WriteLine("2が入力されました");
 13:             break;
 14:         case 3:
 15:             Console.WriteLine("3が入力されました");
 16:             break;
 17:         case 4:
 18:         case 5:
 19:         case 6:
 20:             Console.WriteLine("4-6の値が入力されました");
 21:             break;
 22:         default:
 23:             Console.WriteLine("1-6以外が入力されました");
 24:             break;
 25:         }
 26:     }
 27: }


◆実行結果

  2              <--- 入力した値
  2が入力されました

■──────────────────────────────────
■ プログラムの解説

◆Console.ReadLine

Console.ReadLineは、コンソール画面で、キーボードから入力された１行分を
読み取り、string型として読み取った文字列を返します。

  ※ 正確には、 「標準入力ストリームから読み取る」と書くべきですが、コ
     ンソールアプリケーションを作成するのが目的ではありませんので、こ
     のような表現としました。

今後も、Console.ReadLineは、当メルマガで使って行きますので、覚えておい
てください。


◆ int.Parse

int.Parse の引数に、 文字列を入れることで、文字列を int 型に変換するこ
とができます。
double 型に変換したければ、double.Parse と書きます。

  このプログラムでは、キーボードから、'abc' とか '123.45' といった、整
  数として認識できない文字を入力した場合には、int.Prase でエラーが発生
  します。このエラーは、「例外」と呼ばれているものですが、この例外につ
  いては、別の機会に説明したいと思います。


◆switch 文

switch 文は、多分岐処理を行う時に使います。前回の if 文は、式が true
か false かで、２つに処理が分岐しましたが、３つ以上分岐させたい時には、
switch 文を使うと便利です。

  7:         switch ( num ) {

の num の値によって、 処理が分岐することになります。もし、num の値が 1
ならば、case 1: の次のステートメントに処理が移ります。今回のプログラム
の例では、

  9:             Console.WriteLine("1が入力されました");

が実行され、次の break 文で、switch文から抜け出します。
複数のcase で同一の処理がある場合には、以下のように書きます。

 17:         case 4:
 18:         case 5:
 19:         case 6:
 20:             Console.WriteLine("4-6の値が入力されました");
 21:             break;

num の値が、4 か 5 か 6 の場合に 20行に処理が移ります。

もし、 どの case にも該当しない場合には、default: の次の行に処理が移り
ます。defaultブロックは省略可能です。

C/C++やJavaと違う点は、case ブロックの最後には、ジャンプステートメント
(break) が必須となった点です。これは、break 文を書き忘れることによるバ
グを未然に防ぐのが目的だと思われます。

ですから、以下のようなコードはコンパイル時にエラーとなります。

    switch ( num ) {
    case 1:
        Console.WriteLine("1が入力されました");
    case 2:
        Console.WriteLine("2以下が入力されました");
    case 3:
        Console.WriteLine("3以下が入力されました");
    }

なお、 break 文の他に、まだ、説明をしていませんが、return 文や goto 文
でも、switchから抜け出すことができますが、break に比べると、かなり使用
頻度は低いと思われます。


■──────────────────────────────────
■ 補足事項・関連事項

◆ goto case

C#では、break などのジャンプステートメントが無いとエラーになってしまい
ます。では、C/C++ のように、フォールスルー（次のcaseにそのまま移る）コ
ードを書くにはどうすれば良いのでしょうか。 その場合には、 C#では、
  goto case n;
のように書くことになっています。以下のコードを参照。

  switch ( num ) {
  case 1:
      ...
      goto case 2;
  case 2:
      ....
      break;
  ...
  }


◆ 文字列による多分岐

C#では、switch 文において、文字列を比較対象にできます。これは、C++, 
Java等にはない特徴です。例えば、

   switch ( str ) {      // str は string型の変数
   case "C++":
       ...              // 任意のステートメント
       break;
   case "Jave":
       ...
       break;
   case "C#":
       ...
       break;
   }

といった記述が可能です。


----------------------------------------------------------------------
お詫び
  バックナンバーを確認していたら、Main メソッドの記述がバラバラである
  ことに気がつきました。

     static void Main() {

  と書いている回もあれば、

     static void Main(string[] args) {

  と書いている回もあり、統一が取れていませんでした。どうもすみません。
  Mainメソッドの引数は、コマンドプロンプトのパラメータを受け取る時に
  使うのですが、このメールマガジンでは  パラメータを受け取るプログラ
  ムを作りませんので、今後は、引数のない前者の記述に統一したいと思い
  ます。