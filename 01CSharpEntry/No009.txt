┏━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━┳━┳━┓
┃☆┃ C#プログラミングレッスン            -- 入門編 -- ┃＿┃□┃×┃
┗━┻━━━━━━━━━━━━━━━━━━━━━━━━━┻━┻━┻━┛
                                                          − No.009 −
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
■break と continue                                         2004/10/08
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

めっきり寒くなってきましたが、みなさん風邪など引いていないでしょうか。
薄着で夜更かしした僕は、ちょっと体調不良です。皆さんもお気をつけてくだ
さい。

■──────────────────────────────────
■ 今日のサンプルプログラム

◆プログラムコード (1)

  1:using System;
  2:
  3:class Program {
  4:    static void Main() {
  5:        string s = Console.ReadLine();
  6:        while (true) {
  7:            if (s == "quit")
  8:                break;
  9:            Console.WriteLine(s.Length);
 10:            s = Console.ReadLine();
 11:        }
 12:    }
 13:}

◆実行結果 (1)

 windows           <--- 入力した文字列
 7                 <--- 出力された結果
 computer
 8
 xml
 3
 quit


◆プログラムコード (2)

  1:using System;
  2:
  3:class Program {
  4:    static void Main() {
  5:        for (int i = 0; i < 100; i++) {
  6:            if (i % 13 != 0)
  7:                continue;
  8:            Console.WriteLine("{0}は13で割り切れる数です", i);
  9:        }
 10:    }
 11:}

◆実行結果 (2)

 0は13で割り切れる数です
 13は13で割り切れる数です
 26は13で割り切れる数です
 39は13で割り切れる数です
 52は13で割り切れる数です
 65は13で割り切れる数です
 78は13で割り切れる数です
 91は13で割り切れる数です

■──────────────────────────────────
■ プログラムの解説


◆ break

既に、switch文で、breakの説明をしましたが、breakは、もう一つの使い方が
あります。それは、ループからの脱出での利用です。
サンプルプログラムでは、 "quit" が入力されるまで、ループが繰り返されま
す。"quit"が入力されると、break 文が実行され、while ループから抜け出し
ます。
break は、for文 do-while文などの他のループ文でも利用できます。


◆ continue

continueに出会うと、それ以降の処理をスキップし、次の繰り返しが開始され
ます。
例えば、 上のサンプルプログラムでは、continue に出会うと、それ以降の処
理（ここでは、８行目の処理）がスキップされ、ループの先頭に戻り、次の i
に対しての処理となります。なお、サンプルプログラム(2)のループ部分は、

      for ( int i = 0; i < 100; i++ ) {
          if ( i % 13 == 0)
              Console.WriteLine("{0}は13で割り切れる数です",i);
      }

と書いたのと同じことになります。
このように、continueを使うと、プログラムの入れ子が深くなりすぎるのを避
けることができますので、上手に使うと、プログラムを読み易すくする効果が
有ります。
ただ、continue文は、break文と比べると、使われる頻度は低いと思われます。

なお、while や do-while で安易に使うと、無限ループになってしまう場合が
ありますので、注意してください。


■──────────────────────────────────
■ 補足事項・関連事項

◆while のちょっと高度？な書き方

プログラムコード(1)は、 break を使わずに、以下のように書くことも可能で
す。

  1:using System;
  2:
  3:class Program {
  4:    static void Main(string[] args) {
  5:        string s;
  6:        while ((s = Console.ReadLine()) != "quit") {
  7:            Console.WriteLine(s.Length);
  8:        }
  9:    }
 10:}

C#では(C/C++, Javaも同様ですが）、式そのものも値を持ちます。

  s = Console.ReadLine()

という式は、「代入された値」が、式の値となります。つまり、

  (s = Console.ReadLine()) != "quit"

は、 コンソールから読み取った文字列を s に代入し、 その代入した値が、
"quit" 以外かを判定していることになります。 これで、"quit"が入力された
ら、while ループから抜け出すことになります。

