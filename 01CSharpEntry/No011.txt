┏━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━┳━┳━┓
┃☆┃ C#プログラミングレッスン            -- 入門編 -- ┃＿┃□┃×┃
┗━┻━━━━━━━━━━━━━━━━━━━━━━━━━┻━┻━┻━┛
                                                          − No.011 −
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
■foreach                                                  2004/10/22
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

No010から、「まぐまぐ」での配信も開始し、現在は、「メルマ」「Macky！」
「まぐまぐ」の３つの配信システムを利用しています。「まぐまぐ」は、もっ
と早い時期に申請をしたかったのですが、 Webページ開設が前提となっている
ため、遅れてしまいました。
それにしても、「まぐまぐ」恐るべしですね。一気に読者数が増えて、うれし
いやら、恐いやらでちょっと戸惑っています。皆さんの期待に応えられるよう
頑張りますので、末永いご愛顧をお願いいたします。m(_ _)m

■──────────────────────────────────
■ 今日のサンプルコード

◆プログラムコード

  1:using System;
  2:
  3:class Program {
  4:    static void Main() {
  5:        int[] nums = new int[] { 0, 2, 4, 6, 8, 10, };
  6:        foreach (int n in nums) {
  7:            Console.WriteLine(n);
  8:        }
  9:        Console.ReadLine();
 10:    }
 11:}

◆実行結果

 0
 2
 4
 6
 8
 10

■──────────────────────────────────
■ プログラムの解説


◆ foreach

今回、新たに出てきた構文は、foreachだけです。C/C++では、繰り返しで最も
一般的なのは、for文でしたが、C# では、さらに便利な foreach文があります。
この foreach文は、Visual Basicから借用してきたものらしいですが、とても
便利です。

foreach の構文は、こんな感じになります。

  foreach ( <型> <変数名> in <配列名> ) {
       ....
  }

配列の中から、 要素を一つずつ取り出し、取り出した要素を 指定した変数に
入れ、処理を繰り返します。
サンプルコードで動きを追ってみると、

 1. nums から、先頭の要素をひとつ取り出し、int型の変数 n に入れる。
 2. 取り出した nに対して処理を行う。
    （ここでは、Console.WriteLine(n); )
 3. nums から、次の要素を一つ取り出し、int 型の変数 n に入れる
 4. 2-3 を要素がなくなるまで繰り返す。

とこんな感じです。 つまり、サンプルコードのforeach 文をfor文を使って書
き変えると以下のようになります。

    foreach (int n in nums) {
        Console.WriteLine(n);
    }
            ↓
    for ( int i = 0; i < nums.Length; i++ ) {
        int n = nums[i];         // foreachと対比するため、
        Console.WriteLine(n);    // わざと２行に分割している。
    }

どうです、foreachのほうが随分とすっきりしていますよね。foreachでは、

・配列の各要素にアクセスするためのインデックスが不要
・何回繰り返すかについても、プログラマは意識する必要がない

ということで、間違いにくいコードを書くことができます。

なお、 配列に格納されている値の型と 取り出す変数の型は一致している必要
があります。ここでは、numsは、int 型の配列ですから、取り出す変数も

   int n

と宣言しています。 ですから、もし、arr という配列が、double 型ならば、
arr に対する foreachは、

   foreach ( double d in arr )
       ....

となります。

この取り出した n は、 読み取り専用となります。ですから、次のように、値
を変えることはできません。

   for ( int n in nums ) {
       ...
       n = 0;
       ...
   }

まあ、考えれば当たり前ですね。


■──────────────────────────────────
■ 補足事項・関連事項


◆配列以外にもforeachは使える

foreachの面白いところは、配列以外でも foreach文が使えるということです。
具体的には、string, ArrayList, SortedList や、自分で作成したコレクショ
ンクラスなどです。これらを解説するには、まだまだ説明しなければいけない
ことが沢山あるので、今は、配列以外の複数の要素を格納できるコレクション
型（正確には、     IEnumerableインターフェースを実装しているクラス）で
foreachを使えるということだけ覚えておいてください。

ちなみに、文字列に対して foreach を使った例を、以下に示します。

   string str = "abcdefg";
   foreach ( char ch in str )
       Console.WriteLine(ch);

文字列 str から、１文字ずつ取り出し、それを ch という char 型の変数に
入れ、Console.WriteLine1(ch) を繰り返します。

◆取り出される順番

時々、 ネットの会議室や個人のWebページなどで、
「foreachで取り出す要素の順番は、実装依存なので、インデックスの順番に
  取り出される保証はない」
といった内容を見かける時がありますが、配列や文字列に限って言えば、先頭
から順番に取り出されることになります。

実際 MSDNには以下のような記述があります。

  -----------------------------------------
  foreach が配列の要素を走査する順序は、次のように定義されます。1 次元
  配列の場合、要素はインデックス 0 から始まってインデックス Length - 1
  で終わるインデックスの昇順に走査されます。
  -----------------------------------------

ただ、いわゆる順番という概念がないコレクション型も存在しますので、その
場合には、そのコレクション型の実装に依存することになります。


◆配列の初期化

サンプルコードの、配列の初期化ですが、「あれっ、10 の後ろにカンマ(,)が
あるけど、良いのかな？」と思った人がいると思います。
C/C++では、確か、エラーになったと思いますが、C# では、これは文法的にも
正しい初期化になっています。
C/C++経験者の方は、 配列の初期化時の最後要素に、カンマを付けたままで、
コンパイラーエラーになった経験があると思います。僕は、初期値の部分を、
前の行から複写することをよくやりますが、このとき、カンマを取り忘れてコ
ンパイラーに叱られた経験が何度もあります。なので、この機能は、僕に取っ
てはとても嬉しい機能です。
また、最初から、「要素の後ろにはカンマを付ける」ことにしておけば、後か
ら要素を追加するのもとても楽ですし、順番を入れ替えるのも簡単です。
プログラマーのことを考えた「痒いところに手が届く」という表現がぴったり
の構文ですよね。
