┏━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━┳━┳━┓
┃☆┃ C#プログラミングレッスン            -- 入門編 -- ┃＿┃□┃×┃
┗━┻━━━━━━━━━━━━━━━━━━━━━━━━━┻━┻━┻━┛
                                                          − No.019 −
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
■関数(値渡し)                                              2004/12/17
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

■──────────────────────────────────
■ 今日のサンプルコード

◆プログラムコード

  1: using System;
  2:
  3: class Program {
  4:     static void Main() {
  5:         int num = 10;
  6:         Add(num);
  7:         Console.WriteLine(num);
  8:     }
  9:     static void Add(int num) {
 10:         num += 1;
 11:     }
 12: }


◆実行結果

 10


■──────────────────────────────────
■ プログラムの解説


■値渡し

このプログラムの結果は、皆さんの予想したものと同じだったでしょうか。
Add関数では、 num に 1 加えているので、11 が表示されそうですが、そうは
ならずに、10 が表示されます。
これは、関数 Add に 渡されるのは、"値" そのものだからです。
実際には、 変数 num の一時的コピーが作られ、そのコピーが関数に渡ること
になります。このため、関数の中でいくら引数の値を変えても、それは、一時
的にコピーされた値が変るだけで、呼び出し側の変数には、影響を与えないと
いうことです。
つまり、 Main関数とAdd関数では、num という同じ変数名を使っていますが、
この２つの変数はまったく別物なのです。 ですから、Add の num をいくら変
更しても、Main の num には影響を与えません、
これを call by value （日本語では、値渡し）と言います。

値渡しを不便な制約と感じる人もいるかもしれませんが、この性質のおかげで
プログラムを安全にかつ簡潔に書けるようになっています。

では、 どうしたらnumの値を変更できるかと言えば、戻り値として返せば良い
のです。以下のようなコードになります。

    static void Main() {
        int n = 10;
        int x = Add(n);
        Console.WriteLine(x);
        // この3行は、Console.WriteLine(Add(10)); と書ける
    }
    static int  Add(int num) {
        return num + 1;
    }


■──────────────────────────────────
■ 補足事項・関連事項

◆配列を引数に渡す

引数に配列を渡した場合はどうなるのでしょうか。

using System;

class Program {
    static void Main() {
        int[] nums = new int[] {1, 2, 3, 4, 5};
        IncAll(nums);
        foreach (int x in nums)
            Console.Write("{0} ", x);
    }
    static void IncAll(int[] nums) {
        for ( int i = 0; i < nums.Length; i++ )
            nums[i] += 1;
    }
}

結果は、

2 3 4 5 6

と表示されます。さっきの説明（関数の中で、引数の値を変えても呼び出し元
に影響を与えない）と矛盾するようですが、配列の場合には、そのデータの中
身が渡るのではなく、配列へのアドレスが渡る仕様となっています。

   nums
  ┌────┐    ┏━┳━┳━┳━┳━┓
  │     ─ ┼ ─>┃1 ┃2 ┃3 ┃4 ┃5 ┃
  └────┘    ┗━┻━┻━┻━┻━┛

上の図は配列のメモリの状態を表したものです。 nums という変数には、配列
へのアドレス(番地）が格納されており、

   IncAll(nums);

では、 nums の変数の「値」である、配列へのアドレスが渡ります。つまり、
これも値渡しになっています。


----------------------------------------------------------------------

さて、今回で入門編は最後となります。次回からは、装いも新たにオブジェク
ト指向プログラミングの解説に入ろうと考えています。 入門編の後なので、
「基礎編」にしようかと思ったのですが、  そうすると「基礎編」「応用編」
「実践編」...などと、  名前を変え続けなくてはいけなくなりそうなので、
「○○編」という名前は付けずに、今後は「C#プログラミングレッスン」とい
う名前だけにしようと思います。
いずれにせよ、皆さんに購読し続けていただけるような内容を目指して頑張り
ますので、どうぞよろしくお願いいたします。

