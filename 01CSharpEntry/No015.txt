┏━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━┳━┳━┓
┃☆┃ C#プログラミングレッスン            -- 入門編 -- ┃＿┃□┃×┃
┗━┻━━━━━━━━━━━━━━━━━━━━━━━━━┻━┻━┻━┛
                                                          − No.015 −
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
■++,--演算子                                              2004/11/19
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

今回は、 ++, -- 演算子です。

第４回（No004）において、++演算子と-- 演算子について説明しましたが、今
回は、この演算子について、もう少し詳しく見て行くこととします。

■──────────────────────────────────
■ 今日のサンプルコード

◆プログラムコード

  1: using System;
  2:
  3: class Program {
  4:     static void Main() {
  5:         int n1,n2;
  6:         n1 = 5;
  7:         n2 = n1++;
  8:         Console.WriteLine(n2);
  9:         n1 = 5;
 10:         n2 = ++n1;
 11:         Console.WriteLine(n2);
 12:         n1 = 5;
 13:         Console.WriteLine(n1--);
 14:         n1 = 5;
 15:         Console.WriteLine(--n1);
 16:     }
 17: }


◆実行結果

 5
 6
 5
 4

■──────────────────────────────────
■ プログラムの解説

◆ ２つの書き方

++演算子と --演算子ですが、この演算子、
    ++num
    num++
と２つの書き方があります。前者を「前置インクリメント演算」、後者を「後
置インクリメント演算」と言いますが、この２つ、微妙に動作が異なります。
違いは、次の通りです。

前置インクリメント
   ++num において、インクリメント後のnum の値が、式の値となる。
後置インクリメント
   num++において、インクリメントする前のnumの値が、式の値となる。


◆サンプルコードの動作

この説明だけではわかり難いと思いますので、サンプルコードの動作を見て見
ましょう。
まずは、

  6:        n1 = 1;
  7:        n2 = n1++;
  8:        Console.WriteLine(n2);

ですが、
  1)  n1 に 1が代入される
  2)  n1 の値である 1 が、ある場所に保存される。
  3)  n1 がインクリメントされ、n1 の値が 2 となる。
  4)  保存されていた 1 が、n2 に代入される。
  5)  n2 の値である 1 が、Console.WriteLine に渡される。


と、 こんな流れになります。つまり、n2 は、インクリメントされる前の値が
代入されるわけです。

同様に、

  9:        n1 = 1;
 10:        n2 = ++n1;
 11:        Console.WriteLine(n2);

では、

  1)  n1 に 1が代入される
  2)  n1 がインクリメントされ、n1 の値が 2 となる。
  3)  n1 の値 2 が、n2 に代入される。
  4)  n2 の値である 2 が、Console.WriteLine に渡される。

となり、動作がことなります。

Console.WriteLineの引数に渡されるときも同様です。 実行結果を見ていただ
ければ分かるように、

 13:        Console.WriteLine(n1--);

では、デクリメント前の値である 5が、渡され、

 15:        Console.WriteLine(--n1);

では、デクリメント後の値である、4が渡されます。


■──────────────────────────────────
■ 補足事項・関連事項

◆配列のインデックス操作で使う

この ++, -- 演算子は、配列のインデックスを操作するときなどに使うと、
とてもコードがコンパクトになります。例えば、

  if ( n > 0 ) {
      i++;
      a[i] = n;
  }

は、

  if ( n > 0 ) {
      a[++i] = n;
  }

と書けます。 ただし、この時に、a[i++] と書くと結果が変ってしまいますの
で、注意する必要があります。
