┏━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━┳━┳━┓
┃☆┃ C#プログラミングレッスン            -- 入門編 -- ┃＿┃□┃×┃
┗━┻━━━━━━━━━━━━━━━━━━━━━━━━━┻━┻━┻━┛
                                                          − No.014 −
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
■キャスト                                                 2004/11/11
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

■──────────────────────────────────
■ 今日のサンプルコード

◆プログラムコード

  1: using System;
  2:
  3: class Program {
  4:     static void Main() {
  5:         int a = 10;
  6:         int b = 4;
  7:         int n1 = a / b;
  8:         double n2 = a / b;
  9:         double n3 = (double)a / b;
 10:         Console.WriteLine("{0}, {1}, {2}", n1, n2, n3);
 11:     }
 12: }

◆実行結果

 2, 2, 2.5

■──────────────────────────────────
■ プログラムの解説

◆キャストとは

キャストとはある型を強制的に別の型へと変換することです。例えば、

  double d = 10.5;
  int    n = d;     // エラー

というコードは、コンパイルエラーになります。それは、小数点付きの数値を、
整数型の変数に代入すると、精度が失われる危険があるためです。このような
時には、 「精度が失われても良いから、int型に無理やり代入してね」と、コ
ンパイラーにお願いする必要があります。具体的には、以下のようなコードと
なります。

  double d = 10.5;
  int    n = (int)d;     // OK ただし、精度が失われる

この () をキャスト演算子と言います。() の中に変換したい型名を書きます。
整数型同士の代入であっても、精度が失われる危険がある場合には、やはりキ
ャストが必要です。
例えば、
  long型から int型への代入   //大きな値の場合、int 型に入りきれない
  int型から uint型への代入   //符号が失われる危険がある
が、該当します。

一方、以下のようなコードの場合には、精度が失われることはありませんから、
キャストは不要です。

  int  n = 10;
  double d = n;

  short sn = 10;
  int n = sn;

  char ch = 'A';
  int  n  = ch;

最後の例は、「文字を数値にする」という変な例ですが、C#では、char 型は、
16ビット整数として扱われますので、int 型に代入することができます。

なお、以下のような論理的に正しく無いキャストは、コンパイル時にエラーと
なります。

  int n = 10;
  string s = (string)n;

  ※ 整数を文字列に代入するって、どういうこと？

  int x = 10;
  bool b = (bool)x;

  ※ 整数を true/false に変換するって、どういうこと？

◆サンプルコードの説明

さて、 サンプルコードの説明に入りましょう。

a / b の計算結果は、 int 同士の計算のため、結果も int 型になりますので、

   int n1 = a / b;

が実行されると、n1 には、int型の結果が入ります。次に

   double n2 = a / b;

では、 受け取る型は、doubleですが、計算結果は int型なので、'2'と表示さ
れ、小数点以下の数を受け取ることができません。最後の

   double n3 = (double)a / b;

では、片方の変数を double 型にキャストしています。どちらかが、double型
の場合、計算結果もdouble型となり、小数点以下まで n3 に入れることが出来
ます。

   double n4 = (double)a / (double)b;
と両方をキャストしても結果は同じです。

ただし、

   double n5 = (double)(a / b);

と、計算式をキャストしてしまうと、計算が終わった時点で、小数点は無くな
っていますので、意図した結果は得られません。


■──────────────────────────────────
■ 補足事項・関連事項

◆条件演算子 (?:)

int を bool に型変換したい時（例えば、 0なら false 0、以外なら、trueへ
変換）はどうしたら良いのでしょうか。この時には、キャスト演算子が使えま
せんので、以下のようにする必要があります。

  int x = 10;
  bool b;
  if ( x == 0 )
       b = false;
  else
       b = true;

でも、これだと長ったらしいですよね。そんな時には、条件演算子(?:)が使え
ます。?: 演算子の書式は、

  <条件式> ? <式１> : <式２>

となり、<条件式> が true ならば、<式１>が評価されて結果になります。<条
件式> が false ならば、<式２>が評価されて結果になります。

この?:演算子を使うと、上の if 文は、以下のように書き変えることが可能で
す。

  int x = 10;
  bool b = ( x == 0 ) ? false : true;

C/C++を使っている人にはお馴染みの構文ですが、 始めて目にした方には、な
んか呪文のようなコードに見えるかもしれません。まあ慣れれば、結構便利だ
ったりします。


◆Convert.ToBoolean

上記と同様のことをやる場合、Convert.ToBoolean を使う方法もあります。

  int x = 10;
  bool b = Convert.ToBoolean(x);

これで、上と同じことが実現できます。

  Convert というのは、クラス名で、ToBooleanは、メソッド名と言うのです
  が、これについては、後で説明しますね。

