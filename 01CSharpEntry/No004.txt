┏━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━┳━┳━┓
┃☆┃ C#プログラミングレッスン            -- 入門編 -- ┃＿┃□┃×┃
┗━┻━━━━━━━━━━━━━━━━━━━━━━━━━┻━┻━┻━┛
                                                          － No.004 －
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
■ 繰り返し while                                           2004/09/06
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

■──────────────────────────────────
■ 今日のプログラム

◆プログラムコード

  1: using System;
  2:
  3: class Sample1 {
  4:    static void Main(string[] args) {
  5:        Console.WriteLine("平成  西暦 ");
  6:        int year = 1;
  7:        while ( year <= 16 )  {
  8:            Console.WriteLine(" {0}   {1}",year,year + 1988);
  9:            year = year + 1;
 10:        }
 11:    }
 12: }


◆実行結果

平成  西暦
 1   1989
 2   1990
 3   1991
 4   1992
 5   1993
 6   1994
 7   1995
 8   1996
 9   1997
 10   1998
 11   1999
 12   2000
 13   2001
 14   2002
 15   2003
 16   2004


■──────────────────────────────────
■ プログラムの解説

◆using

まず、今までのプログラムと違うのは、１行目に、

  using System;

という行が追加されている点と、System.Console.WriteLine の Systemが取れ
ていることです。もう察しが付いたと思いますが、最初の１行を追加すること
で、それ以降のSystemが省略できるようになります。

この System  というのは、「名前空間」と呼ばれているものです。
   using  System
と書くことで、 System名前空間に属している Console.WriteLine は、System
を付けなくても、 C#コンパイラが、System.Console.WriteLine のことだと認
識してくれるという訳です。

では、
  using System.Console

と書けば、WriteLine だけで良いのか、というとそういう訳にはいきません。
usingで指定できるのは、 「名前空間」なのですが、Console は名前空間では
無いからです。(Consoleはクラス名です）
usingについてさらに詳しい説明をしようとすると、 クラスなどについても説
明しないといけないので、今回はこのへんでやめておきます。

◆while文

繰り返し処理をする時に利用する構文です。
while の構文は、

   while ( 条件式 ) {
       ...
   }

で、() の中の条件式が成り立っている間、{ と } で囲まれた部分を繰り返し
ます。
   ※ 正確には、繰り返し処理したい部分が、複数の文から成っている時に、
      { } で括ります。単文の場合には、{ } は不要です。付けても間違い
      ではありません。
       
今回のプログラムでは、
    year <= 16
と条件を指定していますから、year という変数の値（初期値は 1）が、16 以
下の間は、 { } 内の処理が実行され、16 より大きくなったら、繰り返しから
抜け出します。

◆Console.WriteLine

8行目のConsole.WriteLineは、今までの書き方と違っていることに気が付いた
と思います。{0} とか {1} という記述がありますね。

  Console.WriteLine(" {0}   {1}",year,year + 1988);

これは、{0} の部分を、その後ろに記述した year に置き換え、{1} の部分を、
year+1988に置き換えて、出力するという意味になります。
{ } の中の数値は、「何番目の引数か」を示しています。この番号は、0 から
始まります。

前回の No003 で示したコードは、以下のように書き変えることができます。

  Console.WriteLine("aの値は " + a + " です");
                       ↓
  Console.WriteLine("aの値は {0} です", a);

好みによる差はあるかもしれませんが、+ が複数ある場合には、個人的には後
者をお勧めします。


■──────────────────────────────────
■ 補足事項・関連事項

◆比較演算子

C#では、以下の比較演算子が用意されています。
  x == y    x と y が等しい場合は true、等しくない場合は false
  x != y    x と y が等しくない場合は true、等しい場合は false
  x < y     x が y より小さい場合は true、小さくない場合は false
  x > y     x が y より大きい場合は true、大きくない場合は false
  x <= y    x が y より小さいか等しい場合は true、大きい場合は false
  x >= y    x が y より大きいか等しい場合は true、小さい場合は false

等しいかどうかの演算子は、 == と = を２つ繋げますので注意してください。
なお、比較した結果は、bool 値(trueかfalse)を持ちます。

◆ インクリメント演算子とデクリメント演算子

9 行目の
  year = year + 1;

は、C#では、
  year++;      (1)

と書くのが一般的です。同様に、
  year = year - 1;

は、
  year--;

と書けます。また、
  ++year;      (2)
  --year;

と書く事もできます。

これらの演算子を、インクリメント演算子、デクリメント演算子と言います。
この演算子を後ろに付ける書き方(1)と、前に付ける書き方(2)では、その意味
するところが微妙に異なっているのですが、今のところは、同じものだと考え
てください。


