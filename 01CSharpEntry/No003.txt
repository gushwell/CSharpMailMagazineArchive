┏━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━┳━┳━┓
┃☆┃ C#プログラミングレッスン            -- 入門編 -- ┃＿┃□┃×┃
┗━┻━━━━━━━━━━━━━━━━━━━━━━━━━┻━┻━┻━┛
                                                          − No.003 −
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
■ C#で変数を使うには (2)                                   2004/08/30
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

■──────────────────────────────────
■ 今日のプログラム

前回は、文字列を扱うための string型の変数について説明しました。今回は、
数値を扱う時に必要となる変数について説明します。

◆
  1: class Sample1 {
  2:     static void Main(string[] args) {
  3:         int a;
  4:         int b;
  5:         int sum;
  6:         a = 32;
  7:         b = 8;
  8:         sum = a + b;
  9:         System.Console.WriteLine("aの値は " + a + " です");
 10:         System.Console.WriteLine("bの値は " + b + " です");
 11:         System.Console.WriteLine("sumの値は " + sum + " です");
 12:     }
 13: }

 ※先頭の「数値:」は説明用ですので、プログラムの一部ではありません。

◆結果

  aの値は 32 です
  bの値は 8 です
  sumの値は 40 です


■──────────────────────────────────
■ プログラムの解説

◆変数の宣言と初期化

3行目から5行目で、a,b sum という３つの int 型(整数型）の変数を宣言して
います。a, b, sumには、整数を格納することができます。

   a = 32;

で、a に 32 を代入（格納）しています。

◆加算

  sum = a + b;

説明するまでもないと思いますが、a + b で a と b に格納されている整数の
加算をし、その結果を sumに代入しています。

◆初期化

文字列の時と同様、変数を宣言するときに、初期値を与えることもできます。
3行目から8行目は、以下のように書き変える事が可能です。

        int a = 32;
        int b = 8;
        int sum = a + b;

C#では、こちらの方が一般的ですね。

◆文字列と数値の加算 ？

9行目で、 Console.WriteLine("aの値は " + a + " です"); と文字列と a と
いう整数型変数を + 記号でつなげていますが、 これは、加算を行っているの
ではなく、 文字列の連結と解釈されます。a が数値としての 32から、文字列
の "32" に変換され、前後の文字列と連結されています。


■──────────────────────────────────
■ 補足事項・関連事項

◆四則演算

小学校の時に習った算数と同様、加算以外の演算も行えます。

  +  加算
  -  減算
  *  乗算   // × の代用です
  /  除算   // ÷ の代用です
  %  剰余

+, - などの記号を演算子と言います。演算子には、優先順位があり、+, - よ
り *, / の方が先に計算されます。また、以下のように、( ) を使って、演算
の優先順位を変更することができます。

  heikinn = ( a + b ) / 2

数学の数式と変わりはないですから、それほど戸惑うことはないですよね。
ただ、 演算子 % は、プログラミングならではの記号で、剰余を表します。例
えば、a,b がint型のような整数型の場合、a % b と書くと、a / bの余りが求
まります。

◆小数付きの数値を扱う場合には

小数付きのデータを扱う場合には、intではなく、double を使うのが一般的で
す。以下に double を使った例を示します。

    double a = 100.0
    double b = 0.05;
    double c = a * b;

◆変数の型

C#では、string, int, doubleの他にも多くのデータ型が用意されています。
C#で利用できるデータ型は以下の通りです。

整数型
  sbyte  符号付き 8ビット整数   -128 〜 127
  byte   符号なし 8ビット整数   0 〜 255
  short  符号付き 16ビット整数  -32768 〜 32767
  ushort 符号なし 16ビット整数  0 〜 65535
  int    符号付き 32ビット整数  -2147483648 〜 2147483647
  uint   符号なし 32ビット整数  0 〜 4294967295
  long   符号付き 64ビット整数  -9223372036854775808〜
                                                  9223372036854775807
  ulong  符号なし 64ビット整数  0〜18446744073709551615

浮動小数点型
  float  32 ビット単精度
  double 64 ビット倍精度

その他
  char    文字型
  string  文字列型
  bool    ブール型  (true, falseの2値）
  decimal 実数を扱う型。浮動小数点と違い、丸め誤差が無いため、
          財務計算に適している。
		  
  ※char は、C#の文法的には、整数型に分類されていますが、char を数値と
    して扱うことは、通常ありませんので、ここでは、その他に分類していま
    す。

整数型は、 ７種類もありどれを使ったらよいのか迷いそうですが、 通常は、
int 型を使います。それ以外の型を使う場面は、それほど多くはありません。

