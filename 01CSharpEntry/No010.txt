┏━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━┳━┳━┓
┃☆┃ C#プログラミングレッスン            -- 入門編 -- ┃＿┃□┃×┃
┗━┻━━━━━━━━━━━━━━━━━━━━━━━━━┻━┻━┻━┛
                                                          − No.010 −
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
■配列                                                     2004/10/14
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

みなさん、こんにちは、今回は配列の説明です。
配列は、プログラムを行う際にとても重要な概念のひとつです。初心者の方は
しっかりと自分のものとしてくださいね。また、C#以外の言語をご存知の方は
宣言の仕方が、異なっている部分もありますので、その違いに注意してくださ
い。

■──────────────────────────────────
■ 今日のサンプルコード

◆プログラムコード

  1:using System;
  2:
  3:class Program {
  4:    static void Main() {
  5:        int[] nums = new int[10];
  6:        for (int i = 0; i < 10; i++) {
  7:            nums[i] = i * i;
  8:        }
  9:        for (int i = 0; i < 10; i++) {
 10:            Console.WriteLine(nums[i]);
 11:        }
 12:        Console.ReadLine();
 13:    }
 14:}

◆実行結果

 0
 1
 4
 9
 16
 25
 36
 49
 64
 81


■──────────────────────────────────
■ プログラムの解説

◆配列とは

配列とは、複数の要素をまとめて管理するために用意されているデータ構造で
す。例えば、30人分のテストの点数を記憶しておくのに、30個の変数を用意し
ていたのでは大変です。そこで以下のように一つの変数名で複数の要素を扱え
ると便利です。

  point[5] = 70;              // 5人目の点数
  point[6] = 60;              // 6人目の点数
  if ( point[n] >= 50 ) {     // n人目の点数が50以上なら
      ...

C#では、変数名の後ろに[ ] を付けて、そこに配列の添え字を書くことで、一
つの変数名で複数の要素を管理することができるようになっています。
なお、C#では、他の多くの言語同様、添え字（インデックスとも言います）は、
0 から始まるお約束になっています。

◆配列の宣言

では、どのように宣言するかというと、

  int[] nums;    ... (1)

と書くことで、int型のデータが入るnums という名前の配列を宣言したことに
なります。ただし、これだけでは、配列を使うことはできません。いくつの要
素がそこに入るのかを次のようにコンピュータに教えてあげる必要があります。

  nums = new int[10];   ...(2)

これで、 nums は、10個の要素（インデックスが 0 から 9 ）が入る配列とし
て利用できるようになります。new というのは、配列の要素を割り当てるとき
のC#のキーワードです。

なお、通常は、サンプルコードのように(1)と(2)をまとめて、

  int[] nums = new int[10];

と書くのが一般的です。以下のようには書くことはできません。

  int nums[] = new int[10];  // ×

他のデータ型の配列も書き方は同じです。

  double[] weights = new double[5];
  string[] names = new string[20];

のように書きます。


◆要素へのアクセス

配列の各要素にアクセスするには、「配列とは」のところで説明しましたが、
配列変数名の後ろに[ ]を付け、[ ]の中に、要素の何番目かを指定するインデ
ックスを書きます。サンプルコードでは、7 行目と 10 行目が配列にアクセス
している行です。通常の変数同様、参照することも代入することもできます。

   7:            nums[i] = i * i;

  10:            Console.WriteLine(nums[i]);


◆配列と繰り返し処理

配列とfor文などの繰り返し処理は切っても切れない深い関係にあります。 配
列は、繰り返し文と共に使うことで大きなメリットが生まれます。もし、サン
プルコードを配列を使わないで書くとしたら、

   num0 = 0 * 0;
   num1 = 1 * 1;
   num2 = 2 * 2;
   num3 = 3 * 3;
   ...
   Console.WriteLine(num0);
   Console.WriteLine(num1);
   Console.WriteLine(num2);
   Console.WriteLine(num3);
   ...

となります。これでは、同じ事を何回も記述する必要がありますから、面倒で
すよね。配列にすれば、

        for (int i = 0; i < 10; i++) {
            nums[i] = i * i;
        }
        for (int i = 0; i < 10; i++) {
            Console.WriteLine(nums[i]);
        }

のように書けますから、とても楽チンです。
なお、配列のインデックスは、0 から始まりますから、for 文で回すときに
もループ変数は、0から始まるようにします。この例では、繰り返しの最後は、
のインデックスは、9ですから、
    i < 10
となります。
    i <= 10
ではありません。

なお、
    i <= 9
と書いても正しく動きますが、このような書き方は一般的ではありません。


■──────────────────────────────────
■ 補足事項・関連事項

◆配列の要素数

nums.Length と記述することで配列の要素数を求めることができます。この
Lengthをプロパティと呼び、全ての配列で利用可能です。Lengthプロパティを
使うと、サンプルコードは、以下のように書き変えることができます。

  1:using System;
  2:
  3:class Program {
  4:    static void Main() {
  5:        int[] nums = new int[10];
  6:        for (int i = 0; i < nums.Length; i++) {
  7:            nums[i] = i * i;
  8:        }
  9:        for (int i = 0; i < nums.Length; i++) {
 10:            Console.WriteLine(nums[i]);
 11:        }
 12:        Console.ReadLine();
 13:    }
 14:}

このようにしておけば、配列の要素数を 10 から 20に変更したい場合でも簡
単に対応が可能です。

        int[] nums = new int[10];
を
        int[] nums = new int[20];

とするだけですから、簡単ですよね。Length を使わないと、10と書かれた
箇所を探し出し、全てを変更しなければなりません。

◆配列の初期化

C# で、配列の内容を初期化するには、配列の宣言時に初期値を中かっこ ({})
で囲むことにより、配列を初期化できます。以下の例をご覧ください。

  int[] numbers = new int[4] {4, 3, 2, 1};
  string[] names = new string[4] {"C#", "Java", "C++", "VB" };

なお、この際、配列のサイズは、以下のように省略することが可能です。

  int[] numbers = new int[] {4, 3, 2, 1};
  string[] names = new string[] {"C#", "Java", "C++", "VB" };

このほうが、配列の要素数を減らしたり、増やしたりが簡単ですので、僕は、
省略することが多いです。
また、次のように new 演算子を省略することもできます。

  int[] numbers = {4, 3, 2, 1};
  string[] names = {"C#", "Java", "C++", "VB" };

◆多次元配列

今までの説明は、１次元配列ですが、２次元、３次元といった、多次元配列
を扱うこともできます。以下は、２次元配列の例です。

  int[,] myArray = new int[4,2];
  myArray[0,0] = 0;
  myArray[0,1] = 2;

myArrayは、4つの行と2つの列からなる２次元配列です。宣言時に初期化する
には、以下のように書きます。

  int[,] myArray = new  int[,] { {0,2}, {4,6}, {8,10}, {12,14} };

どういったソフトウェアを作るかにもよりますが、多次元配列の使用頻度は
それほど多くはないと思います。実際に、僕の場合は、業務で多次元配列を
使ったことがありません。