■━ [C#プログラミングレッスン] ━━━━━━━━━━━━━ No.212 ━□
  
 「C#入門編 2nd」 -- 配列とリスト
                                                         by Gushwell  
□━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━■

■□─────────────────────────────────
■□ 配列

配列は、プログラムを行う際にとても重要な概念のひとつです。初心者の方は
しっかりと自分のものとしてくださいね。
配列とは、複数の要素をまとめて管理するために用意されているデータ構造で
す。例えば、30人分のテストの点数を記憶しておくのに、30個の変数を用意し
ていたのでは大変です。そこで以下のように一つの変数名で複数の要素を扱え
ると便利です。

  point[5] = 70;              // 5人目の点数
  point[6] = 60;              // 6人目の点数
  if ( point[n] >= 50 ) {     // n人目の点数が50以上なら
      ...

C#では、変数名の後ろに[ ] を付けて、そこに配列の添え字を書くことで、一
つの変数名で複数の要素を管理することができるようになっています。
なお、C#では、他の多くの言語同様、添え字（インデックスとも言います）は、
0 から始まるお約束になっています。

では、さっそく配列を扱ったサンプルコードをお見せします。

using System;

namespace ConsoleApplication1 {
    class Program {
        static void Main(string[] args) {
            int[] nums = new int[10];
            for (int i = 0; i < 10; i++) {
                nums[i] = i * i;
            }
            for (int i = 0; i < 10; i++) {
                Console.WriteLine("{0} × {0} = {1}",i, nums[i]);
            }
            Console.ReadLine();
        }
    }
}

実行結果は、以下のようになります。

0 × 0 = 0
1 × 1 = 1
2 × 2 = 4
3 × 3 = 9
4 × 4 = 16
5 × 5 = 25
6 × 6 = 36
7 × 7 = 49
8 × 8 = 64
9 × 9 = 81

簡単にコードの解説します。

◆配列の宣言

 int[] nums = new int[10];

が、配列を宣言しているところです。ここでは、numsという変数int型のデー
タが10個入る配列を宣言しています。
他のデータ型の配列も書き方は同じです。

  double[] weights = new double[5];
  string[] names = new string[20];

のように書きます。

また、以下のように、配列の宣言と同時に、各要素を初期化することもできま
す。

  int[] nums = new int[6] { 0, 2, 4, 6, 8, 10, };
  int[] nums = new int[] { 0, 2, 4, 6, 8, 10, };
  int[] nums = new[] { 0, 2, 4, 6, 8, 10, };
  int[] nums = { 0, 2, 4, 6, 8, 10, };

この4行は、どれも同じ意味です。どれを使ってもよいのですが、最初の行は
ほとんど使われないと思います。いちいち配列の要素数を人間が数えることは
無いですよね。

◆要素へのアクセス

配列の各要素にアクセスするには、配列変数名の後ろに[ ]を付け、[ ]の中に、
要素の何番目かを指定するインデックスを書きます。上記コードでは、

 nums[i] = i * i;   // 代入

 Console.WriteLine("{0} × {0} = {1}",i, nums[i]);  // 参照

が、配列にアクセスしている行です。

◆繰り返し処理

配列と繰り返し処理は切っても切れない深い関係にあります。 配列は、繰り
返し文と共に使うことで大きなメリットが生まれます。もし、サンプルコード
を配列を使わないで書くとしたら、

   nums[0] = 0 * 0;
   nums[1] = 1 * 1;
   nums[2] = 2 * 2;
   nums[3] = 3 * 3;
   ...
   ...

となります。これでは、同じ事を何回も記述する必要がありますから、面倒で
すよね。配列にすれば、

  for (int i = 0; i < 10; i++) {
       nums[i] = i * i;
  }

のように書けますから、とても楽です。
なお、配列のインデックスは、0 から始まりますから、for 文で回すときに
もループ変数は、0から始まるようにします。

■□─────────────────────────────────
■□ foreach

さて、配列と繰り返し処理でとても重要な構文があります。それが foreach
です。

foreach の構文は、こんな感じになります。

  foreach ( <型> <変数名> in <配列名> ) {
       ....
  }

配列の中から、 要素を一つずつ取り出し、取り出した要素を 指定した変数に
入れ、処理を繰り返します。

foreachを使った例をお見せします。

  int[] nums = new int[] { 0, 2, 4, 6, 8, 10, };
  foreach (int n in nums) {
      Console.WriteLine(n);
  }

このサンプルコードで動きを追ってみると、

 1. nums から、先頭の要素をひとつ取り出し、int型の変数 n に入れる。
 2. 取り出した nに対して処理を行う。
    （ここでは、Console.WriteLine(n); )
 3. nums から、次の要素を一つ取り出し、int 型の変数 n に入れる
 4. 2-3 を要素がなくなるまで繰り返す。

とこんな感じです。 つまり、サンプルコードのforeach 文をfor文を使って書
き変えると以下のようになります。

    foreach (int n in nums) {
        Console.WriteLine(n);
    }
            ↓
    for ( int i = 0; i < nums.Length; i++ ) {
        int n = nums[i];         // foreachと対比するため、
        Console.WriteLine(n);    // わざと２行に分割している。
    }

    ※ nums.Length と記述することで配列の要素数を求めることができま
       す。

どうです、foreachのほうが随分とすっきりしていますよね。foreachでは、

・配列の各要素にアクセスするためのインデックスが不要
・何回繰り返すかについても、プログラマは意識する必要がない

ということで、間違いにくいコードを書くことができます。

ただし、foreachでは、配列の要素は読み取り専用となります。ですから、
次のように、値を変えることはできません。

   for ( int n in nums ) {
       ...
       n = 0;
       ...
   }

■□─────────────────────────────────
■□ 配列以外でのforeach

foreachの面白いところは、配列以外でも foreach文が使えるということです。
具体的には、string, List<T>, IEnumerable<T> や、自分で作成したコレクシ
ョンクラスなどです。これらを解説するには、まだまだ説明しなければいけな
いことが沢山あるので、今は、配列以外でも使えるということを覚えておくだ
けでよいです。

せっかくなので、文字列に対する foreach文を見てみます。

 string str = "Visual Studio 2008";
 foreach (char c in str) {
     if (c != ' ')
         Console.Write("{0}",c);
 }
 Console.WriteLine();

この例では、文字列の中の文字を１文字ずつ取り出し、空白文字以外をコンソ
ールに出力しています。
結果は、

VisualStudio2008

と表示されます。

■□─────────────────────────────────
■□ リスト List<T>

これまで見てきたように、配列は複数の要素を格納する祭に利用する基本的な
データ構造ですが、いくつの要素を格納するのかが事前に分らない場合に対応
が困難です。後から、サイズを変更したくても、変更することができません。

そんな時に利用できるのが、.NET Frameworkに用意されている List<T>クラス
です。
List<T>クラスは、配列とは異なる、動的にサイズを変更することが可能です。

※ ここで、はじめてクラスという用語が出てきました。クラスについては、
   別途説明するよですです。今は、ソフトウェアの「部品」だと思ってくだ
   さい。

※ .NET Framework 1.x では、ArrayListというクラスが使われていましたが、
   .NET Framework 2.0 から List<T>クラスが追加されため、現在では
   ArrayListが使われることはほとんどありません。

■──────────────────────────────────
■ List<T>にオブジェクトを追加する

以下に、追加するコードを示します。

  List<string> list = new List<string>();
  list.Add("C#入門");
  list.Add("C#応用");
  list.Add("やさしいC#");

まず、最初の行で、list変数の宣言と初期化をしています。配列では、

 string[] list = new sring[10];

のように書くところを、Listでは、

  List<string> list = new List<string>();

と書きます。リストでは要素数を指定しません。
List<string>というのは、string型を要素に持つリストですという意味です。
もし、int 型の要素を持つリストを作成したいならば、

  List<int> list = new List<int>();

と書きます。

2行目以降では、Add 文字列を追加しています。文字列は、リストの最後尾に
追加されます。
Listの領域は、自動で拡張されますので、リストのサイズを気にすることなく
要素を追加していけます。


■──────────────────────────────────
■ List<T>からオブジェクトを取り出す

Listから要素を取り出すには、インデクサを使い、

  string book = list[0];  // 0番目の要素を取り出す

のように記述します。Listでは、Addした順番にオブジェクトが格納されます
ので、 list[0] で "C#入門" の文字列が取得できます。


■──────────────────────────────────
■ すべての要素を取り出す

すべての要素を取り出すコードを示します。

 for (int i = 0; i < list.Count; i++) {
     string book = list[i];
     Console.WriteLine(book);
 }

List型の変数に .でつなげ、Countと書くことで、要素の数を知ることができ
ますので、この数だけ、ループさせることで、すべての要素を取得できます。

先ほどのコードは、foreach 文を使えば、さらに簡単に記述できます。
この場合は、キャストは不要です。

 foreach (string book in list) {
     Console.WriteLine(book);
 }


■──────────────────────────────────
■ List<T>のその他の機能

・Insert

  指定したインデックスの位置に要素を挿入します。
  第１引数には、挿入する位置を指定します。0 から始まるインデックス番号
  です。

    list.Insert(2, "犬でもわかるC#");

・Remove

  最初に見つかった特定の要素削除します。

    string book = "みんなのC#";
    list.Add(book);
    ...
    list.Remove(book);    // "みんなのC#"を削除

・RemoveAt

  指定したインデックスにある要素を削除します。

    list.RemoveAt( 2 );  // ２番目の要素を削除

・Clear

  すべての要素を削除します。

    list.Clear();  // すべての要素をArrayListから削除


・ToArray

  配列を作成し、List の全要素をその配列にコピーします。

    string[] books = list.ToArray();
    foreach (Book book in books) {
       Console.WriteLine(book);
    }


───────────────────────────────────
『C#プログラミングレッスン』  (ぼぼ週刊）                             
───────────────────────────────────
 Published by Gushwell.                                               
   Copyright (C) 2004-2009 Gushwell All rights reserved.              
   Microsoft MVP - Visual C#(Apr 2005 - Mar 2010)                     

 <<■ Gushwell's Page ■>>
 窓際プログラマ―の独り言  ：http://blog.livedoor.jp/gushwell/        
 窓際プログラマ―の読書三昧：http://gushwell.jugem.jp/                
 Gushwell's F# Programming Diary : http://techbank.jp/gushwell/       
 Gushwell's C# Programming Page  ：http://gushwell.ifdef.jp/          
   C#デザインパタ―ン : http://gushwell.ifdef.jp/dp/csdpindex.html    

 ☆メールマガジンの感想お待ちしています☆                             
   http://gushwell.ifdef.jp/mail.html                                 

 <<■ コミュニティtechbank.jp (http://techbank.jp/) ■>>
 Gushwellが参加している技術系コミュニティです。
 マイクロソフト系テクノロジー＆製品に特化したコミュニティで、Webサイト
 では、VB、C#、VC++、SQL Server, BizTalk Server などの技術情報を公開し
 ています。皆さんの参加をお待ちしています。
 ブロガーさんも募集中です。
───────────────────────────────────