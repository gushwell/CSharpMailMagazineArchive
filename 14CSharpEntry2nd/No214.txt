■━ [C#プログラミングレッスン] ━━━━━━━━━━━━━ No.214 ━□
  
 「C#入門編 2nd」 -- クラスへの第一歩
                                                         by Gushwell  
□━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━■

いよいよ、C#プログラミング（オブジェクト指向プログラミング）において、
最も重要となるクラスについての説明に入ります。

■□─────────────────────────────────
■□ クラス以前

あなたのプログラムで、書籍の情報を扱う必要が出てきたとします。
いままでの、知識からだと、

   string bookTitle;     // 書籍名
   string bookAuthor;    // 著者
   int    bookPrice;     // 価格
   string bookPublisher; // 出版社

などと定義し、処理をすることになると思われます。
では、一度に複数の書籍を扱う必要が出てきた時にはどうでしょうか。

   string bookTitle1;     
   string bookAuthor1;    
   int    bookPrice1;     
   string bookPublisher1; 
   string bookTitle2;     
   string bookAuthor2;    
   int    bookPrice2;     
   string bookPublisher2; 
   string bookTitle3;     
   string bookAuthor3;    
   int    bookPrice3;     
   string bookPublisher3; 
   ...

でしょうか、それとも、

   string[] bookTitle = new string[10];     
   string[] bookAuthor = new string[10];    
   int[]    bookPrice = new int[10];     
   string[] bookPublisher = new string[10]; 

と定義するでしょうか。たしかに、これでも処理する事は可能です。

しかし本来ならば、bookTitle, bookAuthor, bookPrice, bookPublisher は４
つが揃って（あるいは、それ以上の情報が必要かもしれませんが）書籍情報と
して意味があるはずです。 

これらの項目を別々に扱わなくてはならないのでは、プログラムが複雑になり、
可読性が落ち、修正も困難になってしまいます。
何よりも、「書籍」という概念をプログラムコードに反映させることが出来て
いません。もしプログラムで「書籍という概念」を扱えるようになれば、プロ
グラミングももっと楽になるはずです。


■□─────────────────────────────────
■□ クラスの定義

そこでクラスの登場となるわけです。クラスを定義することで、書籍という概
念をプログラムで扱えるようになります。

   class Book {
       public string bookTitle;     // 書籍名
       public string bookAuthor;    // 著者
       public int    bookPrice;     // 価格
       public string bookPublisher; // 出版社
   }

これで、Bookクラスのできあがりです。
クラスを定義するには、  classキーワードの後に、 クラスの名前を記述し、
その後の { と } の中にクラスの中身を書きます。
この例では、Bookという名前のクラスには、bookTitle, bookAuthor, 
bookPrice,  bookPublisherという4つのデータが存在することになります。こ
のデータのことを「フィールド」と呼びます。

※ この Bookクラスは、クラスとしてあまり良いものではないのですが、クラ
   スの第一歩ということで良しとしましょう。


■□─────────────────────────────────
■□ クラスの利用

このクラスを利用する例を以下に示します。

 using System;

 namespace ConsoleApplication1 {
    class Program {
        static void Main(string[] args) {
            Book myBook;
            myBook  = new Book();
            myBook.title = "伊豆の踊り子";
            myBook.author = "川端康成";
            myBook.price = 380;
            myBook.publisher = "新潮社";
            PrintBook(myBook);
        }
        }

        private static void PrintBook(Book book) {
            Console.WriteLine("{0} {1} {2} {3}",
                book.title, book.author,  
                book.price, book.publisher);
        }
    }

    class Book {
        public string title;     // 書籍名
        public string author;    // 著者
        public int price;        // 価格
        public string publisher; // 出版社
    }
 }

Main関数の中で、

  Book myBook;

と書いていますが、myBookという変数名で、Bookクラスの変数を宣言していま
す。

  int num;

と似ていますね。プログラミング言語的には、Bookはint,doubleなどと同様に
「型」という扱いになりますので、今後は、Book型と呼ぶこともあります。

しかし、これだけでは、myBook 変数は使えません。myBook変数を使うには、

  myBook  = new Book();

と書く必要があります。 これをインスタンスの生成と言います。この new 演
算子で、コンピュータのメモリのどこかに、Book型の領域（titleやauthorな
どの領域）が確保されます。そして、このインスタンス生成で出来上がるのが、
オブジェクトと言われるものです。「オブジェクト」は、メモリ上に配置され
たデータの塊のことだと考えてください。
そして、その確保したメモリの塊と変数 myBook を結び付けるために、myBook
変数に代入しています。

図で表すと、こんな感じですね。

  myBook
  ┌───┐      ┌────────────────┐
  │  ──┼──→│title, author, pric, epublisher │
  └───┘      └────────────────┘

ちなみに、実際には、

 Book myBook = new Book();

と、変数の宣言と、インスタンスの生成を１行に書くことが一般的です。


■□─────────────────────────────────
■□ フィールドへのアクセス

クラス内に定義されたフィールドへアクセスするには、

  myBook.title = "伊豆の踊り子";
  myBook.author = "川端康成";
  myBook.price = 380;
  myBook.publisher = "新潮社";

のように、<変数名> と <フィールド名> をドット(.)でつなげます。
日本語の「の」にあたると思えば良いと思います。

  myBook.title = "伊豆の踊り子";

は、myBookオブジェクトのtitleフィールドに、"伊豆の踊り子" 文字列を設定
していることになります。

これで、領域だけ確保されていて中身の無かったBookオブジェクトに値が設定
されたことになります。

ちなみに、Visual Studio 2008(C#3.0)からは、

   Book myBook = new Book {
       title = "伊豆の踊り子",
       author = "川端康成",
       price = 380,
       publisher = "新潮社",
   };

と、インスタンス生成とフィールドの初期化が一度に行えるようになりました。
プログラムコードで初期値を与えることができる場合には、こちらの構文を使
うことをお勧めします。


■□─────────────────────────────────
■□ インスタンスを引数に受け渡す

myBook 変数は、通常の変数と同様、関数の引数とすることができます。

  PrintBook(myBook);

で、PrintBookに myBook 変数を渡しています。
PrintBook関数の中でも、 同様に、<変数名> と <フィールド名> をドット(.)
でつなげて、各フィールドの値を取得しています。

    Console.WriteLine("{0} {1} {2} {3}",
        book.title, book.author,  
        book.price, book.publisher);


なお、PrintBook関数では、myBookという変数名ではなく、book という変数名
を使っています。

        private static void PrintBook(Book book) {

このように渡す引数の名前と、渡される引数の名前は別であっても問題ありま
せん。

それと、初心者の方は、
  Book book
という記述に戸惑うかもしれませんが、

 小文字で始まる book は変数名
 大文字で始まる Book はクラス名

であり、この２つは別のものとなります。
Visual Studio上では色が変わるので、変数名とクラス名の違いはつきやすい
と思います。


■□─────────────────────────────────
■□ クラスのインスタンスは複数作成できる

では、プログラムで２つの書籍を同時に扱う時はどうしたらよいのでしょうか。
新たな、Book2 というクラスを定義するのでしょうか。
いえそうではなく、クラスと言うのは、テンプレート、あるいは設計図のよう
なものですから、そこからインスタンス（実体）を複数作成することができま
す。

  Book book1 = new Book();
  Book book2 = new Book();    

と書けば、２つの書籍を扱うことができるようになります。
2つめの new では、メモリの別のところにもう一つのBookオブジェクトが確保
され、それが、book2と結びつくことになります。

  int num1 = 10;
  int num2 = 20;

と同じですよね。

で、フィールドにアクセスするには、

 book1.title = "伊豆の踊り子";

とすれば、１冊目のbook1の書籍名が設定され、

 book2.title = "坊ちゃん";

とすれば、２冊目のbook2の書籍名が設定されます。


■□─────────────────────────────────
■□ クラスの配列

２つではなく、もっと沢山の書籍を一度に扱う場合は、配列を使うこともでき
ます。

配列は、
  int[] nums = new int[4];
のように書きましたね。 この int の部分を Book という型名に替えること
で、書籍を配列に格納できるようになります。

  Book[] books = new Book[4];

なお、 ここで注意しないといけないのは、上記の new は、

「 配列を確保するための  new であり、
   Book インスタンスを生成する new ではない 」

ということです。
つまり、 この段階では、4個の容器を確保しただけであり、書籍そのものは、
まだメモリに存在していません。このため、配列 books に書籍を入れるには、
以下のように書く必要があります。

  Book[] books = new Book[4];
  books[0] = new Book();
  books[1] = new Book();
  books[2] = new Book();
  books[3] = new Book();

それぞれの書籍に、データをセットするには、

  books[0].title = "伊豆の踊り子";
  books[0].author = "川端康成";
  books[0].price = 380;
  books[0].publisher = "新潮社";

のように書きます。これで配列0番目が示す書籍オブジェクトにデータが入り
ます。

メモリの状態を図で示すと、以下のようになります。

  books          確保した配列
 ┏━━━━┓     ┏━━━┓     ┏━━━━━━━━━━━━┓
 ┃      ─╂──>┃    ─╂──>┃Bookのインスタンス      ┃
 ┗━━━━┛     ┣━━━┫     ┗━━━━━━━━━━━━┛
                  ┃    ─╂┐   ┏━━━━━━━━━━━━┓
                  ┣━━━┫└─>┃Bookのインスタンス      ┃
                  ┃    ─╂┐   ┗━━━━━━━━━━━━┛
                  ┗━━━┛│   ┏━━━━━━━━━━━━┓     
                            └─>┃Bookのインスタンス      ┃
                                 ┗━━━━━━━━━━━━┛
                            

では、今回の最後として、Bookクラスのオブジェクトを配列に入れ、それを
ひとつずつ取り出すコードを載せておきます。

using System;

namespace ConsoleApplication1 {
    class Program {
        static void Main(string[] args) {
            Book[] books = new Book[2];
            books[0] = new Book {
                title = "伊豆の踊り子",
                author = "川端康成",
                price = 380,
                publisher = "新潮社"
            };
            books[1] = new Book {
                title = "坊ちゃん",
                author = "夏目漱石",
                price = 378,
                publisher = "岩波書店"
            };
            foreach (Book book in books)
                PrintBook(book);
        }

        private static void PrintBook(Book myBook) {
            Console.WriteLine("{0} {1} {2} {3}",
                myBook.title, myBook.author,  
                myBook.price, myBook.publisher);
        }
    }

    class Book {
        public string title;     // 書籍名
        public string author;    // 著者
        public int price;        // 価格
        public string publisher; // 出版社
    }
}


当然、個数があらかじめ分からない場合は、List<Book>を使えばいいですね。

 List<Book> books = new List<Book>();
 books.Add(new Book {
                title = "伊豆の踊り子",
                author = "川端康成",
                price = 380,
                publisher = "新潮社"
           });
 
とこんな感じですね。
是非、No.212 のList<T>の部分を読みなおし、List<Book>を扱うコードを自分
で書いてみることをお勧めします。


───────────────────────────────────
『C#プログラミングレッスン』  (ぼぼ週刊）                             
───────────────────────────────────
 Published by Gushwell.                                               
   Copyright (C) 2004-2009 Gushwell All rights reserved.              
   Microsoft MVP - Visual C#(Apr 2005 - Mar 2010)                     

 <<■ Gushwell's Page ■>>
 窓際プログラマ―の独り言  ：http://blog.livedoor.jp/gushwell/        
 窓際プログラマ―の読書三昧：http://gushwell.jugem.jp/                
 Gushwell's F# Programming Diary : http://techbank.jp/gushwell/       
 Gushwell's C# Programming Page  ：http://gushwell.ifdef.jp/          
   C#デザインパタ―ン : http://gushwell.ifdef.jp/dp/csdpindex.html    

 ☆メールマガジンの感想お待ちしています☆                             
   http://gushwell.ifdef.jp/mail.html                                 

 <<■ コミュニティtechbank.jp (http://techbank.jp/) ■>>
 Gushwellが参加している技術系コミュニティです。
 マイクロソフト系テクノロジー＆製品に特化したコミュニティで、Webサイト
 では、VB、C#、VC++、SQL Server, BizTalk Server などの技術情報を公開し
 ています。皆さんの参加をお待ちしています。
 ブロガーさんも募集中です。
───────────────────────────────────