■━ [C#プログラミングレッスン] ━━━━━━━━━━━━━ No.213 ━□
  
 「C#入門編 2nd」 -- 関数
                                                         by Gushwell  
□━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━■

大きなプログラムを作成するには、いくつかの小さな単位に分割して作成する
のが便利です。C# では、クラスという単位で分割するのですが、そのクラス
の中もいくつかの小さな単位に分割されています。その一つが、今回説明する
関数です。
実は、C#では、関数とは言わずに「メソッド」と言うのですが、ここでは、あ
えて、関数という用語を使わせていただきます。

 ※クラスについては、次回以降で説明します。

プログラミング初心者にとって、プログラムをどうクラスに分割するのか、ク
ラスをどう設計するのかは、なかなか難しい問題なので、まずは、クラスの中
で定義される関数をどう書くのかを勉強するところから始めるのが良いと思わ
れます。

■□─────────────────────────────────
■□ 関数を使ったサンプル

まずは、以下の関数を使ったコードをご覧ください。

using System;

namespace ConsoleApplication1 {
    class Program {
        static void Main() {
            string s = Console.ReadLine();
            double num = double.Parse(s);
            double meter = YardToMeter(num);
            Console.WriteLine(meter);
        }

        static double YardToMeter(double yd) {
            double meter = yd * 0.9144;
            return meter;
        }
    }
}

このプログラムは、キーボードから数値（ヤード）を入力すると、それをメー
トルに変換するプログラムです。

例えば、4.0 をキーボードから入力すると、3.6576が表示されます。つまり、
４ヤードは、3.6576メートルであることがわかります。

では、このプログラムの中の関数を定義している箇所以下に抜き出します。

        static double YardToMeter(double yd) {
            double meter = yd * 0.9144;
            return meter;
        }

この部分について、さらに詳しく見て行くこととします。

■□─────────────────────────────────
■□ 関数の定義

関数の定義は、

  戻り値の型 関数名（引数の宣言） {
      宣言と文
  }

という形式となっています。
先ほどの関数の例では、

  戻り値の型 : double
  関数名     : YardToMeter
  引数       : 引数の型:double 、引数の名前:yd 

です。staticについては、今のところ「おまじない」のようなものだと思って
ください。

宣言と文では、関数の中でどのような処理をするのかを記述します。

この例では、引数で受け取った数値 yd に 0.9144を掛けて、その値を戻して
います。
return文が、 呼んだプログラムに値を返す命令です。return の後ろに任意の
式を書けます。

  return 式;

なので、この例では、関数の中は

  return yd * 0.9144;

と１行で済ましてしまうこともできます。 return 文が実行されると、その関
数の処理が終わり、呼び出し元に制御が戻ります。

関数 YardToMeterでは、 戻り値が double 型ですが、int型 string型などを
返す関数も作成することができます。
また、以下のように複数の引数を受け取る関数を作ることもできます。

      static double SampleFunction(double num, string msg) {
          ...
      }


■□─────────────────────────────────
■□ 関数の利用

定義した YardToMeter を呼び出しているのが、Mainの中の

   double meter = YardToMeter(num);

の行です。
()の中の num がYardToMeter関数の引数としてわたります。
そして、関数からの戻り値をあとから利用するために、meter変数に代入（記
憶）しています。


■□─────────────────────────────────
■□ 関数の利点

プログラムの初心者の方には、関数を導入することで、却って処理が複雑にな
ったように感じる方もいるかもしれません。しかし、一度関数を作成してしま
えば、他のところでも利用できますし、どういった計算式だったかなど、細か
な事を忘れてしまえる、などの利点があります。
もし、大きなプログラムのあちこちで、ヤードからメートルを求める必要があ
ったらどうでしょうか。
ヤードからメートルを求める部分すべてで、

   double meter = yard / 0.9144;

と書くよりは、

   double meter = YardToMeter(yard);

と書いたほうが、解りやすいと思います。
もしかしたら、この例だとその利点が伝わらないかもしれませんが、この計算
式がもっと複雑だったらどうでしょうか。全ての箇所で複雑な計算式を書くよ
りは、一度、どこかで、関数を定義し、この関数を呼び出したほうが、間違い
が少ないし、「何をやっているのか」が明確になりますよね。


■□─────────────────────────────────
■□ 戻り値の無い関数、引数の無い関数

戻り値の無い関数と言うものも存在します。何も返さない関数というのは、何
か変ですが、次をみてください。

    static void PrintAll(int[] nums) {
        foreach ( int n in nums )
            Console.WriteLine(n);
    }

PrintAllが関数です。 
このPrintAll関数を利用するコードを以下に示します。

  int[] nums = { 1, 3, 5, 7, 9 };
  PrintAll(nums);

void というのが、「戻り値が何もない」ということを意味しています。その
ため、PrintAll関数では、

    return 式;

という、文が現れません。

ちなみに、値を返さない void 関数の場合でも、return文を使うことができま
す。この場合、return の後ろに 式は書きません。
returnに出会うと、その関数から抜け出し、制御が呼び出し元に戻ることにな
ります。 return 文が無いと、その関数の最後まで処理を実行してから、制御
が呼び出し元に戻ります。

また、以下のように引数の無い関数を作成することもできます。

 static void Greeting() {
     Console.WriteLine("こんにちは、Gushwellです。");
     Console.WriteLine("メールマガジンを発行しています。");
     Console.WriteLine("どうぞよろしくお願いします。");
 }


■□─────────────────────────────────
■□ 値渡し

以下のコードの結果を予測してから、実行してみてください。

class Program {
    static void Main() {
        int num = 10;
        Add(num);
        Console.WriteLine(num);
    }
    static void Add(int num) {
        num += 1;
    }
}

結果は、
10
です。どうですか、予想は合ってましたか。

Add関数では、 num に 1 加えているので、11 が表示されそうですが、そうは
ならずに、10 が表示されます。
これは、関数 Add に 渡されるのは、"値" そのものだからです。
実際には、 変数 num の一時的コピーが作られ、そのコピーが関数に渡ること
になります。このため、関数の中でいくら引数の値を変えても、それは、一時
的にコピーされた値が変るだけで、呼び出し側の変数には、影響を与えないと
いうことです。
つまり、 Main関数とAdd関数では、num という同じ変数名を使っていますが、
この２つの変数はまったく別物なのです。 
これを call by value （日本語では、値渡し）と言います。

では、配列を引数に渡した場合はどうなるのでしょうか。

class Program {
    static void Main() {
        int[] nums = new int[] {1, 2, 3, 4, 5};
        IncAll(nums);
        foreach (int x in nums)
            Console.Write("{0} ", x);
    }
    static void IncAll(int[] nums) {
        for ( int i = 0; i < nums.Length; i++ )
            nums[i] += 1;
    }
}

結果は、

2 3 4 5 6

と表示されます。さっきの説明（関数の中で、引数の値を変えても呼び出し元
に影響を与えない）と矛盾するようですが、配列の場合には、そのデータの中
身が渡るのではなく、配列へのアドレスが渡る仕様となっています。

   nums
  ┌────┐    ┏━┳━┳━┳━┳━┓
  │     ─ ┼ ─>┃1 ┃2 ┃3 ┃4 ┃5 ┃
  └────┘    ┗━┻━┻━┻━┻━┛

上の図は配列のメモリの状態を表したものです。 nums という変数には、1,2
3,4,5 という数値が入っているのではなく、その数値列（配列）へのアドレス
(番地）が格納されています。ですから、

   IncAll(nums);

では、 nums 変数の「値」である、配列へのアドレスが渡ります。つまり、
これも値渡しになっています。


■□─────────────────────────────────
■□ 関数に関する補足

◆引数には式を書くことができる。

サンプルコードでは、

  double meter = YardToMeter(num);

と変数を関数の引数に渡していましたが、( ) の中には、式を書くこともでき
ます。つまり、

  double num = double.Parse(s);
  double meter = YardToMeter(num);

この２行は、

  double meter = YardToMeter(double.Parse(s));

と１行にすることも可能です。double.Parse(s) の 結果が、YardToMeter に
渡ることになります。


◆Mainも関数

さて、ここまで読んだ読者の方は、いままで、何度となく出てきたMainも関数
であることに気が付いたと思います。
今回のサンプルコードのMain関数は、引数も戻り値も無い特殊な関数と言えま
す。

また、これまで何気なく使ってきた Console.ReadLine や double.Parseも
実は、関数の一種です。

 string s = Console.ReadLine();

も

 double num = double.Parse(s);

も関数を呼び出し、その戻り値を得ているわけですね。
なぜ、Console. とか double. と書くのに、YardToMeter には、前に何もつか
ないのかという疑問がわいてくるとは思いますが、それについては、次回以降
説明で徐々にわかってくると思います。


───────────────────────────────────
『C#プログラミングレッスン』  (ぼぼ週刊）                             
───────────────────────────────────
 Published by Gushwell.                                               
   Copyright (C) 2004-2009 Gushwell All rights reserved.              
   Microsoft MVP - Visual C#(Apr 2005 - Mar 2010)                     

 <<■ Gushwell's Page ■>>
 窓際プログラマ―の独り言  ：http://blog.livedoor.jp/gushwell/        
 窓際プログラマ―の読書三昧：http://gushwell.jugem.jp/                
 Gushwell's F# Programming Diary : http://techbank.jp/gushwell/       
 Gushwell's C# Programming Page  ：http://gushwell.ifdef.jp/          
   C#デザインパタ―ン : http://gushwell.ifdef.jp/dp/csdpindex.html    

 ☆メールマガジンの感想お待ちしています☆                             
   http://gushwell.ifdef.jp/mail.html                                 

 <<■ コミュニティtechbank.jp (http://techbank.jp/) ■>>
 Gushwellが参加している技術系コミュニティです。
 マイクロソフト系テクノロジー＆製品に特化したコミュニティで、Webサイト
 では、VB、C#、VC++、SQL Server, BizTalk Server などの技術情報を公開し
 ています。皆さんの参加をお待ちしています。
 ブロガーさんも募集中です。
───────────────────────────────────
