■━ [C#プログラミングレッスン] ━━━━━━━━━━━━━ No.209 ━□
  
 「C#入門編 2nd」 -- 初めてのプログラム
                                                         by Gushwell  
□━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━■

■□─────────────────────────────────
■□ はじめに

「C#入門編 2nd」の連載を開始です。
今回から約2か月間で、C#初心者向けに、C#の文法を中心に解説をしていきま
す。短い回数でC#の基本的な文法を一通り説明しようと考えていますので
1回の分量がいつもよりも多くなっています。

ここで扱うプログラムはコンソールアプリケーションですが、その内容は、
WindowsForms, ASP.NET などでもそのまま通じる内容を目指しています。

なお、C#3.0を対象としていますので、一部のコードは Visual Studio 2005で
は動かないものもあります。ご了承ください。ここで示すサンプルコードは、
すべて Visual Studio 2008 Express Editionで動作を確認しています。

では、学習を始めましょう。

■□─────────────────────────────────
■□ 初めてのプログラム - Hello World

初めてのプログラムは、やはりHello worldプログラムでしょう。
Visual Studio 2008 を起動し、[ファイル]-[新しいプロジェクト]で、
「コンソールアプリケーション」を選び、プロジェクトを作成してください。

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace ConsoleApplication1 {
    class Program {
        static void Main(string[] args) {
        }
    }
}

というコードがエディタに現れます。はじめは、このコードの意味がわからな
くても構いません。とりあえず、皆さんが書くのは、

        static void Main(string[] args) {
        }

の { } 間ということになります。
これを以下のように書き換えます。
皆さんの Visual Studio 2008 に表示された { と } の位置が、違うかもしれ
ませんが、それは、そのままにしておいて問題ありません。


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace ConsoleApplication1 {
    class Program {
        static void Main(string[] args) {
            // 画面に hello, world. と表示する。
            string message = "hello world.";
            Console.WriteLine(message);
        }
    }
}

では、Ctrl+F5 キーを押して実行してみましょう。
コンソール画面が現れ、
hello world
と表示されればOKです。

■□─────────────────────────────────
■□ Hello Worldの解説

◆コメント
プログラムには、プログラムの実行に直接影響のない説明文を書くこと
ができます。これをコメントと言います。

   // 画面に hello, world. と表示する。

の部分がコメントです。
この部分をどんなに変えても、プログラムの動作は同じです。
自分が書いたプログラムでも後で読み返すと、何をやっているのか分からなく
なってしまうことがあります。コメントを残しておくと、後でプログラムコー
ドを読む時の助けになります。

◆文字列
C#の文字列は、"hello" のように 0 個以上の文字を二重引用符で囲んで指定
します。 
文字列とは、文字が連続してあつまったデータのことです。
2重引用符自体は、文字列の一部ではありません。このプログラムを実行して
見ればわかりますが、 " は、表示されません。""と書けば、何も無い文字列
（空文字列）となります。
説明するまでもないかもしれませんが、
  "hello world."
を
  "おはようございます"
と変えて、プログラムを実行すれば、画面にも

おはようございます

と表示されます。

◆変数
変数とはプログラムの中で、文字や数値などを入れておく箱のような物です。
この箱には、一つの値しか入りません。またこの箱には、どのような種類の値
が入れられるかが決められています。数値用の箱には、文字列を入れることは
できませんし、文字列用の箱には、数値を入れることはできません。

この変数という箱は、プログラムの中でいくつでも作ることができます。そう
なると複数の変数を特定する必要がでてきます。これを特定するのが変数名で
す。変数に名前を付けて、区別をするわけですね。

   string message = "hello world.";

は、messageという名前の文字列型の変数に、文字列"hello world."を
覚えこませています。
変数にデータを覚えこませることをプログラムの世界では、「代入」と読んで
います。

＝ がデータを代入する（記憶させる）記号です。等しいという意味ではあり
ませんので注意してください。

なお、変数というくらいですから、一度代入した値を後から変更することもで
きます。


◆変数の参照
変数に覚えこませたデータは、覚えただけでは意味がなくて、取り出してこそ
意味があります。というか、あとで取り出せるように、変数に記憶させるわけ
です。この例では、

  Console.WriteLine(message);

が取り出している部分です。単に messageと変数の名前を書けば取り出すこと
ができます。
Console.WriteLineは、括弧の中に記述したデータを、コンソール画面に表示
してくれる機能です。

WindowsFomr, ASP.NETだったら、変数の値を参照するには、

  Label1.Text = message;

というところでしょうか。

なお、変数名は大文字と小文字が区別されますから、

  Console.WriteLine(Message);

と書くことはできません。コンパイルエラーとなってしまいます。


■──────────────────────────────────
■ 文字列の連結

先ほどのプログラムを少し変更してみましょう。

  static void Main(string[] args) {
      string name = "山田さん";
      Console.WriteLine(name + "、こんにちは");
      string message = name + "、お久しぶりです";
      Console.WriteLine(message);
  }

  ※ Main の前後は省略しています。

結果は、

 山田さん、こんにちは
 山田さん、お久しぶりです

となります。

+ は、文字列と文字列を連結する記号です。
最初のConsole.WriteLineでは、連結した結果が、Console.WriteLineに渡され、
文字列 "山田さん、こんにちは" が画面に出力されます。
２番目のConsole.WriteLineでは、いったん、message変数に連結された結果が
代入され、messageの内容が、Console.WriteLineに渡されています。


■──────────────────────────────────
■ 数値を扱う

今度は、文字列ではなく、数値を扱ってみましょう。

  static void Main(string[] args) {
      int a = 32;
      int b = 8;
      int sum = a + b;
      int area = a * b;
      Console.WriteLine("aの値は {0} です。",a);
      Console.WriteLine("bの値は {0} です。",b);
      Console.WriteLine("sumの値は {0} です。",sum);
      Console.WriteLine("areaの値は {0} です。",area);
  }

結果は、以下のとおりです。

 aの値は 32 です。
 bの値は 8 です。
 sumの値は 40 です。
 areaの値は 256 です。

int が、整数型を表すキーワードです。つまり、変数 a ,b, sum, area は
整数が記憶できることを示しています。当然、文字列は記憶できません。

今度の + は加算記号です。文字列の時も + を使いましたが、意味が異なりま
す。
* は、乗算記号です。これで掛け算が行えます。
その他、
  -  減算
  /  除算   // ÷ の代用です
  %  剰余
という演算が行えます。
 
  int average = (a + b) / 2;

のような複数の演算記号を使った演算も行えます。カッコ () をつけることで
演算の優先順位を変えています。

小数付きのデータを扱う場合には、intではなく、double を使うのが一般的で
す。以下に double を使った例を示します。

  double a = 100.0
  double b = 0.05;
  double c = a * b;

■──────────────────────────────────
■ 補足事項

◆変数名

変数名は、プログラマが自由に決めてよいのですが、いくつか守らなければい
けない点があります。
まず、変数名を数値や記号で始めることができません。また、記号は、途中に
入れることもできません。ですから、以下のような変数は無効となります。

  2nd
  %name
  next-node

有効な変数名を以下にあげます。

  no2
  _name
  nextNode

   ・数値は、先頭以外なら使うことができます。
   ・アンダースコア(_)は、変数名に使うことが許されています。
   ・C#では、2つの単語をつなげる場合には、２番目以降の単語の先頭を大文
     字にすることが一般的です。
     なお、next_node と アンダースコアでつなげることもでます。

  ※「会社名」といった日本語の変数名を付けることもできますが、一般的に
    は、利用されていないようです。
    これは私見ですが、ソースコードが全世界共通の言語であることを考える
    と、日本語の変数名の使用は避けたほうが良いと思います。

また、C#が定めたキーワードを変数名にすることもできません。例えば、

  this
  byte
  object

などといった変数名を付けることはできません。
C#のキーワードは、以下のページで確認できます。
http://msdn.microsoft.com/ja-jp/library/x53a06bb.aspx

◆変数の型

C#では、string, int, doubleの他にも多くのデータ型が用意されています。
C#で利用できるデータ型は以下の通りです。

整数型
  sbyte  符号付き 8ビット整数   -128 ～ 127
  byte   符号なし 8ビット整数   0 ～ 255
  short  符号付き 16ビット整数  -32768 ～ 32767
  ushort 符号なし 16ビット整数  0 ～ 65535
  int    符号付き 32ビット整数  -2147483648 ～ 2147483647
  uint   符号なし 32ビット整数  0 ～ 4294967295
  long   符号付き 64ビット整数  -9223372036854775808～
                                    9223372036854775807
  ulong  符号なし 64ビット整数  0～18446744073709551615

浮動小数点型
  float  32 ビット単精度
  double 64 ビット倍精度

その他
  char    文字型
  string  文字列型
  bool    ブール型  (true, falseの2値）
  decimal 実数を扱う型。浮動小数点と違い、丸め誤差が無いため、
          財務計算に適している。
  
  ※char は、C#の文法的には、整数型に分類されていますが、char を数値と
    して扱うことは、通常ありませんので、ここでは、その他に分類していま
    す。

整数型は７種類もあり、どれを使ったらよいのか迷いそうですが、 通常は、
int型を使います。それ以外の型を使う場面は、それほど多くはありません。

───────────────────────────────────
『C#プログラミングレッスン』  (ぼぼ週刊）                             
───────────────────────────────────
 Published by Gushwell.                                               
   Copyright (C) 2004-2009 Gushwell All rights reserved.              
   Microsoft MVP - Visual C#(Apr 2005 - Mar 2010)                     

 <<■ Gushwell's Page ■>>
 窓際プログラマ―の独り言  ：http://blog.livedoor.jp/gushwell/        
 窓際プログラマ―の読書三昧：http://gushwell.jugem.jp/                
 Gushwell's F# Programming Diary : http://techbank.jp/gushwell/       
 Gushwell's C# Programming Page  ：http://gushwell.ifdef.jp/          
   C#デザインパタ―ン : http://gushwell.ifdef.jp/dp/csdpindex.html    

 ☆メールマガジンの感想お待ちしています☆                             
   http://gushwell.ifdef.jp/mail.html                                 

 <<■ コミュニティtechbank.jp (http://techbank.jp/) ■>>
 Gushwellが参加している技術系コミュニティです。
 マイクロソフト系テクノロジー＆製品に特化したコミュニティで、Webサイト
 では、VB、C#、VC++、SQL Server, BizTalk Server などの技術情報を公開し
 ています。皆さんの参加をお待ちしています。
 ブロガーさんも募集中です。
───────────────────────────────────
