■━ [C#プログラミングレッスン] ━━━━━━━━━━━━━ No.217 ━□
  
 「C#入門編 2nd」 -- 継承
                                                         by Gushwell  
□━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━■


■□─────────────────────────────────
■□ 継承

継承とは、すでに定義されているクラスをもとに、その性質を受け継ぎ、拡張
や変更を加えて、新しいクラスを作成することです。

  ※ 継承することを「派生する」などということもあります。

例えば、人クラス(Person)から社員クラス(Employee)を作るとしましょう。設
計のダメさ加減は置いといて、以下のような Personクラスがあったとします。

 public class Person {
     private string name;
     private int    age;
     public string Name {
         get { return name; }
         set { name = value; }
     }
     public int Age {
         get { return age; }
         set { age = value; }
     }
 }

このクラスの使用例を以下に示します。

  Person p = new Person();
  p.Name = "山田太郎";
  p.Age = 23;
  Console.WriteLine("{0}は、{1}歳です", p.Name , p.Age);

さて、社員クラス(Employee)では、名前と年齢に加え、社員番号と所属部署名
を扱いたいとします。継承を使えば、Employeeクラスをゼロから作るのではな
く、Personクラスの実装を利用することが可能になります。
Personクラスを継承した、社員クラス（Employee）は以下の通りです。

 public class Employee : Person {
     private int id;
     private string deptName;
     public int ID {
         get { return id; }
         set { id = value; }
     }
     public string DeptName {
         get { return deptName; }
         set { deptName = value; }
     }
 }

継承するには、クラス名（ここではEmployee）の後に : を付け、その後に継
承元であるクラスの名前（ここではPerson）を指定します。

 ※ 一般的には、継承元となるクラスを「スーパークラス」あるいは「基底ク
    ラス」などと呼び、継承して新たに定義したクラスを「サブクラス」ある
    いは「派生クラス」と呼びます。
    ただし、便宜上、この継承元のクラスを親クラス、継承先のクラスを子ク
    ラス、と言うこともあります。
    子クラスを継承し新たなクラスを作成することもできます。

継承することで、Employeeクラスは、Personクラスの性質を受け継ぐことにな
ります。 Name,Ageプロパティは、 Employeeクラスに記述してありませんが、
Employeeクラスに存在しています。
つまり、Personクラスとの違いだけをEmployeeクラスでは、定義しているわけ
ですね。

このEmployeeクラスを使った例を示します。

  Employee emp = new Employee();
  emp.ID = 100;
  emp.Name = "山田太郎";
  emp.Age = 23;
  emp.DeptName = "第一営業部";
  Console.WriteLine("{0}({1}歳)は、{2}に所属しています。",
         emp.Name, emp.Age, emp.DeptName);

この例では、メソッドを持たないクラスの例でしたが、基底クラスで定義され
たメソッドも、派生クラスでは有効です。Personクラスに Walkというメソッ
ドがあれば、Employeeクラスで定義しなくても Walkメソッドが存在すること
になります。


■□─────────────────────────────────
■□ is a 関係

継承は、 一般的に、is a 関係が成り立つときに使うとされています。is a関
係とは、「○○は△△△である」という関係です。今回の例では、
  「社員は人である」
という関係が成り立っています。 こういう時に継承を使います。is a 関係が
成り立たないときには、継承を使ってはいけません。
例えば、「○○は△△からできている」という関係が成り立つ時や「○○は△
△を持っている」という関係が成り立つ時は、継承は使いません。

では、 is a 関係が成り立つときには、必ず継承を使うのか、といわれるとそ
んなことはないので、なかなか難しいところなのですが、すくなくとも、「差
分プログラミングは便利だから、継承を使おう」という発想はやめた方が良い
でしょう。

さて、話がそれましたが、この 「is a 関係（～は～である）」は、いたる
ところにありますね。
例えば、
 「三角形は図形である」
 「四角形は図形である」
 「リストボックスはコントロールである」
 「カード支払いは支払いである」
 「CDとDVDは商品である」
 「売上や注文は取引である」

これらの関係を、kind of 関係（～は～の一種である）と言う人もいます。
  「三角形は、図形の一種である」
  「四角形は、図形の一種である」
という関係ですね。

皆さんがWindowsFormsアプリケーションを作成する時は、

  public class Form1 : Form {
      ...
  }

といったコードが .cs ファイルに書かれていると思いますが、この Form1ク
ラスは、Formクラスを継承しており、「From1は、Formである」という is a 
関係が成り立っています。


■□─────────────────────────────────
■□ 継承関係のある変数の代入

さて、このような is a 関係（つまり、継承関係）がある場合、次のような代
入が可能です。

 Person person = new Employee {
     ID = 100,
     Name = "山田太郎",
     Age = 23,
     DeptName = "第一営業部",
 };

  ※ 派生クラス(Employee)のインスタンスを基底クラス(Person)の変数に
     代入しています。

普通に考えると、

 Employee person = new Employee {
     ID = 100,
     Name = "山田太郎",
     Age = 23,
     DeptName = "第一営業部",
 };

というように、 newした型と、代入する変数の型は一致させないとエラーにな
りそうですが、子クラスのインスタンスは、親クラス（あるいは、先祖クラス）
の変数に代入出来るようになっています。
「従業員」は「人」であるから、「人」として扱えると考えれば良いでしょう。

一方、次のような逆への代入はできません。

 Employee emp = new Person {
     Name = "山田太郎",
     Age = 23,
 };

「人」は「従業員」とは限らない（顧客かもしれないし、株主かもしれない）
ので、「従業員」としては扱えないわけです。

Person型の変数に代入できるということは、 以下のようにPerson型の配列に、
Employeeオブジェクトを格納することも可能になります。

  Person[] persons = new Person[4];
  persons[0] = new Employee { ... };
  persons[1] = new Employee { ... };
  persons[2] = new Employee { ... };
  persons[3] = new Employee { ... };

このように、親クラスの変数に、子供のクラスのインスタンスを格納すること
に何の意味があるのかは、「ポリモーフィズム」という概念が関係してくるの
ですが、入門の範囲を超えてしまいますので、興味ある方はバックナンバーの
No.033からNo037あたりを読んでみてください。

Gushwell's C# Programming Page  ：http://gushwell.ifdef.jp/   

からダウンロードできます。


■──────────────────────────────────
■ object

C#では、あらゆる型は、objectクラスが基底クラスとなります。つまり、クラ
ス階層の頂点にあるのが object クラスです。
※ C#のobjectは、.NET FrameworkのSystem.Objectの別名です。

そのため、クラスを定義する際、継承元を指定しなかったときには、その継承
元である親クラスは、objectクラスとなります。

    class Shape {
        private double x;
        private double y;
        ...
    }

は、

    class Shape : object {
        private double x;
        private double y;
        ...
    }

と同じことです。

このことはとても大きな意味をもっています。それは、全てのクラスは、
objectである、ということです。つまり、

 Shapeクラスは、objectである
 Triangleクラスも objectである。
 Rectangleクラスも objectである。
 Form クラスも objectである。
 Employee クラスも objectである。

という is a 関係が成り立ちますので、

  object o1 = new Triangle(10,20);
  object o2 = new Rectangle(8,15);

という代入が可能になります。
また、

  void Foo(object o) {
     ...
  }

というメソッドがあった場合に、

  Shape shape = new Triangle(10,20);
  Foo(shape);

と書くことができます。 Fooメソッドは、どんなインスタンスも受け取ること
ができるメソッドなわけです。



繰り返しますが、「すべてのインスタンスは objectとして扱える」「基底ク
ラスの変数に、派生クラスのインスタンスを格納できる」という性質は、「ポ
リモーフィズム」という機能と組み合わさることで大きな意味を持ってきます。
ここでは、ポリモーフィズムについての説明はしませんが、是非、バックナン
バーを読むなりして、学習してくださいね。


───────────────────────────────────
『C#プログラミングレッスン』  (ぼぼ週刊）                             
───────────────────────────────────
 Published by Gushwell.                                               
   Copyright (C) 2004-2009 Gushwell All rights reserved.              
   Microsoft MVP - Visual C#(Apr 2005 - Mar 2010)                     

 <<■ Gushwell's Page ■>>
 窓際プログラマ―の独り言  ：http://blog.livedoor.jp/gushwell/        
 窓際プログラマ―の読書三昧：http://gushwell.jugem.jp/                
 Gushwell's F# Programming Diary : http://techbank.jp/gushwell/       
 Gushwell's C# Programming Page  ：http://gushwell.ifdef.jp/          
   C#デザインパタ―ン : http://gushwell.ifdef.jp/dp/csdpindex.html    

 ☆メールマガジンの感想お待ちしています☆                             
   http://gushwell.ifdef.jp/mail.html                                 

 <<■ コミュニティtechbank.jp (http://techbank.jp/) ■>>
 Gushwellが参加している技術系コミュニティです。
 マイクロソフト系テクノロジー＆製品に特化したコミュニティで、Webサイト
 では、VB、C#、VC++、SQL Server, BizTalk Server などの技術情報を公開し
 ています。皆さんの参加をお待ちしています。
 ブロガーさんも募集中です。
───────────────────────────────────