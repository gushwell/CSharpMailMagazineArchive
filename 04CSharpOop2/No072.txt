┏━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━┳━┳━┓
┃☆┃ C#プログラミングレッスン                         ┃＿┃□┃×┃
┣━┻━━━━━━━━━━━━━━━━━━━━━━━━━┻━┻━┻━┫
┃boxing, unboxing                                           No.072 ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛


■──────────────────────────────────
■ 値型、参照型

C#のデータには、値型と参照型があることは、No041で説明しました。

  値型
    int, double, boolや 独自に定義した構造体
  参照型
    string, クラス

でしたね。
これらの２つには重要な違いがあります。
例えば
  int i = 10;
において、10 という値は、変数 i そのものに格納されています。
一方、
  string s = "Hello";
の場合、 "Hello" という文字列は、s そのものに格納されているのではなく、
変数 s には、"Hello" へのアドレス(参照)が格納されています。

■──────────────────────────────────
■ boxing, unboxing

それでは、以下のコードの内部的な動きはどうなっているでしょうか。

  int val = 456;
  object o = val;
  int val2 = (int)o;

object 型は、 すべての型の最上位クラスですので、どんな変数も代入できる
のでしたね。
しかし、object 型は、クラスであり、変数 o そのものには、値を格納するこ
とはできません。いったい内部で何が起きているのでしょうか？

この３行のコードの内部の動きをを順番に見ていきましょう。

まず、１行目

  int val = 456;

val 変数そのものに、456という値が代入されます。

２行目
  object o = val;

まず、 ヒープ領域に、intを保持できるサイズの参照型の箱（ボックス）を用
意します。その後、val の値（つまり、456）をこの箱に代入します。さらに、
これが int 型であることをマークしておきます。
変数 o には、ボックスへの参照（アドレス）が格納されます。
これをボックス化(boxing)と言います。

３行目

  int val2 = (int)o;

ボックス化された値を元の int 型の変数に戻すには、 キャストをしてあげま
す。
すると、ボックスの中の値 456 を取り出し、変数 val2 に代入します。
これを、ボックス化解除(unboxing)と言います。

当然、
  double val2 = (double)o;
のように、キャストする型が正しくないと、例外が発生します。


■──────────────────────────────────
■ boxing, unboxingの例

内部的な動きは理解していただけましたか？ しかし、わざわざ、このような
コードを書く人はいないでしょう。
では、どのようなときに、boxing, unboxingが行われるのでしょうか。
いくつか例を見てみましょう。

---
例１
  DateTime dt = DateTime.Today;
  string s = string.Format("{0}",dt);

  DateTimeは値型で、string.Format の 第2引数は、object 型なので、
  Formatメソッドを呼ぶ際に、boxingが行われる。

---
例２
  ArrayList list = new ArrayList();
  list.Add(54);

  ArrayListは、object型を格納するクラスですので、Addメソッドで、値型を
  格納する場合、boxingが行われます。

このように、 意識せずとも、 boxing, unboxingが行われています。 boxing,
unboxingに伴うパフォーマンスの低下は、ほんのわずかであり、通常は気にす
ることはありませんが、膨大なデータを扱う場合には、boxing, unboxingが、
悪影響を与える場合がありますので、頭の片隅にでも留めておいてください。


======================================================================
今回で、C#の文法に関する説明は、一通り出来たかと思いますので、来週から
は、 .NET Framework の基本的なクラスについての説明を数回に渡って行う予
定です。「.NET Framework 基本クラス編」といったところでしょうか。
このメルマガを購読されている方のほとんどは、既に、C#で何らかのプログラ
ムを組んでいらっしゃる方だと思いますので、既知の内容になってしまうかも
知れませんが、どうぞ、お付き合いください。
なお、「.NET Framework 基本クラス編」が終了後、C#2.0についての説明を行
う予定です。


┌─┬─────────────────────────┬─┬─┬─┐
│☆│ C#プログラミングレッスン  (ぼぼ週刊）            │＿│□│×│
├─┴─────────────────────────┴─┴─┴─┤
│ Published by Gushwell  (Microsoft MVP for Visual C#)             │
│ Copyright (C) 2004-2005 Gushwell All rights reserved.            │
│-------------------- Gushwell's Page ---------------------------- │
│ 窓際プログラマーの独り言  ：http://blog.livedoor.jp/gushwell/    │
│ 窓際プログラマーの読書三昧：http://gushwell.jugem.jp/            │
│             よろしかったらアクセスしてみてください！             │
└─────────────────────────────────┘
