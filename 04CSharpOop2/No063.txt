┏━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━┳━┳━┓
┃☆┃ C#プログラミングレッスン                         ┃＿┃□┃×┃
┣━┻━━━━━━━━━━━━━━━━━━━━━━━━━┻━┻━┻━┫
┃interface (1)                                              No.063 ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

No048からNo062まで「落穂拾い」ということで、C#の文法の枝葉にあたる部分
を解説してきましたが、今回から、再び、C#の文法の本流部分に戻ることとし
ます。

まずは、interfaceです。interfaceは、とても重要な概念なので、数回に分け
て解説します。

■──────────────────────────────────
■ interface

interfaceっていったい何でしょうか。
簡単に言えば、クラスの持つメソッドやプロパティのインターフェースだけを
抜き出したものです。
ここでのインターフェースとは、
「メソッドの名前は何か」
「引数は何か」
「戻り値は何か」
といった情報です。どのように処理するかという情報は含まれません。

では、早速 interface を使った例を見て見ましょう。

    interface IProgrammer {
        string WriteCode();
        string TestCode();
    }

これが、 interface の定義です。IProgrammer がinterfaceの名前で、クラス
名同様、自由に決めてかまいません。ただし、.NETでは、I で始まる名前とす
るのが一般的です。


上記 IProgrammer interfaceの定義から判るのは、IProgrammer インターフェ
ースは、WriteCode とTestCodeの２つのメソッドがあり、ともに、引数はなく、
stringを返すということです。ただし、どのようにしてそれを実現するのかの
情報はありません。

 ※ interfaceの各メンバーには、public 、private などのアクセス修飾子は、
    付けることはできません。

つまり、 これだけでは、使い物になりません。この IProgrammer で規定した
インターフェースを実装したクラスを定義しなければなりません。
例えば、以下のようなクラスでしょうか。

    class CShaprProgrammer : IProgrammer {
        public string WriteCode() {
            return "C#でコーディングする";
        }
        public string TestCode() {
            return "NUnitを使う";
        }
    }

    class JavaProgrammer : IProgrammer {
        public string WriteCode() {
            return "Javaでコーディングする";
        }
        public string TestCode() {
            return "JUnitを使う";
        }
    }

    ※ くだらない例ですみません。

継承のときと同様、 クラス名の後ろの : につなげて、interface の名前を書
きます。
これにより、 CShaprProgrammer、 JavaProgrammerは、 必ず、 WriteCode と
TestCode の２つのメソッドを持たないといけなくなります。
試しに、TestCode を取り除いてみると、コンパイルエラーとなるはずです。


■──────────────────────────────────
■ interfaceに含むことのできるメンバー

interface には、メソッドの他に、プロパティ、インデクサ、イベントを含む
ことができます。

以下に、プロパティとインデクサを含んだ例を示します。

    interface ISample {
        string Name {
            get;
            set;
        }
        object this[int index] {
            get;
        }
    }

ISampleは、 Name というプロパティと、 インデクサを既定しています。Name
は、 get と set があるため、ISampleを実装するクラスでは、get と set の
両方を定義しなくてはなりません。

また、インデクサの方は、object 型で、添え字が、int型であることが分かり
ます。 また、get だけしか記述していないので、ISampleを実装するクラスで
も、get だけを定義すれば良いことになります。

 ※ プロパティについては No024, No025を、
    インデクサについては、No053をご覧ください。

  ※ イベントの例については、今回は省略します。

ここまでの説明だと、まだ、interface の良さを実感できませんが、まずは、
文法的な部分だけは押さえておいてください。

interfaceは、 オブジェクト指向プログラミングにおいて、とても重要な概念
です。 また、 .NET Frameworkを使いこなす上でも大切な概念ですので、しっ
かりと理解をしてください。

┌─┬─────────────────────────┬─┬─┬─┐
│☆│ C#プログラミングレッスン  (ぼぼ週刊）            │＿│□│×│
├─┴─────────────────────────┴─┴─┴─┤
│ Published by Gushwell  (Microsoft MVP for Visual C#)             │
│ Copyright (C) 2004-2005 Gushwell All rights reserved.            │
│-------------------- Gushwell's Page ---------------------------- │
│ 窓際プログラマーの独り言  ：http://blog.livedoor.jp/gushwell/    │
│ 窓際プログラマーの読書三昧：http://gushwell.jugem.jp/            │
│             よろしかったらアクセスしてみてください！             │
└─────────────────────────────────┘

