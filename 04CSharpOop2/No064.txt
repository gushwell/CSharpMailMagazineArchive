┏━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━┳━┳━┓
┃☆┃ C#プログラミングレッスン                         ┃＿┃□┃×┃
┣━┻━━━━━━━━━━━━━━━━━━━━━━━━━┻━┻━┻━┫
┃interface (2)                                              No.064 ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

先週は、interfaceの定義のしかたと、interfceを継承し、具象クラスを定義
する方法を説明しました。
今回は、その具象クラスの使用方法について説明します。

■──────────────────────────────────
■ interfaceを実装したクラスの利用

先週お見せしたコードは以下の通り。

    interface IProgrammer {
        string WriteCode();
        string TestCode();
    }

    class CShaprProgrammer : IProgrammer {
        public string WriteCode() {
            return "C#でコーディングする";
        }
        public string TestCode() {
            return "NUnitを使う";
        }
    }

    class JavaProgrammer : IProgrammer {
        public string WriteCode() {
            return "Javaでコーディングする";
        }
        public string TestCode() {
            return "JUnitを使う";
        }
    }

では、これらのクラスを利用する側のコードを書いて見ましょう。

class Program {
    static void Main(string[] args) {
        IProgrammer taro = new CShaprProgrammer();
        IProgrammer jiro = new JavaProgrammer();
        Console.WriteLine(taro.WriteCode());
        Console.WriteLine(taro.TestCode());
        Console.WriteLine(jiro.TestCode());
        Console.WriteLine(jiro.WriteCode());
        Console.ReadLine();
    }
}

注目すべき点は、

   IProgrammer taro = new CShaprProgrammer();

の部分です。

   CShaprProgrammer taro = new CShaprProgrammer();

では、無いことに注目してください。もちろん、後者のように書いてもコンパ
イル・実行はできますが、interface の良さを活かすには、前者のように書く
必要があります。
インスタンスを生成したら、後は普通にメソッドを呼び出すだけです。

この例だと、ほとんど interface の良さを実感できませんが、まずは、文法
的な部分だけは押さえておいてくださいね。

■──────────────────────────────────
■ interfaceを使わない例

オブジェクト指向に慣れていない方は、上記コードをみて、とても冗長に感じ
ると思います。
以下のように書いた方が、短いし、素直なコードじゃないのか？と。

    class CShaprProgrammer {    // IProgrammer とは無関係
        public string WriteCode() {
            return "C#でコーディングする";
        }
        public string TestCode() {
            return "NUnitを使う";
        }
    }

    class JavaProgrammer {     // IProgrammer とは無関係
        public string WriteCode() {
            return "Javaでコーディングする";
        }
        public string TestCode() {
            return "JUnitを使う";
        }
    }

    class Program {
        static void Main(string[] args) {
            CShaprProgrammer taro = new CShaprProgrammer();
            JavaProgrammer jiro = new JavaProgrammer();
            Console.WriteLine(taro.WriteCode());
            Console.WriteLine(taro.TestCode());
            Console.WriteLine(jiro.TestCode());
            Console.WriteLine(jiro.WriteCode());
            Console.ReadLine();
        }
    }

上記のコードだと、確かにその通りかもしれません。しかし、 ポリモーフィ
ズムと組み合わせることで、interfaceを使った方が、柔軟性が増し、拡張性
のあるプログラムにすることが可能になるのです。

これ以上書くと、とても文章が長くなりそうなので、この続きは、また今度。
※ 今回は、とても中途半端な終わり方になってしまいました。
   すみません m(_ _)m

┌─┬─────────────────────────┬─┬─┬─┐
│☆│ C#プログラミングレッスン  (ぼぼ週刊）            │＿│□│×│
├─┴─────────────────────────┴─┴─┴─┤
│当メールマガジンへのご意見、ご要望、ご質問は、gushwell@sky.117.cx │
│までお願いいたします。                                            │
│ Published by Gushwell  (Microsoft MVP for Visual C#)             │
│ Copyright (C) 2004-2005 Gushwell All rights reserved.            │
│-------------------- Gushwell's Page ---------------------------- │
│ 窓際プログラマーの独り言  ：http://blog.livedoor.jp/gushwell/    │
│ 窓際プログラマーの読書三昧：http://gushwell.jugem.jp/            │
│             よろしかったらアクセスしてみてください！             │
└─────────────────────────────────┘

