┏━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━┳━┳━┓
┃☆┃ C#プログラミングレッスン                         ┃＿┃□┃×┃
┣━┻━━━━━━━━━━━━━━━━━━━━━━━━━┻━┻━┻━┫
┃event(2) - 発行者クラスの作成 [前編]                       No.070 ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

遅ればせながら、皆さん、明けましておめでとうございます。
本年も「C#プログラミングレッスン」を宜しくお願いいたします。

さて、前回は、 FileSystemWacher クラスを使い、イベントを受け取る購読者
オブジェクトの実装について説明しました。今回は、イベントを生成する側
（つまり、発行者オブジェクト）の実装について見ていきます。

今回の発行者オブジェクトの作成については、説明文が長くなってしまいまし
たので、２回に分けて説明します。

■──────────────────────────────────
■ はじめに

あなたは、テキストファイルを順に読み込み、ある特定の文字列で始まる行を
読み込んだときだけその行に対し、ある処理を行いたいとします。
どんな処理をするのかは、そのときによって異なり、ただ単に読み込んだ行を
コンソールに表示したい場合もあれば、その行を加工して別ファイルに書き出
したい場合もあります。特定の文字コードが含まれているか調べたい時もある
でしょう。
こんなときに、eventを使うとどのようなコードになるのかを見ていきましょ
う。

まずは、使い方(購読者側）としては、こんな感じでしょうか。

class Class1 {
    [STAThread]
    static void Main(string[] args) {
        TextFinder tf = new TextFinder(@"D:\temp\test.txt");
        tf.TextFound += new TextFoundEventHandler(tf_TextFoundEvent);
        tf.Execute("class");
        Console.ReadLine();
    }

    private static void tf_TextFoundEvent(object sender,
                                          TextFoundEventArgs e) {
        Console.WriteLine(e.Line);
    }
}

TextFinderクラスが、イベントを発行する発行者オブジェクトとなります。コ
ンストラクタでファイル名を指定し、イベントTextFoundEventにイベントハン
ドラtf_TextFoundEventを紐付けます。
そのあと、 処理対象とした文字列を引数とし、Executeメソッドを呼び出しま
す。
イベントハンドラtf_TextFoundEventは、 受け取ったイベント引数から、対象
行を取り出し、コンソールに出力します。
この例では、class で始まる行が見つかったら、イベントハンドラが呼ばれる
わけですね。

※ TextFinderという名前がイマイチですが、ご勘弁を。

■──────────────────────────────────
■ 発行者側クラスの作成手順

では、発行者側にあたるTextFinderクラスを作成しましょう。
発行者オブジェクトを実装するには、以下の手順を踏む必要があります。

1. イベント情報の型を定義
2. イベントのデリゲートの定義
3. イベントを発行するクラスの定義
  3-1. イベントの宣言
  3-2. イベントを発生させる On<EventName> という名前のメソッドの定義
  3-3. On<EventName>の呼び出しコードの記述

これらを順に見ていきましょう。

■──────────────────────────────────
■ イベント情報の型を定義

イベント通知を受け取る側に渡す情報が格納する型を定義します。
この型は、 EventArgsから派生させる必要があります。<EventName>EventArgs
という名前が一般的です。
なお、 付加情報がない場合は、独自の型を定義せずに、EventArgsをそのまま
使います。
今回の例では、 イベント名を TextFound としたので、TextFoundEventArgsク
ラスは、以下のようななります。

public class TextFoundEventArgs : EventArgs {
    private string _line;
    public TextFoundEventArgs(string line) {
        _line = line;
    }
    public string Line {
        get { return _line; }
    }
}

■──────────────────────────────────
■ イベントのデリゲートの定義

次に行うのは、イベントのdelegate宣言です。
イベントが発生した時に呼び出されるメソッドのシグニチャの宣言をします。

public delegate void TextFoundEventHandler(object sender,
                                           TextFoundEventArgs e);

<EventName>EventHandler という名前が一般的です。

引数は、２つにしてください。
  sender : イベントを発生させたオブジェクト
  e      : イベントの情報

なお、イベントがデータを生成しない（付加情報が不要な）場合、カスタムデ
リゲートを宣言する必要はありません。
その場合には、基本イベントハンドラの System.ComponentModel.EventHandler
を使用します。

-----------------------------------------------------------------------
次は、いよいよ、イベントを発行するクラスの定義です。

ですが、随分と長くなってしまったので、今回はこの辺でおしまいにします。
続きは、来週までお待ちください。


┌─┬─────────────────────────┬─┬─┬─┐
│☆│ C#プログラミングレッスン  (ぼぼ週刊）            │＿│□│×│
├─┴─────────────────────────┴─┴─┴─┤
│ Published by Gushwell  (Microsoft MVP for Visual C#)             │
│ Copyright (C) 2004-2005 Gushwell All rights reserved.            │
│-------------------- Gushwell's Page ---------------------------- │
│ 窓際プログラマーの独り言  ：http://blog.livedoor.jp/gushwell/    │
│ 窓際プログラマーの読書三昧：http://gushwell.jugem.jp/            │
│             よろしかったらアクセスしてみてください！             │
└─────────────────────────────────┘