┏━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━┳━┳━┓
┃☆┃ C#プログラミングレッスン                         ┃＿┃□┃×┃
┣━┻━━━━━━━━━━━━━━━━━━━━━━━━━┻━┻━┻━┫
┃interface(3)                                               No.065 ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

No064で説明した、IProgrammer を例に取り、説明を続けます。

■──────────────────────────────────
■ 先週のコード

再度、IProgrammer, CShaprProgrammer, JavaProgrammerのコードを以下に示
します。

    interface IProgrammer {
        string WriteCode();
        string TestCode();
    }

    class CShaprProgrammer : IProgrammer {
        public string WriteCode() {
            return "C#でコーディングする";
        }
        public string TestCode() {
            return "NUnitを使う";
        }
    }

    class JavaProgrammer : IProgrammer {
        public string WriteCode() {
            return "Javaでコーディングする";
        }
        public string TestCode() {
            return "JUnitを使う";
        }
    }


■──────────────────────────────────
■ 良くない例

あなたは、上記クラスを使って、プログラマに仕事をさせる（つまり、コード
を書き、 テストをする）機能を、自分のクラスMyClassの中に追加したいと考
えているとしましょう。
こんなコードを書きました。

class Program {
    static void Main(string[] args) {
        CShaprProgrammer taro = new CShaprProgrammer();
        JavaProgrammer jiro = new JavaProgrammer();
        DoWorkCSharpProgramer(taro);
        DoWorkJavaProgramer(jiro);
        Console.ReadLine();
    }
    static void DoWorkCSharpProgramer(CShaprProgrammer programmer)  {
        Console.WriteLine(programmer.WriteCode());
        Console.WriteLine(programmer.TestCode());
    }
    static void DoWorkJavaProgramer(JavaProgrammer programmer)  {
        Console.WriteLine(programmer.WriteCode());
        Console.WriteLine(programmer.TestCode());
    }
}

これは、あまり良くありませんね。VB.NETプログラマやPerlプログラマーが増
えるたびに、

  DoWorkVBNETProgrammer();
  DoWorkPerlProgrammer();

と、メソッドをどんどん追加して行かなければなりません。

では、DoWorkというメソッド１つにまとめてしまいましょう。

    static void DoWork(object programmer)  {
        if ( programmer is CShaprProgrammer ) {
            CShaprProgrammer cp = (CShaprProgrammer)programmer;
            Console.WriteLine(cp.WriteCode());
            Console.WriteLine(cp.TestCode());
        } else if ( programmer is JavaProgrammer ) {
            JavaProgrammer jp = (JavaProgrammer)programmer;
            Console.WriteLine(jp.WriteCode());
            Console.WriteLine(jp.TestCode());
        }
    }

このコードも、あまり良いコードとは言えませんね。やはり、VB.NETや、Perl
のプログラマが、 増えたら、DoWorkの中の条件分岐部分を変更して行かなく
てはなりません。ほとんど同じコードをだらだらと書くのは、無駄ですし、美
しくありませんよね。


■──────────────────────────────────
■ ポリモーフィズム

そこで登場するのが、 抽象クラス(abstractクラス）の時に解説したポリモー
フィズムです。
以下のコードをご覧ください。

class Program {
    static void Main(string[] args) {
        IProgrammer taro = new CShaprProgrammer();
        IProgrammer jiro = new JavaProgrammer();
        DoWork(taro);
        DoWork(jiro);
        Console.ReadLine();
    }
    static void DoWork(IProgrammer programmer) {
        Console.WriteLine(programmer.WriteCode());
        Console.WriteLine(programmer.TestCode());
    }
}


DoWorkメソッドは、たったこれだけです。引数で渡ってきたオブジェクトが、
CShaprProgrammerならば、CShaprProgrammer.WriteCode, TestCodeが呼ばれ、
JavaProgrammerならば、JavaProgrammer.WriteCode,JavaProgrammer.TestCode
が呼ばれます。
型による受験分岐は、いちいちプログラマが書かなくても良いのです。
それと、Mainメソッドでは、taro, jiro の変数の型を IProgrammer としてい
ることにも注目してください。

この DoWorkの特徴は、 具体的なクラス（具象クラス）がコードの中に現れな
いということです。現れる型は、IPrpgrammer というインターフェースになっ
ています。
つまり、 DoWork は、IPrpgrammer というインターフェースを実装しているク
ラスのオブジェクトならば、何でも受け取ることができるのです。
ということは、 このDoWrokを作った後に、VBProgrammer、PerlProgrammer と
いうクラスが出来ても、DoWorkは、変更の必要が無いのです。


■──────────────────────────────────
■ Abstractクラスとインターフェース

ここまで、読んできた人は、「なんだ、Abstractクラスとほとんど変らないじ
ゃないか」、「Abstractクラスの方が、実体のあるメソッドやフィールドを含
めることができる分、使い道がいろいろと有りそうだ」と思ったかもしれませ
ん。
しかし、Abstractクラスとの最も大きな違いは、継承関係とは無関係にポリモ
ーフィズムが使えることです。

つまり、
   class CShaprProgrammer : Employee , IProgrammer { }
   class JavaProgrammer   : Engineer , IProgrammer { }

のように、親クラスが別だったとしても、DoWorkはそのまま利用できるのです。

※ あるクラスを定義する際、スーパークラスは１つしか指定できませんが、   interface はいくつでも指定できます。
   ArrayListを MSDNのHELPなどで調べてみてください。IList,ICollection,
   IEnumerable,ICloneable などのinterfaceを継承していることが確認でき
   ると思います。


■──────────────────────────────────
■ 再度インターフェースとは

No063において、 「インターフェースとは、クラスの持つメソッドやプロパテ
ィのインターフェースだけを抜き出したものです」という説明をしましたが、

  「インターフェースは、クラスの規格を定めたもの」

と言い変えることもできます。
工業製品には、様々な「規格」が存在し、その「規格」に合った製品を作るこ
とで、製品同士を繋げたり、ある場所に正しく設置できたりします。
interfaceは、 プログラミング言語の文法に、この「規格」の概念を持ち込ん
だものと考えると、理解しやすいかも知れません。

┌─┬─────────────────────────┬─┬─┬─┐
│☆│ C#プログラミングレッスン  (ぼぼ週刊）            │＿│□│×│
├─┴─────────────────────────┴─┴─┴─┤
│当メールマガジンへのご意見、ご要望、ご質問は、gushwell@sky.117.cx │
│までお願いいたします。                                            │
│ Published by Gushwell  (Microsoft MVP for Visual C#)             │
│ Copyright (C) 2004-2005 Gushwell All rights reserved.            │
│-------------------- Gushwell's Page ---------------------------- │
│ 窓際プログラマーの独り言  ：http://blog.livedoor.jp/gushwell/    │
│ 窓際プログラマーの読書三昧：http://gushwell.jugem.jp/            │
│             よろしかったらアクセスしてみてください！             │
└─────────────────────────────────┘