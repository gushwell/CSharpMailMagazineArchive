┏━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━┳━┳━┓
┃☆┃ C#プログラミングレッスン                         ┃＿┃□┃×┃
┣━┻━━━━━━━━━━━━━━━━━━━━━━━━━┻━┻━┻━┫
┃delegate(3)                                                No.068 ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

■──────────────────────────────────
■ マルチキャストデリゲートとは、

前回までのデリゲートでは、 1回のデリゲートの呼び出しで１つのメソッドが
呼ばれるというコードでした。
マルチキャストデリゲートの機能を使うと、１回のデリゲートの呼び出しで、
複数のメソッドを順に呼び出すことができます。

では、例を見て見ましょう。

class MainClass {
    public static void Main() {
        Program pgm = new Program();
        pgm.Execute();
    }
}

public delegate void MyDelegate(int i);

class Program {
    public void Execute() {
        MyClass mc = new MyClass();
        MyDelegate md;
        md = new MyDelegate(DelegateFunction1);
        md += new MyDelegate(DelegateFunction2);
        mc.DoSomething(md);
        Console.ReadLine();
    }

    private void DelegateFunction1(int n) {
        Console.WriteLine("{0}が引数として渡されました", n);
    }
    private void DelegateFunction2(int n) {
        Console.WriteLine("引数は、{0}です。", n);
    }
}

class MyClass {
    public void DoSomething(MyDelegate Function) {
        for (int i = 0; i < 3; i++)
            Function(i);
    }
}

前回のソースコードを少し手直ししただけです。違いは、Program.Execute
の部分です。

MyDelegate の変数 md を用意し、 そこにdelegateのインスタンスを代入して
います。さらに、+= 演算子で、もう1つのdelegateのインスタンスを【追加】
しています。
つまり、md には、２つの delegateのインスタンスが保持されていることにな
ります。 なお、delegate も型の一種なので、MyDelegate型の変数 md を宣言
することが出来ます。

   public delegate void MyDelegate(int i);

は、 MyDelegateという名前の delegate型を定義している文だということを理
解すれば、

   MyDelegate md;

という変数宣言も納得してもらえると思います。

話が脱線しました、マルチキャストデリゲートの話に戻りましょう。

変数 md には、２つのメソッドの情報が格納されているのでしたね。
次の行で、この md を DoSomething の引数に渡しています。

DoSomethingでは、コード上は、３回Functionを呼び出していますが、実際の
結果は、次のようになります。

 0が引数として渡されました
 引数は、0です。
 1が引数として渡されました
 引数は、1です。
 2が引数として渡されました
 引数は、2です。

この結果から、   1[回の  Function  の呼び出しで、  DelegateFunction1と
DelegateFunction2 の２つのメソッドが呼び出されているのが分かると思いま
す。


■──────────────────────────────────
■ -=演算子

最後に、Executeメソッドを以下のように書き変えたら、結果がどうなるかを
予想してください。


    public void Execute() {
        MyClass mc = new MyClass();
        MyDelegate md;
        md = new MyDelegate(DelegateFunction1);
        md += new MyDelegate(DelegateFunction2);
        mc.DoSomething(md);
        Console.WriteLine("-----");
        md -= new MyDelegate(DelegateFunction1);
        mc.DoSomething(md);
        Console.ReadLine();
    }

結果は以下のようになります。

 0が引数として渡されました
 引数は、0です。
 1が引数として渡されました
 引数は、1です。
 2が引数として渡されました
 引数は、2です。
 -----
 引数は、0です。
 引数は、1です。
 引数は、2です。

この結果からお分かりのとおり、-=演算子は、mc変数に格納されている
delegateを削除する働きをします。


-----------
３回にわたってdelegateの説明をしましたが、delegateは、C#のeventの基礎
となっています。
delegateを理解すれば、eventはとても理解しやすいと思います。


┌─┬─────────────────────────┬─┬─┬─┐
│☆│ C#プログラミングレッスン  (ぼぼ週刊）            │＿│□│×│
├─┴─────────────────────────┴─┴─┴─┤
│当メールマガジンへのご意見、ご要望、ご質問は、gushwell@sky.117.cx │
│までお願いいたします。                                            │
│ Published by Gushwell  (Microsoft MVP for Visual C#)             │
│ Copyright (C) 2004-2005 Gushwell All rights reserved.            │
│-------------------- Gushwell's Page ---------------------------- │
│ 窓際プログラマーの独り言  ：http://blog.livedoor.jp/gushwell/    │
│ 窓際プログラマーの読書三昧：http://gushwell.jugem.jp/            │
│             よろしかったらアクセスしてみてください！             │
└─────────────────────────────────┘
