┏━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━┳━┳━┓
┃☆┃ C#プログラミングレッスン                         ┃＿┃□┃×┃
┣━┻━━━━━━━━━━━━━━━━━━━━━━━━━┻━┻━┻━┫
┃delegate(2)                                                No.067 ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

■──────────────────────────────────
■ インスタンスメソッドを対象にしたdelegate

前回は、staticメソッドを対象とした delegate を紹介しました。
今回は、通常のメソッドを対象とした delegateの例を示します。早速、以下
のコードをご覧下さい。

  1:class MainClass {
  2:    public static void Main() {
  3:        Program pgm = new Program();
  4:        pgm.Execute();
  5:    }
  6:}
  7:
  8:public delegate void MyDelegate(int i);
  9:
 10:class Program {
 11:    public void Execute() {
 12:        MyClass mc = new MyClass();
 13:        mc.DoSomething(new MyDelegate(DelegateFunction1));
 14:        mc.DoSomething(new MyDelegate(DelegateFunction2));
 15:        Console.ReadLine();
 16:    }
 17:
 18:    private void DelegateFunction1(int n) {
 19:        Console.WriteLine("{0}が引数として渡されました", n);
 20:    }
 21:    private void DelegateFunction2(int n) {
 22:        Console.WriteLine("引数は、{0}です。", n);
 23:    }
 24:}
 25:
 26:class MyClass {
 27:    public void DoSomething(MyDelegate Function) {
 28:        for ( int i = 0; i < 3; i++ )
 29:            Function(i);
 30:    }
 31:}

Mainメソッドがある MainClass、これは特に難しいことをやっているわけでは
ないので、説明の必要はありませんね。

では、Program クラスを見てみましょう。
Mainメソッドから呼ばれるProgramクラスのExecute メソッドでは、MyClass 
のインスタンスを生成し、DoSomethingを呼び出しています（13,14行目）。

呼び出す際に、このクラスで定義したメソッドDelegateFunction1 と
DelegateFunction2 をDoSomething に渡しています。関数を引数に渡すときに
は、 直接渡すことができないので、delegate であるMyDelegation のインス
タンスを生成する必要があったのでしたね。

 ※ ちなみに、C#2.0 では、以下のように書くことが可能になります。

        mc.DoSomething(DelegateFunction1);
        mc.DoSomething(DelegateFunction2);

    C#2.0についての説明は機会をみて、行いたいと考えています。

１回目の DoSomethimgの呼び出しでは、DelegateFunction1 が３回呼ばれ、
２回目の DoSomethimgの呼び出しでは、DelegateFunction2 が３回呼ばれます。

MyClass の DoSomethinは、 ３回 Function を呼び出しています。何が呼び出
されるかは、引数で渡されたメソッドにより動的に決まります。

Programクラスから見ると、MyClassの DoSomethingが、自分自身のメソッドを
呼び返しているように見えますね。このように、呼び出した先のメソッドから、
指定した関数を呼び出す動作を コールバック と呼んでいます。

今回のサンプルでは、 前回のサンプルに比べ、DoSomethingの動作が、動的に
切り替わるということが、より明確になっていると思います。
MyClass.DoSomething 側からみれば、
「３回同じ処理をやってあげるから、どんな処理をやるかは教えてね」
となり、 DoSomethingがコーディングされた時点では、処理が固定されていま
せん。

Program クラス側からみれば、 MyClass.DoSomethimgに処理を依頼しているの
ですが
「指定したメソッドを 動的にDoSomethingに注入している」
ように見えるわけです。
DoSomethingを実行時にカスタマイズしているという見方もできますね。

┌─┬─────────────────────────┬─┬─┬─┐
│☆│ C#プログラミングレッスン  (ぼぼ週刊）            │＿│□│×│
├─┴─────────────────────────┴─┴─┴─┤
│当メールマガジンへのご意見、ご要望、ご質問は、gushwell@sky.117.cx │
│までお願いいたします。                                            │
│ Published by Gushwell  (Microsoft MVP for Visual C#)             │
│ Copyright (C) 2004-2005 Gushwell All rights reserved.            │
│-------------------- Gushwell's Page ---------------------------- │
│ 窓際プログラマーの独り言  ：http://blog.livedoor.jp/gushwell/    │
│ 窓際プログラマーの読書三昧：http://gushwell.jugem.jp/            │
│             よろしかったらアクセスしてみてください！             │
└─────────────────────────────────┘
