┏━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━┳━┳━┓
┃☆┃ C#プログラミングレッスン                         ┃＿┃□┃×┃
┣━┻━━━━━━━━━━━━━━━━━━━━━━━━━┻━┻━┻━┫
┃delegate                                                   No.066 ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

■──────────────────────────────────
■ delegateとは

C言語には、 関数ポインタというものが存在しますが、delegateは、C#版の関
数ポインタです。
と言っても、 C言語を知らない方には、これだけだと何のことか分かりません
ね。
例えば、こんな例を考えてみましょう。

  void DoSomething01(int n) {
      int result = Function_A(n);
      // result を使った処理
      ...
  }
  void DoSomething02(int n) {
      int result = Function_B(n);
      // result を使った処理
      ...
  }
  void DoSomething03(int n) {
      int result = Function_C(n);
      // result を使った処理
      ...
  }


DoSomethingXX メソッドの違いは、Function_A,  B, C を呼び出す箇所だけで
それ以外は、まったく同じだと仮定しましょう。
この時に、関数を引数に取ることができれば、

  void DoSomething(int n, 関数 Function) {
      int result = Fnction(n);  // 引数で渡された関数を呼び出す
      // result を使った処理
      ...
  }

と一本化できて、 コードの重複を防ぐことができます。 また、 Function_D,
Function_Eと関数が増えていっても、 DoSomething自体は変更する必要があり
ません。
この関数を引数に取るための機能が、C#のdelegateだと言って良いでしょう。
 ※ ちなみに、引数で受け取れるということは、通常の変数にも代入できると
    いうことで、関数の引数に渡すだけが、delegateの使い方ではありません。

■──────────────────────────────────
■ delegateを使ったコード

では、delegateを使った実際のコードを見てみましょう。

  1: class Program {
  2:     public static void Main() {
  3:         MyDelegate md = new MyDelegate(DelegateFunction);
  4:         DoSomething(md);
  5:     }
  6:
  7:     public static void DoSomething(MyDelegate Function) {
  8:         Function(10);
  9:     }
 10:
 11:     public delegate void MyDelegate(int i);
 12:
 13:     public static void DelegateFunction(int n) {
 14:         Console.WriteLine("{0}が引数として渡されました", n);
 15:     }
 16: }

 ※ 説明のために行番号を付加しました。

11 行目が、 delegateの宣言です。delegateでは、関数の戻り値、引数などを
定めます。 ちょっと、ピンとこないかも知れませんが、classや enum と同様
に型を定義していると思ってください。 この例では、MyDelegate という名前
の型で、その型の種類が delegateであるわけです。

実際の関数は、 13行目から定義している DelegateFunctionです。引数、戻り
値は、delegate宣言と同一にする必要があります。
この関数が、 DoSomethimgに渡って欲しいのですが、直接、関数名を渡すこと
ができません。そのため、3-4 行目のような記述が必要になります。

  MyDelegate md = new MyDelegate(DelegateFunction);

で、MyDelegate型のインスタンスを生成します。この時のコンストラクタの
引数に、DelegateFunctionを渡してあげます。
その後、 生成したdelegateのインスタンスをDoSomethingの引数に渡します。

  DoSomething(md);

このような手順を踏むことで、7 行目の DoSomethingでは、引数で渡ってきた
関数（delegate）を間接的に呼び出すことが可能になります。

なお、3-4行は、以下のように、１行にすることも可能です。

  DoSomething(new MyDelegate(DelegateFunction));

ちょっとややこしいですが、 DoSomethimgという関数は、引数に渡されるもの
によって、動作を色々と変るカメレオンのような関数になったわけです。

ある程度プログラムを組んだことのある人ならば、「ほとんど、やることは同
じなんだけど、微妙に処理が違うんだよね」というプログラムに出会ったこと
があると思います。そんな時に、delegateを使うと、エレガントなコードを書
ける場合があります。

 ※ 継承とポリモーフィズムを使って、処理を共通化する方法もありますが、
    delegate を使えば、クラスという枠に縛られない、より柔軟なコードを
    書けると思います。

┌─┬─────────────────────────┬─┬─┬─┐
│☆│ C#プログラミングレッスン  (ぼぼ週刊）            │＿│□│×│
├─┴─────────────────────────┴─┴─┴─┤
│当メールマガジンへのご意見、ご要望、ご質問は、gushwell@sky.117.cx │
│までお願いいたします。                                            │
│ Published by Gushwell  (Microsoft MVP for Visual C#)             │
│ Copyright (C) 2004-2005 Gushwell All rights reserved.            │
│-------------------- Gushwell's Page ---------------------------- │
│ 窓際プログラマーの独り言  ：http://blog.livedoor.jp/gushwell/    │
│ 窓際プログラマーの読書三昧：http://gushwell.jugem.jp/            │
│             よろしかったらアクセスしてみてください！             │
└─────────────────────────────────┘