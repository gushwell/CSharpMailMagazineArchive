┏━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━┳━┳━┓
┃☆┃ C#プログラミングレッスン                         ┃＿┃□┃×┃
┣━┻━━━━━━━━━━━━━━━━━━━━━━━━━┻━┻━┻━┫
┃event(1)                                                   No.069 ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

■──────────────────────────────────
■ イベントとは

この記事を読んでいる読者の方々は、既に、イベントハンドラというものを作
成したことがあると思います。
イベントハンドラとは、ボタンをクリックした時、フォームがロードされた時
などに動くメソッドのことです。
以下のようなコードを見たことがあると思います。これがイベントハンドラで
す。

  private void button1_Click(object sender, System.EventArgs e) {
     // ボタンがクリックされたときの処理
     ...
  }

では、イベントとは何かというと、「ボタンがクリックされた」「フォームが
ロードされた」「フォームのサイズが変更された」といった特定の現象のこと
です。

C#では、オブジェクト内である特定の現象(イベント)が発生した時に、その現
象が発生したことを、他のオブジェクトに通知するメカニズムが存在します。

このメカニズムがあることで、 GUIのプログラミングがとても簡単に組めるの
です。

イベントを理解するには、『通知する側のオブジェクト』と『イベントを受け
取る側のオブジェクト』の２つが存在することを、押さえておく必要がありま
す。
ここでは、『通知する側のオブジェクト』を「発行者オブジェクト」、『イベ
ントを受け取る側のオブジェクト』を「購読者オブジェクト」と記述すること
にします。

今回は、購読者オブジェクトについての説明です。

■──────────────────────────────────
■ FileSystemWatcherクラスを使った例

まずは、イベントを受け取る側（購読者オブジェクト）のコードをどう書くの
かを .NET Frameworkに用意されている FileSystemWatcherクラスを例にとり、
説明します。
FileSystemWatcherクラスは、 指定したディレクトリまたはディレクトリ内の
ファイルが変更されたときにイベントを発生してくれるクラスです。
このFileSystemWatcherが、「発行者オブジェクト」にあたるわけですね。

このFileSystemWatcherクラスを使った例を以下に示します。
この例では、C:\Temp フォルダに新たなファイルまたはディレクトリが作成さ
れるとfsw_Created というイベントハンドラが呼ばれるようになっています。

using System;
using System.IO;

namespace Gushwell.Sample {
    class Class1 {
        [STAThread]
        static void Main(string[] args) {
            FileSystemWatcher fsw = new FileSystemWatcher(@"C:\temp");
            fsw.Created += new FileSystemEventHandler(fsw_Created);
            fsw.EnableRaisingEvents = true;
            Console.ReadLine();
        }

        private static void fsw_Created(object sender, 
                                          FileSystemEventArgs e) {
            Console.WriteLine(e.FullPath + "が作成されました");
        }
    }
}

■──────────────────────────────────
■ 購読者オブジェクトで行うこと

購読者オブジェクト側では、以下の２つのことを行う必要があります。

 (1) イベントハンドラの定義
 (2) イベントハンドラをイベントに登録

fsw_Created メソッドが、イベントハンドラです。
FileSystemWatcherが、ファイルが作成されるのを感知した時にこのメソッド
を呼び出すわけですね。

ただ、FileSystemWatcherは、どのイベントハンドラを呼び出したら良いのか
は、知りませんので、イベントとイベントハンドラを結びつける必要がありま
す。そのために行うのが、「発行者オブジェクト」の特定のイベント（ここで
は、Cretedイベント）と上記で作成したイベントハンドラを関連付けです。
やさしく言えば、
「もし、ファイルが作成されたら fsw_Created メソッドを呼び出してね」
と、FileSystemWatcherオブジェクトにお願いするわけですね。

このお願いする部分が、
    fsw.Created += new FileSystemEventHandler(fsw_Created);
の行です。Created というイベントに、Fsw_Created というメソッドを対応付
けているわけですね。
 ※ この構文は、すでにdelegateのところでも説明しましたので省略します。

ちなみに、次の行の
    fsw.EnableRaisingEvents = true;
は、 FileSystemWatcherオブジェクトに、監視を開始するように依頼する命令
です。

ただ、VisualStudio.NETを利用している場合は、実際の順番は、(2), (1)の順
に作業をします。

具体的には、
  fsw.Create +=
までをタイプし、その後、Tab キーを押します。すると、
  new FileSystemEventHandler(fsw_Created);
のコードが自動で挿入されます。これが (2) の作業になります。
さらにつづいて、Tab キーを押すと、

  private static void fsw_Created(object sender, 
                                    FileSystemEventArgs e) {

  }

のコードが自動で挿入されますので、イベントハンドラ内のコードを記述しま
す。これが、(1)の作業ですね。

この便利な機能があるおかげで、細かな記述の仕方を覚えていなくても、購読
者オブジェクト側のコードを簡単に記述することができます。

なお、 FileSystemWacher を使えば、「変更された」「削除された」「リネー
ムされた」といったイベントを検知することができます。是非、これらの機能
を使ったコードをご自身で書いてみてください。

======================================================================
◆次号のお知らせ◆
まことに勝手ではありますが、年末年始の期間は、当メルマガの発行はお休
みさせていただきます。次号は、来年１月１７日頃を予定しています。
では、良いお年を！

┌─┬─────────────────────────┬─┬─┬─┐
│☆│ C#プログラミングレッスン  (ぼぼ週刊）            │＿│□│×│
├─┴─────────────────────────┴─┴─┴─┤
│当メールマガジンへのご意見、ご要望、ご質問は、gushwell@sky.117.cx │
│までお願いいたします。                                            │
│ Published by Gushwell  (Microsoft MVP for Visual C#)             │
│ Copyright (C) 2004-2005 Gushwell All rights reserved.            │
│-------------------- Gushwell's Page ---------------------------- │
│ 窓際プログラマーの独り言  ：http://blog.livedoor.jp/gushwell/    │
│ 窓際プログラマーの読書三昧：http://gushwell.jugem.jp/            │
│             よろしかったらアクセスしてみてください！             │
└─────────────────────────────────┘
