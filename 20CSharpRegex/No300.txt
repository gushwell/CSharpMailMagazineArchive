
■━ [C#プログラミングレッスン] ━━━━━━━━━━━━━━━ No.300 ━□

 「正規表現編」-- 高度な正規表現
                                                            by Gushwell
□━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━■

今回が、正規表現編の最終回です。300号を記念し、読者プレゼントをご用意して
います。是非、最後までお読みください。

■□───────────────────────────────────
■□ 高度な正規表現

では、最後に、２つほど正規表現を記して、このシリーズを終りたいと思います。

 \w+(?=\s*=(?![>=]))

 \b(\w)\w+\1\b

最初の正規表現は、C#のソースコードを対象にしています。２つ目は、テキスト
ファイルならば何でも良いですので、EmEditorなど正規表現が扱えるエディタで
検索してみてください。その結果でおおよその見当は付くと思います。

Visual Studio 2010の検索機能だと、この書き方をサポートしていないようで、
上手く行きませんでした。

※ Visual Studio が、.NET Framework が扱える正規表現をサポートしていないっ
  てどういうことなのかな？ ちょっと不思議です。

それでは、この２つの正規表現の解説をします。


■□───────────────────────────────────
■□ ゼロ幅の正の先読みアサーション

 \w+(?=\s*=(?![>=]))

これは、

 int number = 10;

のような代入文の左辺の変数名（プロパティ名）に一致します。
順を追って説明しましょう。まず、

 \w+\s*=

という正規表現はいいでしょうか。

 \w は、単語に使用される任意の文字
 \s は、空白文字 （タブ、改行も含む）
 * は、直前の要素と 0 回以上の一致

ですので、上記のC#に代入文だと、"number =" と一致します。しかし、求めた
いのは、"number"だけですので、 " =" は除外しなければなりません。そのよう
なときに、(?=subexpression) という記述を使います。MSDNには

「ゼロ幅の正の先読みアサーションです。」

とありますが、分かりやすく書くと、これは、「マッチさせるのだけど、マッチ
した結果には含めないよ」という意味です。
"\s*=" の部分を (?= と ) で括った  "\w+(?=\s*=)" という正規表現は、この
例だと number と一致することになります。
しかし、これだけだと、

 n => Console.WrteLine(n);

とか

 if ( m == 10 )

のような入力に対し、n, m が一致してしまいます。しかし、これらは代入では
ないので、除外しなければなりません。
そこで、(?!subexpression) という記法を使います。
これは、
「subexpressionに一致していない部分にマッチする」という意味で、(?![>=])
を正規表現に追加し、> や = ではないものにマッチさせます。つまり、== と
か => は対象から外れることになります。


■□───────────────────────────────────
■□ 前方参照構成体

 \b(\w)\w+\1\b

これは、両端に同じ文字がある文字列と一致します。
たとえば、

"text, week, seek, しかし、かかし、しんぶんし"

という入力に対しては、「text」  「しかし」  「しんぶんし」 の３つと一致
します。

問題は、両端が同じ文字というのをどうやって表現するかですが、(\w) と \1
がそれを表しています。
\ の後に数字を書くと、前方で一致したグループ化された部分文字列を参照する
ことができます。

\1 だと、1番の番号が付加された部分文字列を参照できます。具体的には、(\w)
で一致したものですね。
つまり、

(\w)\w+\1

で、両端が同じ単語を表すことができます。
さらに \b で括っています。\bは、\wと\Wとの境界位置と一致しますので、"ん
ぶん" とは一致しません。

------------------------------------------------------------------------

正規表現は、複雑なものは、呪文のようにしか見えないのが難点ですが、とても
強力な文字列操作ができることが分かっていただけたかと思います。

その他、この正規表現編では、触れることの出来なかった正規表現の要素が沢山
あります。それらについては、

MSDNライブラリ 「正規表現言語要素」
http://msdn.microsoft.com/ja-jp/library/az24scfc.aspx
をご覧ください。

さらに、正規表現について学習したい方は、

『詳説 正規表現 第3版』Jeffrey E.F. Friedl (著)
http://www.amazon.co.jp/exec/obidos/ASIN/4873113598/gaius-22/

を読まれると良いと思います。


------------------------------------------------------------------------

今回で、「正規表現編」は終了となります。次の話題はまだ決まっていません。
充電期間を、1か月ほど頂こうと思います。
次回は、9月初旬を予定しています。


─────────────────────────────────────
『C#プログラミングレッスン』  (ぼぼ週刊）
 ☆皆さまからの感想をお待ちしています。http://gushwell.ifdef.jp/mail.html
─────────────────────────────────────
 Published by Gushwell.
  Copyright (C) 2011 Gushwell All rights reserved.
  Microsoft MVP for Visual C#(Apr 2005 - Mar 2012)

 ■Gushwell's Page
 Gushwell's C# Dev Notes           : http://gushwell.ldblog.jp/
 Gushwell's C# Programming Page    : http://gushwell.ifdef.jp/
 Gushwell's F# Programming Diary   : http://techbank.jp/gushwell/
 Gushwellの読書ノート              : http://gushwell.jugem.jp/
─────────────────────────────────────
