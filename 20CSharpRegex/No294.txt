

■━ [C#プログラミングレッスン] ━━━━━━━━━━━━━━━ No.294 ━□

 「正規表現編」-- グループ化構成体
                                                            by Gushwell
□━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━■

これまでは、正規表現の初歩的な内容でしたが、今回からは、もう少し高度な話題
に移っていきたいと思います。

■□───────────────────────────────────
■□ Matchesメソッドの復習

テキストから、"Regexクラス" "Matchクラス" "GroupCollectionクラス"などアル
ファベットに続き、"クラス"が来る部分文字列を取り出したいとします。

このコードは、以下のように書けます。

 string text = "Console Class、テキストクラス Regexクラス" +
              " Matchクラス GroupCollectionクラスなど";
 var mc = Regex.Matches(text, @"[a-zA-Z]+クラス");
 foreach (Match m in mc) {
    Console.WriteLine(m.Value);
 }

実行すると、

 Regexクラス
 Matchクラス
 GroupCollectionクラス

が表示されます。

正規表現 "[a-zA-Z]+クラス" は、半角のアルファベットが1文字以上連続し、そ
の後に"クラス"が続く部分文字列を示しています。


■□───────────────────────────────────
■□ グループ化構成体

では、取り出したい文字列が、"Regex" "Match" "GroupCollection"といったアル
ファベットからなる英単語だけで、"クラス"という文字列は取り出す対象からは
除外したいと思います。
もちろん、この時、"Console" や "Class" など "クラス" が後に続かない英単語
は対象から外します。

Matches メソッドで見つかった文字列から "クラス" を除外すればできないことは
無いですが、正規表現のグループ化構成体を使えば、もっとスマートにやることが
できます。

正規表現を

 "[a-zA-Z]+クラス"

から

 "([a-zA-Z]+)クラス"

に変更します。()でグループ化をします。
グループ化することで、どの部分が一致したのかを把握できます。
()自体は、検索対象の文字ではなく、( )の中に書かれた文字が検索対象となりま
す。
Matchオブジェクトの、Groupsプロパティを参照することで、このグループ化した
部分に一致した結果を参照することが可能になります。

では、そのコードをお見せします。

 string text = "Console Class、テキストクラス Regexクラス" +
              " Matchクラス GroupCollectionクラスなど";
 var mc = Regex.Matches(text, @"([a-zA-Z]+)クラス");
 foreach (Match m in mc) {
    Console.WriteLine(m.Groups[1].Value);
 }

この結果は、

 Regex
 Match
 GroupCollection

となります。

Groups[1] で最初に一致したグループを参照できます。
正規表現の中に、複数のグループ化があった場合は、Groups[1], Groups[2],
Groups[3]と順番に参照できます。
なお、Groups[0]は一致した全体を参照できます。Console.WriteLineのところを
Groups[0]とすれば、

 Regexクラス
 Matchクラス
 GroupCollectionクラス

が表示されます。


■□───────────────────────────────────
■□ 名前付きグループ

今回の最後に、グループ化構成体の面白い使い方を紹介しましょう。

 Match m = Regex.Match("MaxValue=32767", @"^(?<name>\w+)=(?<value>\w+)");
 Console.WriteLine(m.Groups["name"].Value);
 Console.WriteLine(m.Groups["value"].Value);

?<name> という表記は、グループ化に名前を付けています。この名前を使い、
C#のコードから、一致した内容を参照することができます。

結果は、

MaxValue
32767

が表示されます。

==========================================================================
■ Gushwellの書籍

『C#プログラミング入門』
 http://www.amazon.co.jp/exec/obidos/ASIN/4777515982/gaius-22/

目次は、こちらで確認できます。
 http://www.kohgakusha.co.jp/books/detail/978-4-7775-1598-1


─────────────────────────────────────
『C#プログラミングレッスン』  (ぼぼ週刊）
 ☆皆さまからの感想をお待ちしています。http://gushwell.ifdef.jp/mail.html
─────────────────────────────────────
 Published by Gushwell.
  Copyright (C) 2011 Gushwell All rights reserved.
  Microsoft MVP for Visual C#(Apr 2005 - Mar 2012)

 ■Gushwell's Page
 Gushwell's C# Dev Notes           : http://gushwell.ldblog.jp/
 Gushwell's C# Programming Page    : http://gushwell.ifdef.jp/
 Gushwell's F# Programming Diary   : http://techbank.jp/gushwell/
 Gushwellの読書ノート              : http://gushwell.jugem.jp/
─────────────────────────────────────
