
■━ [C#プログラミングレッスン] ━━━━━━━━━━━━━━━ No.299 ━□

 「正規表現編」-- Regexで高度な置換処理(2)
                                                            by Gushwell
□━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━■


■□───────────────────────────────────
■□ MatchEvaluatorを使った置換処理

Replaceメソッドには、

 public static string Replace(
    string input,
    string pattern,
    MatchEvaluator evaluator
 )

という 第3引数に、System.Text.RegularExpressions.MatchEvaluator オブジェ
クトを受け取る Replace メソッドがあります。

今回は、このMatchEvaluatorを使った置換処理について説明します。

MatchEvaluator は、デリゲートで、以下のように定義されています。

 public delegate string MatchEvaluator(Match match)

Matchを引数に受け取り、文字列を返します。ここで返した文字列が一致した部
分と置き換わります。

例えば、

 "1000人、12345個、987000円、50台";

を

 "1,000人、12,345個、987,000円、50台";

とカンマ付きの表現に変換したい場合は、MatchEvaluatorを使った置換処理をす
ると、簡単に記述することができます。

そのコードは、

 public static void Main() {
    string text = "1000人、12345個、987000円、50台";
    string pattern = @"\d+";
    string ntext = Regex.Replace(text, pattern, ToFormatNumber);
    Console.WriteLine(ntext);
    Console.ReadLine();
 }

 public static string ToFormatNumber(Match match) {
    return long.Parse(match.Value).ToString("#,#");
 }


となります。ToFormatNumberで、Matchを受け取り、変換処理をして文字列を
返すメソッドです。このメソッドを Regex.Replace の第3引数で渡しています。
Matchオブジェクトの Valueプロパティには、呼び出される度に、

 1000
 12345
 987000
 50

が格納されていますので、それをカンマ付きでフォーマットした文字列を返して
あげればよいのです。

なお、ラムダ式を使えば、ToFormatNumberメソッドを定義することなく、以下の
ように記述することができます。

 string ntext = Regex.Replace(text, pattern,
                   match => long.Parse(match.Value).ToString("#,#"));



■□───────────────────────────────────
■□ 量指定子

前回、量指定子について説明します。と書きましたが、うまい例が思い浮かびま
せんでした。すみません。

そこで、量指定子がどんなものかという説明をさせていただき、この号を終わりに
したいと思います。

-----

正規表現を書いていると、
・3回以上の繰り返しとマッチさせたい。
・4文字か、５文字のいずれかにマッチさせたい。

という要求が出てくる場合があります。
数字が５文字以上を

 \d\d\d\d\d*

と書いても良いですが、スマートではありません。
そんな時に、量指定子が使えます。量指定子には以下の３つの書き方があります。

 {n}   ちょうど n 回の繰り返しに一致します。
 {n,}  n 回以上の繰り返しに一致します。
 {n,m} n 回以上 m 回以下の繰り返しに一致します。

※、これまで利用してきた *, +, ? も量指定子の一種で、

 *   {0,}
 +   {1,}
 ?   {0,1}

と対応します。最短一致の場合は

 *?  {0,}?
 +?  {1,}?
 ??  {0,1}?

と一致します。

例
 @"\b(\d{4}-\d{4}-\d{4}-\d{4})\b"

 \b は、単語区切りを表し、行頭、行末も一致します。
 ( ) で括りグループ化することで、1234-2345-3456-4567 といった文字列を抜
 き出すことができます。


 @"\p{IsKatakana}ー\p{IsKatakana}{2}\b

 シーズン、ゴールド、シーソー などと一致します。
 ゴールデン、ノートなどとは一致しません。


そう言えば、このシリーズ第1回目の、「英字で始まりその後数字が5文字以上連
続する部分文字列」の正規表現の書き方について触れていませんでした。
この正規表現は、

 "[a-zA-Z][0-9]{5,}"

となります。


==========================================================================
■ Gushwellの書籍

『C#プログラミング入門』
 http://www.amazon.co.jp/exec/obidos/ASIN/4777515982/gaius-22/

 目次は、こちらで確認できます。
 http://www.kohgakusha.co.jp/books/detail/978-4-7775-1598-1


─────────────────────────────────────
『C#プログラミングレッスン』  (ぼぼ週刊）
 ☆皆さまからの感想をお待ちしています。http://gushwell.ifdef.jp/mail.html
─────────────────────────────────────
 Published by Gushwell.
  Copyright (C) 2011 Gushwell All rights reserved.
  Microsoft MVP for Visual C#(Apr 2005 - Mar 2012)

 ■Gushwell's Page
 Gushwell's C# Dev Notes           : http://gushwell.ldblog.jp/
 Gushwell's C# Programming Page    : http://gushwell.ifdef.jp/
 Gushwell's F# Programming Diary   : http://techbank.jp/gushwell/
 Gushwellの読書ノート              : http://gushwell.jugem.jp/
─────────────────────────────────────
