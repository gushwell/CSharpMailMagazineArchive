■━ [C#プログラミングレッスン] ━━━━━━━━━━━━━━━ No.286 ━□
  
 「.NET Framework4 編」-- IObserver / IObservable インターフェース
                                                             by Gushwell  
□━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━■


このたびの東日本大地震で被災された皆さまに、心よりお見舞い申し上げます。ま
た、お亡くなりになった方に心よりご冥福をお祈り申し上げます
被災された方々は、いまだ安心して眠れない日々が続いているかと思うと、胸が痛
みます。1日も早い復旧・復興を望んでいます。

私の住んでいる宇都宮もかなり揺れましたが、たいした被害もなく、無事このメル
マガを発行できることは、ありがたいことです。

それでは、中断していた「C#プログラミングレッスン」を再開したいと思います。
今回は、IObserver / IObservable インターフェースについて説明します。

■□───────────────────────────────────
■□ IObserver / IObservable インターフェース

この２つのインターフェースを使うことで、GoFのデザインパターンである オブ
ザーバーパターンを実装することでできます。

IObservable<T> インターフェイスは、通知を送信するクラス (プロバイダー) を
実装するのに利用します。
一方、IObserver<T> インターフェイスは、通知を受け取るクラス (オブザーバー)
を実装するのに利用します。
型パラメータ T は、通知情報を提供する型を表します。

以下に、IObserver /IObservable インターフェースを実装する簡単な例を示しま
す。
このプログラムは、テキストファイルを読み込み、指定した文字列が含まれてい
る行が見つかったら、その行番号と行を表示するものです。
ファイルを読み込み指定した文字列があるかを調べる部分と表示する部分を
ObservableとObserverに分離しています。
まずは、通知情報を表すクラスを定義します。

  public class LineInfo {
      public int LineNo { get; set; }
      public string Line { get; set; }
  }

次にこの通知情報を受け取るクラス LineDisplay を定義します。このクラスは、
IObserver<T>を実装します。

  public class LineDisplay : System.IObserver<LineInfo> {
      public void OnCompleted() {
          Console.WriteLine("-- Completed --");    
      }

      public void OnError(Exception error) {
          Console.WriteLine("{0]",error.Message);
      }

      public void OnNext(LineInfo info) {
          Console.WriteLine("{0,4}:{1}",info.LineNo, info.Line);
      }
  }

IObserver<T>の具象クラスが実装すべきメソッドは、OnNext, OnCompleted,
OnError の３つのメソッドです。
OnNextは、オブザーバーに新しいデータを提供するときに呼び出されるものです。
このプログラムでは、該当する行が見つかるたびに呼び出されます。
OnCompleted は、プロバイダーが通知の送信を完了したことをオブザーバーに通
知するものです。
OnErrorは、プロバイダーでエラー状態が発生したことを通知するメソッドです。

次に、MySearcher クラスです。これは、IObservable<T> を実装したクラスで、
通知を送信するクラスとなります。

  public class MySearcher : IObservable<LineInfo> {
      private List<IObserver<LineInfo>> observers = new List<IObserver<LineInfo>>();

      public IDisposable Subscribe(IObserver<LineInfo> observer) {
          observers.Add(observer);
          return observer as IDisposable;
      }

      public void Search(string filepath, string word) {
          int lineno = 1;
          var lines = System.IO.File.ReadLines(filepath);
          foreach (var line in lines) {
              if (line.IndexOf(word) >= 0) {
                  LineInfo msg = new LineInfo {
                      LineNo = lineno,
                      Line = line,
                  };
                  foreach (var observer in observers) {
                      observer.OnNext(msg);
                  }
              }
              lineno++;
          }
          foreach (var observer in observers) {
              observer.OnCompleted();
          }
      }
  }


MySearcherクラスは、テキストファイルを読み込み、指定された文字列を含む行
が見つかると、オブザーバーのOnNextメソッドを呼び出し、見つかったことを通
知します。すべての行の処理が終わると、 OnCompleted メソッドを呼び出します。

IObservable<T>の具象クラスが実装すべきメソッドは、Subscribeです。
Subscribe メソッドは、オブザーバー・オブジェクト(通知を受け取るオブジェク
ト)を受け取り、オブザーバーを登録します。
複数のオブザーバーを登録可能にするために、Listコレクションクラスでオブザ
ーバーを保持します。

これらを使う側のコードは以下のようになります。

  LineDisplay observer = new LineDisplay();
  MySearcher observable = new MySearcher();
  observable.Subscribe(observer);
  observable.Search("sample.txt", "Observer");    

Subscribe メソッドを複数回呼び出すことで、通知を受け取るオブザーバーを
複数登録することができます。
このプログラムの場合、オブザーバークラスを複数定義することで、コンソール
に表示すると当時に、ファイルに書き出したり、DBに登録したりすることが可能
になります。


─────────────────────────────────────
『C#プログラミングレッスン』  (ぼぼ週刊）                                 
 ☆皆さまからの感想をお待ちしています。http://gushwell.ifdef.jp/mail.html 
─────────────────────────────────────
 Published by Gushwell.                                                   
   Copyright (C) 2011 Gushwell All rights reserved.                       
   Microsoft MVP for Visual C#(Apr 2005 - Mar 2011)                       
                                                                          
 ■Gushwell's Page                                                        
 Gushwell's C# Dev Notes           : http://gushwell.ldblog.jp/           
 Gushwell's C# Programming Page    : http://gushwell.ifdef.jp/            
 Gushwell's F# Programming Diary   : http://techbank.jp/gushwell/         
 Gushwellの読書ノート              : http://gushwell.jugem.jp/            
─────────────────────────────────────

