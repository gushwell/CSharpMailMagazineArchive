■━ [C#プログラミングレッスン] ━━━━━━━━━━━━━━━ No.283 ━□
  
 「.NET Framework4 編」-- BigInteger構造体
                                                             by Gushwell  
□━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━■


■□───────────────────────────────────
■□ BigInteger構造体

BigIntegerは、int, longでは表すことのできない大きな整数を扱うことのできる
構造体です。BigIntegerは、任意の桁数を持つ符号付き整数を表し、変更不可の型
です。
Int32、Int64などの他の整数型と大きく違うところは、MinValue,MaxValueプロパ
ティを持たないことです。理論的には、上限、下限が存在しません。

BigIntegerの使い方を示す簡単なサンプルコードを示します。

  using System;
  using System.Numerics;

  namespace BigIntegerSample {
      class Program {
          static void Main(string[] args) {
              for (int i = 1; i <= 50; i++) {
                  var f = Factorial((BigInteger)i);
                  Console.WriteLine(f.ToString());
              }
              Console.ReadLine();
          }
 
          // 階乗を求める
          static BigInteger Factorial(BigInteger n) {
              if (n == 0)
                  return 1;
              return n * Factorial(n - 1);
          }
      }
  }

※BigInteger構造体は、System.Numericsアセンブリにありますので、System.
  Numericsを参照設定しておきます。

上記コードは、再帰を使い階乗計算をしています。n! が階乗を表すとすると、

  1!, 2!, 3!, 4!, ... ,29!, 30!

と1から30までの階乗を求め、コンソールに出力しています。
Factorialメソッドの引数は、int 型でも良いのですが、BigIntegerの使い方を示
す意味もあり、BigIntegerにしています。
見ていただければ分かるように、比較、四則演算は、他の整数型と同様に使えます
ので、利用はいたって簡単です。

ちなみに、30!は、

265252859812191058636308480000000

となります。

また、Parseメソッドも用意されていて、

  BigInteger num = BigInteger.Parse("123456789123456789123456789");

と文字列からの変換も行えます。

BigIntegerで興味深いのは、byte配列や、16進表記文字列との相互変換が行えるこ
とです。例えば、以下のように、BigIntegerは、byte配列に変換することができま
す。

  BigInteger num = 12345;    // int 型を代入できる。
  var ba = num.ToByteArray();
  foreach (var x in ba) {
      Console.Write("{0:X2} ", x);
  }

実行すると、

 39 30

と表示されます。12345を16進で表すと 0x3039 となります。
このbyte配列を BigIntegerのコンストラクタの引数に渡すと、変換前の数値に戻
すことができます。

  BigInteger num2 = new BigInteger(ba);
  Console.WriteLine(num2);

では、10進の 62009 を表す 0x39 0xF2 が格納された配列を BigIntegerにすると
どうなるでしょうか。

  byte[] ba2 = new byte[] { 0x39, 0xF2 };
  BigInteger num3 = new BigInteger(ba2);
  Console.WriteLine(num3);

このコードは、

  -3527

と表示されます。つまり、num3はマイナス値になっているということです。
これは配列の最後のバイトの最上位ビットを符号ビットとして解釈する仕様になっ
ているからです。これを正数として認識させるには、最後のバイトに 0 を付加す
る必要があります。

  byte[] ba2 = new byte[] { 0x39, 0xF2, 0x00 };

とすれば、意図通り 13834 が num に入ります。
なお、ToByteArrayメソッドは、正数ならば、0 が付加されますので、
以下のコードでは、意図通り、num2 には、62009 がセットされます。

  BigInteger num = 62009;
  var ba = num.ToByteArray();
  foreach (var x in ba) {
      Console.Write("{0:X2} ", x);
  }
  Console.WriteLine();
  BigInteger num2 = new BigInteger(ba);
  Console.WriteLine(num2);


─────────────────────────────────────
『C#プログラミングレッスン』  (ぼぼ週刊）                                 
 ☆皆さまからの感想をお待ちしています。http://gushwell.ifdef.jp/mail.html 
─────────────────────────────────────
 Published by Gushwell.                                                   
   Copyright (C) 2011 Gushwell All rights reserved.                       
   Microsoft MVP for Visual C#(Apr 2005 - Mar 2011)                       
                                                                          
 ■Gushwell's Page                                                        
 Gushwell's C# Dev Notes           : http://gushwell.ldblog.jp/           
 Gushwell's C# Programming Page    : http://gushwell.ifdef.jp/            
 Gushwell's F# Programming Diary   : http://techbank.jp/gushwell/         
 Gushwellの読書ノート              : http://gushwell.jugem.jp/            
                                                                          
 ■コミュニティtechbank.jp (http://techbank.jp/)                          
 Gushwellが参加している技術系コミュニティです。                           
 有志メンバーによるBlogでの技術情報発信も行っています。                   
─────────────────────────────────────

