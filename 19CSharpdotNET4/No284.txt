■━ [C#プログラミングレッスン] ━━━━━━━━━━━━━━━ No.284 ━□
  
 「.NET Framework4 編」-- Tupleクラス
                                                             by Gushwell  
□━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━■


■□───────────────────────────────────
■□ Tupleクラス


プログラムを組んでいると、２つの要素をまとめて取り扱いたい、３つの要素を
まとめて取り扱いたいという場合があります。そんなときに利用できるのが、
Tupleです。

Tupleは、ジェネリッククラスとして定義されていて、１つの要素を表す
Tuple<T1> から、８つの要素を表す Tuple<T1,T2,T3,T4,T5,T6,T7,T8> までの、
８つのTupleが用意されています。

 ※ なぜ要素が一つのTuple<T>定義されているのかが不思議です。
    どんな用途に使えるのかが分かりません。(^^;

ここでは、２つの要素を持つ Tupleのコードを示します。

  var tpl = Tuple.Create(123, DateTime.Today);
  Console.WriteLine(tpl.Item1);
  Console.WriteLine(tpl.Item2);

Tupleのインスタンスを生成するには、Tuple.Create静的メソッドを使うのが便利
です。
new 演算子を使った場合は

  var tpl = new Tuple<int, DateTime>(123, DateTime.Today);

と型を指定する必要があるので面倒です。一方、Createメソッドの場合は、型推論
が働くため、型指定が不要です。
Item1,Item2プロパティでTupleの要素にアクセスできます。

メソッドから複数の値を返したい時には
 ・outパラメータを利用する
 ・カスタムクラスを定義する
という方法が取られましたが、Tupleを使うことでより手軽に複数の値を返すこと
ができるようになります。


■□───────────────────────────────────
■□ Enumerable.Zip メソッド

Enumerable.Zip メソッドを使うと、2つの配列から、Tupleのシーケンスを作り出
すことができます。
例えば、

  char[] chars = new char[] { 'a', 'b', 'c', 'd', 'e', 'f', 'g' };
  int[] nums = new int[] { 1, 2, 3, 4, 5, 6, 7 };
  var tuples = Enumerable.Zip(chars, nums , (c,n) => Tuple.Create(c,n));

というコードは、('a',1) ('b',2) ('c',3) ('d',4) ('e',5) ... という組デー
タを作り出せます。
なお、Enumerable.Zip メソッドは拡張メソッドとして定義してありますので、上
記コードは、

  char[] chars = new char[] { 'a', 'b', 'c', 'd', 'e', 'f', 'g' };
  int[] nums = new int[] { 1, 2, 3, 4, 5, 6, 7 };
  var tuples = chars.Zip(nums , Tuple.Create);

と書くこともできます。


Tupleは、メソッド内、クラス内など、スコープが比較的狭いところでの利用が主
だと思われます。アプリケーション内の様々なクラスで利用する組データについて
は、別途クラスを作成するのが良いと考えます。


─────────────────────────────────────
『C#プログラミングレッスン』  (ぼぼ週刊）                                 
 ☆皆さまからの感想をお待ちしています。http://gushwell.ifdef.jp/mail.html 
─────────────────────────────────────
 Published by Gushwell.                                                   
   Copyright (C) 2011 Gushwell All rights reserved.                       
   Microsoft MVP for Visual C#(Apr 2005 - Mar 2011)                       
                                                                          
 ■Gushwell's Page                                                        
 Gushwell's C# Dev Notes           : http://gushwell.ldblog.jp/           
 Gushwell's C# Programming Page    : http://gushwell.ifdef.jp/            
 Gushwell's F# Programming Diary   : http://techbank.jp/gushwell/         
 Gushwellの読書ノート              : http://gushwell.jugem.jp/            
─────────────────────────────────────


