■━ [C#プログラミングレッスン] ━━━━━━━━━━━━━━━ No.281 ━□
  
 「.NET Framework4 編」-- 既存クラスの機能強化
                                                             by Gushwell  
□━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━■

購読者の皆様、こんにちは。「.NET Framework4編」の連載開始です。
まず第一回目は、既存クラスの機能強化について説明します。地味なものが多いで
すが、なかなか気のきいた機能強化だと思います。


■□───────────────────────────────────
■□ 既存クラスの機能強化

■Stream.CopyTo メソッド

StreamクラスにCopyToメソッドが追加され、ストリームを別のストリームに簡単
にコピーできるようになりました
カレントフォルダにあるsample.txtをoutput.txtにコピーする例です。

  using (FileStream destination = File.OpenWrite("output.txt"))
  using (FileStream source = File.OpenRead(@"sample.txt")) {
      source.CopyTo(destination);
  }

ファイルの内容をMemoryStreamにコピーしたり、その逆も可能です。


■Path.Combineメソッド

Path.Combineメソッドが追加されました。文字列の配列を 1 つのパスに結合します。

  string[] paths = { @"C:\Projects", "2010", "Wpf", "Sample" };
  string fullPath = Path.Combine(paths);
  Console.WriteLine(fullPath);

結果は、
 C:\Projects\2010\Wpf\Sample
と出力されます。


■String.Concat メソッド

String.Concat メソッドに、IEnumerable<T>を引数に取る新たなメソッドがオー
バーロードされました。
列挙可能なコレクションの各要素を事前に文字列に変換することなく連結できま
す。

  List<int> list = new List<int> { 1, 2, 3, 4, 5, 6, 7 };
  string s = string.Concat(list);
  Console.WriteLine(s);

結果は
 "1234567"
となります。


■String.Join メソッド

IEnumerable<T>を第2引数に取る String.Joinメソッドが追加されました。
このメソッドを使うことで、列挙可能なコレクションの各要素を連結できます。
各要素の間には、指定した区切り記号が挿入されます

  List<int> list = new List<int> { 1, 2, 3, 4, 5, 6, 7 };
  string s = string.Join(" - ",list);
  Console.WriteLine(s);

結果は
 "1 - 2 - 3 - 4 - 5 - 6 - 7"
となります。


■String.IsNullOrWhiteSpace メソッド

文字列が null か空であるか、または空白文字のみで構成されているかを示します。

  string s = "　　";
  if (string.IsNullOrWhiteSpace(s))
      Console.WriteLine("true");

全角空白文字も、空白文字と見なされます。


■Enum.HasFlag メソッド

列挙体のオブジェクトで、指定したビットフィールドが設定されているかどうか
を判断するEnum.HasFlag メソッドが追加されました。

  [Flags]
  public enum FontStyle {
      Regular = 0,
      Bold = 1,
      Italic = 2,
      Underline = 4,
      Strikeout = 8,
  }

というenumに対し、以前は、

  FontStyle fontStyle = FontStyle.Bold | FontStyle.Italic | FontStyle.Underline;
  if ((fontStyle & (FontStyle.Bold | FontStyle.Underline)) == 
                   (FontStyle.Bold | FontStyle.Underline))
      Console.WriteLine("Bold | Underline    

と書かなくてはいけませんでしたが、HasFlaagを使えば、

   FontStyle fontStyle = FontStyle.Bold | FontStyle.Italic | FontStyle.Underline;
   if (fontStyle.HasFlag(FontStyle.Bold | FontStyle.Underline))
       Console.WriteLine("Bold | Underline    

と簡潔に書くことができます。


■Environment.Is64BitOperatingSystem プロパティ
■Environment.Is64BitProcess プロパティ

64 ビットのオペレーティング システムとプロセスを識別できます。

  Console.WriteLine(Environment.Is64BitOperatingSystem);
  Console.WriteLine(Environment.Is64BitProcess);

２つのプロパティともbool型となっています。


─────────────────────────────────────
『C#プログラミングレッスン』  (ぼぼ週刊）                                 
 ☆皆さまからの感想をお待ちしています。http://gushwell.ifdef.jp/mail.html 
─────────────────────────────────────
 Published by Gushwell.                                                   
   Copyright (C) 2011 Gushwell All rights reserved.                       
   Microsoft MVP for Visual C#(Apr 2005 - Mar 2011)                       
                                                                          
 ■Gushwell's Page                                                        
 Gushwell's C# Dev Notes           : http://gushwell.ldblog.jp/           
 Gushwell's C# Programming Page    : http://gushwell.ifdef.jp/            
 Gushwell's F# Programming Diary   : http://techbank.jp/gushwell/         
 Gushwellの読書ノート              : http://gushwell.jugem.jp/            
                                                                          
 ■コミュニティtechbank.jp (http://techbank.jp/)                          
 Gushwellが参加している技術系コミュニティです。                           
 有志メンバーによるBlogでの技術情報発信も行っています。                   
─────────────────────────────────────
