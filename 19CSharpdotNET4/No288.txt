■━ [C#プログラミングレッスン] ━━━━━━━━━━━━━━━ No.288 ━□
  
 「.NET Framework4 編」-- Lazy<T>クラス
                                                             by Gushwell  
□━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━■

購読者の皆さんこんにちは。
今度、僕の書いたC#の本が出版される予定です。C#の言語機能に的を絞った本で、
C#の持つ主要機能を一通り解説しています。
対象者は、初級者から中級者を想定しています。プログラミングが初めてのビギナ
ー向けの本ではありませんので、変数や代入、四則演算、分岐といったプログラミ
ングの基礎の部分は大胆にカットし、ページ数を抑え、短期間でC#を学習できる本
を目指しました。
当メールマガジンの記事をベースとしていますが、かなり多くの修正と加筆を加え
ています。新たに加えた内容もありますし、サンプルコードの多くもゼロから書き
なおしています。そのため、このメールマガジンを読んでいる皆さんにも、C#を再
学習するのに役に立つ内容となっていると思います。
発売時期がいつのなるかは、まだ未定なのですが、近いうちに発売される予定です。
発売されましたら、再度ご案内します。

■□───────────────────────────────────
■□ System.Lazy<T>クラス


遅延初期化の機能を提供します。

Gofのデザインパターンでは、Proxyパターンで実現していたオブジェクトの遅延
初期化は、このLazy<T>クラスを使うと、簡単に実現できます。

例えば、以下のようなクラスがあったとします。

  class MyClass {
      public MyClass() {
          Console.WriteLine("MyClass Created");    
      }
  }

この MyClassに対する、遅延初期化の例を以下に示します。

  Console.WriteLine("Start");
  var lazyMyClass = new Lazy<MyClass>();
  Console.WriteLine("new Lazy<MyClass>");    
  Console.WriteLine("IsValueCreated = {0}",lazyMyClass.IsValueCreated);
  MyClass obj = lazyMyClass.Value;
  Console.WriteLine("IsValueCreated = {0}",lazyMyClass.IsValueCreated);

結果は、

Start
new Lazy<MyClass>
IsValueCreated = False
MyClass Created
IsValueCreated = True

となり、Valueプロパティにアクセスしたときに、MyClassのコンストラクタが呼
ばれ、インスタンスが生成されるのがわかります。

なお、Lazyクラスのコンストラクタはいくつかのオーバーロードメソッドがあり、

  var lazyMyClass = new Lazy<MyClass>(
      () => {
          Console.WriteLine("初期化開始");    
          MyClass obj = new MyClass();
          Console.WriteLine("初期化終了");    
          return obj;
      }
  );

のように、初期化時のコードを指定することができます。たとえば、ここで、フ
ァイルから取得したデータを使い、MyClass オブジェクトに値を設定するなどの
コードを書く、といったことが考えられます。



---
書籍執筆に時間を取られ、今回は短い記事となってしまいました。m(_ _)m

─────────────────────────────────────
『C#プログラミングレッスン』  (ぼぼ週刊）                                 
 ☆皆さまからの感想をお待ちしています。http://gushwell.ifdef.jp/mail.html 
─────────────────────────────────────
 Published by Gushwell.                                                   
   Copyright (C) 2011 Gushwell All rights reserved.                       
   Microsoft MVP for Visual C#(Apr 2005 - Mar 2012)                       
                                                                          
 ■Gushwell's Page                                                        
 Gushwell's C# Dev Notes           : http://gushwell.ldblog.jp/           
 Gushwell's C# Programming Page    : http://gushwell.ifdef.jp/            
 Gushwell's F# Programming Diary   : http://techbank.jp/gushwell/         
 Gushwellの読書ノート              : http://gushwell.jugem.jp/            
─────────────────────────────────────

