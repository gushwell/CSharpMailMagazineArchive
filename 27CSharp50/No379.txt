■━ [C#プログラミングレッスン] ━━━━━━━━━━━━━━━ No.379 ━□

「C#5.0編」-- .NET Framework (ZipArchive)
                                                           by Gushwell
□━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━■

前回予告のとおり、「C#5.0編」の最後として、ZIPアーカイブファイルの扱うこ
とのできるZipArchive クラスについてみていきます。

■□───────────────────────────────────
■□ アーカイブに格納されているファイル一覧を得る

ZipArchive クラスを使うには、System.IO.Compression アセンブリを参照設定し
ます。

 private static void GetEntries2(string filename) {
     using (var fs = new FileStream(filename, FileMode.Open))
     using (var zip = new ZipArchive(fs, ZipArchiveMode.Read)) {
         var entries = zip.Entries;
         foreach (var entry in entries) {
             Console.WriteLine(entry.FullName);
         }
     }
 }

entries 変数の型は、
  System.Collections.ObjectModel.ReadOnlyCollection<ZipArchiveEntry>
です。
以降、アーカイブに格納されているファイルをエントリと言うこととします。

ZipFileクラスを使うと、さらに簡単に書けます。
なお、ZipFileクラスを使うには、System.IO.Compression アセンブリに加え
System.IO.Compression.FileSystem アセンブリを参照設定する必要があります。

 private static void GetEntries(string filename) {
     using (var zip = ZipFile.OpenRead(filename)) {
         var entries = zip.Entries;
         foreach (var entry in entries) {
             Console.WriteLine(entry.FullName);
         }
     }
 }


■□───────────────────────────────────
■□ アーカイブに格納されているエントリを読みとる

ZipArchiveEntryのOpenメソッドを使うことで、アーカイブに格納されているエン
トリの内容をディスクに抽出することなしに、読み取ることができます。

 private static void PeekEntry(string filename) {
     using (var zip = ZipFile.OpenRead(filename)) {
         ZipArchiveEntry entry = zip.Entries.First();
         var reader = new StreamReader(entry.Open());
         var s = reader.ReadToEnd();
         Console.WriteLine(s);
     }
 }


■□───────────────────────────────────
■□ アーカイブに格納されているエントリをディスクに書き出す

ZipArchiveEntryの拡張メソッド、ExtractToFileを使うと、アーカイブのエント
リをディスクに抽出することができます。

 private static void ExtraceFiles(string filename) {
     using (var zip = ZipFile.OpenRead(filename)) {
         var seq = zip.Entries;
         foreach (var entry in seq) {
             entry.ExtractToFile(entry.FullName);
         }
     }
 }

ZipArchiveの拡張メソッド、ExtractToDirectoryを使えば、すべてのエントリを
ファイルに一回のメソッド呼び出しで抽出することができます。

 // アーカイブの中のファイルを展開します。
 private static void ExtraceAll(string filename) {
     using (var zip = ZipFile.OpenRead(filename)) {
         zip.ExtractToDirectory("temp");
     }
 }

■□───────────────────────────────────
■□ アーカイブを新規作成する。

アーカイブを新規作成するサンプルです。
ここでは、既存ファイルを追加する方法と、エントリの内容を手動で設定し追加
する方法を示しています。

 private static void CreateArchive(string filename) {
     using (var fs = new FileStream(filename, FileMode.Create))
     using (var zip = new ZipArchive(fs, ZipArchiveMode.Create)) {
         // 既存のファイルをアーカイブに追加する
         string filePath = "program.cs";
         zip.CreateEntryFromFile(filePath, Path.GetFileName(filePath));

         // エントリの内容を手動で設定する。
         var entry = zip.CreateEntry("sample.txt");
         using (var writer = new StreamWriter(entry.Open())) {
             writer.WriteLine("おはようございます。");
             writer.WriteLine("おやすみなさい");
         }
     }
 }


■□───────────────────────────────────
■□ アーカイブにエントリを追加する。

最後は、既存アーカイブに、ファイルを追加する例です。

 private static void UpdateArchive(string filename) {
     using (var zip = ZipFile.Open(filename,ZipArchiveMode.Update)) {
         // 既存のファイルをアーカイブに追加する
         string filePath = "sample2.txt";
         zip.CreateEntryFromFile(filePath, Path.GetFileName(filePath));
     }
 }


--------------------------------------------------------------------------
今回で、「C#5.0編」は終了です。
次は、２，３週間お休みをいただいた後に、データ構造とアルゴリズムについて書こ
うと思っています。
では、またその時にお会いしましょう。

─────────────────────────────────────
『C#プログラミングレッスン』  (ほぼ週刊）
☆皆さまからの感想をお待ちしています。http://gushwell.ifdef.jp/mail.html
─────────────────────────────────────
Published by Gushwell.
Copyright (C) 2013 Gushwell All rights reserved.
Microsoft MVP for Visual C#(Apr 2005 - Mar 2014)

■Gushwell's Page
facebook Page                     : http://www.facebook.com/CSharpLesson
Gushwell's C# Dev Notes           : http://gushwell.ldblog.jp/
Gushwell's C# Programming Page    : http://gushwell.ifdef.jp/
気ままな読書ノート                : http://gwbooks.hatenablog.com/
Twitterアカウント                 : @gushwell
─────────────────────────────────────
