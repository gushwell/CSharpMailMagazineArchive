■━ [C#プログラミングレッスン] ━━━━━━━━━━━━━━━ No.372 ━□

「C#5.0編」-- async, awaitによる非同期処理(2)
                                                           by Gushwell
□━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━■

おはようございます。
8月も終わろうとしていますが、まだまだ暑い日が続きそうです。
Gushwellはちょっと夏バテ気味なので、早く寝るように心がけています。
皆さんは、体調など崩さないように気を付けてくださいね。

今週は、先週に引き続き、async, awaitによる非同期処理についてみていきます。

■□───────────────────────────────────
■□ 戻り値のあるメソッドを非同期で呼び出す

前回示したDoSomethingメソッドは、void 型でしたが、stringを返すメソッドだと
したらどうでしょうか。
例えば、以下のようなメソッドだとします。

  private string DoSomething() {
      string s = DateTime.Now.ToLongTimeString();
      Thread.Sleep(2000);
      return s + "～ " + DateTime.Now.ToLongTimeString();
  }


この場合、button1_Clickは次のようになります。

  private async void button1_Click(object sender, EventArgs e) {
      var task = Task.Factory.StartNew<string>(DoSomething);
      var s = await task;
      label1.Text = "Finish " + s;
  }

task変数は、Task<string> 型です。型パラメータのstringが戻り値の型です。
変数 s に、DoSomethingの戻り値が格納されます。

ちょっと冗長ですが、以下のように書くこともできます。

  private async void button1_Click(object sender, EventArgs e) {
      var task = new Task<string>(DoSomething);
      task.Start();
      var s = await task;
      label1.Text = "Finish " + s;
  }

しかし、どちらの方法も <string>と型を明示しないといけないのが面倒ですね。
以下のようにラムダ式を使えば、ジェネリックの型パラメータが不要になります。

  var task = Task.Factory.StartNew(() => {
      return DoSomething();
  });

DoSomethingが短いコードならば、DoSometingの中のコードをインライン展開して
直接ラムダ式に書いてしまっても良いと思います。


■□───────────────────────────────────
■□ 非同期メソッドに引数を渡す

上記のようにラムダ式を使えば、DoSomethingが次のような引数を受け取るメソッ
ドであっても特に迷うことはありませんね。

  private string DoSomething(int second) {
      DateTime dt = DateTime.Now.AddSeconds(second);
      Thread.Sleep(4000);
      return dt.ToLongTimeString();
  }

このDoSomethingメソッドを非同期で呼び出したい場合には、次のように記述しま
す。

  private async void button1_Click(object sender, EventArgs e) {
      var task = Task.Factory.StartNew(() => {
          return DoSomething(10);
      });
      string s = await task;
      label1.Text = "Finish " + s;

  }


─────────────────────────────────────
『C#プログラミングレッスン』  (ほぼ週刊）
☆皆さまからの感想をお待ちしています。http://gushwell.ifdef.jp/mail.html
─────────────────────────────────────
Published by Gushwell.
Copyright (C) 2013 Gushwell All rights reserved.
Microsoft MVP for Visual C#(Apr 2005 - Mar 2014)

■Gushwell's Page
facebook Page                     : http://www.facebook.com/CSharpLesson
Gushwell's C# Dev Notes           : http://gushwell.ldblog.jp/
Gushwell's C# Programming Page    : http://gushwell.ifdef.jp/
気ままな読書ノート                : http://gwbooks.hatenablog.com/
Twitterアカウント                 : @gushwell
─────────────────────────────────────
