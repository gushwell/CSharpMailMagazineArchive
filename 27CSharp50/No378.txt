■━ [C#プログラミングレッスン] ━━━━━━━━━━━━━━━ No.378 ━□

「C#5.0編」-- .NET Framework (IReadOnlyCollection<T>)
                                                           by Gushwell
□━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━■

おはようございます。朝夕とても冷え込むようになってきて、ちょっと風邪気味
のGushwellです。みなさん体調を崩さなくよう気を付けてくださいね。

さて、この連載の締めとして、C#5.0の機能ではありませんが、
.NET Framework4.5に新たに追加されたIReadOnlyCollection<T> と Zipアーカイ
ブファイルのサポートについて2回に分けて解説したいと思います。

今回は、IReadOnlyCollection<T> について説明します。


■□───────────────────────────────────
■□ 従前の読み取り専用コレクション

次のような２つの継承関係のあるクラスについて考えて見ましょう。

 class Product { /*...*/ }

 class Material : Product { /*...*/ }

これらのコレクションを読み取り専用で扱いたい場合は、以前から.NET Frameworkに
あるReadOnlyCollection<T> というラッパーコレクションクラスを利用すれば、それ
を実現することができます。
例えば、

 void DoSometing(ReadOnlyCollection<Product> products) {
     /*...*/ 
 }

として、DoSomethingが、コレクションを変更しないことを明示したい場合、呼び
出し側で、ReadOnlyCollectionのコンストラクタを呼び出し元のリストを指定し
てあげるなどする必要があります。

  List<Material> materials = GetMaterials();
  DoSometing(new ReadOnlyCollection(materials));

しかし、ちょっと使いにくい。
やっぱり、

  List<Material> materials = GetMaterials();
  DoSometing(materials);

と書きたい。そのため、僕は、

 void DoSometing(IEnumerable<Product> products) {
     /*...*/ 
 }

と定義することが多かったです。

でも、DoSometingの中で、このコレクションの要素数を得たい場合、本来の
Count プロパティではなくて、Count() メソッドを使わなくてはいけない。そう
なるとパフォーマンスが気になってきます。

そのため、

 public static IList<T> Materialize<TSource>(IEnumerable<T> source) {
     var list = source as IList<TSource>;
     if (list != null) 
         return list;
     else
         return source.ToList();
 }

といったメソッドを用意して、DoSomethingの中で、呼び出すなんてことをやった
こともあります。


■□───────────────────────────────────
■□ IReadOnlyCollection<T>

.NET Framework4.5で、新設された IReadOnlyCollection<T> を使えば、ほとんど
のケースでそんな手間が不要となります。

DoSomethingメソッドは、.NET Framework4.5では、以下のように定義意できます。

 void DoSometing(IReadOnlyCollection<Product> products) {
     /* products.Countプロパティが使える */ 
 }

なお、IReadOnlyCollection<T>は、IEnumerable<T>, IEnumerable を継承してい
ますので、LINQのメソッドをこれまでどおり利用できます。

また、IReadOnlyList<T>、IReadOnlyDictionary<TKey, TValue> といったインタ
ーフェースも追加されていますので、どんなインターフェースなのかをMSDNを見
て調べてみてください。

これらのインターフェースは、非同期プログラミングやマルチスレッドプログラ
ミングをする際に、コードの安全性を高める上でとても重要になるインターフェ
ースだと思われます。

─────────────────────────────────────
『C#プログラミングレッスン』  (ほぼ週刊）
☆皆さまからの感想をお待ちしています。http://gushwell.ifdef.jp/mail.html
─────────────────────────────────────
Published by Gushwell.
Copyright (C) 2013 Gushwell All rights reserved.
Microsoft MVP for Visual C#(Apr 2005 - Mar 2014)

■Gushwell's Page
facebook Page                     : http://www.facebook.com/CSharpLesson
Gushwell's C# Dev Notes           : http://gushwell.ldblog.jp/
Gushwell's C# Programming Page    : http://gushwell.ifdef.jp/
気ままな読書ノート                : http://gwbooks.hatenablog.com/
Twitterアカウント                 : @gushwell
─────────────────────────────────────
