■━ [C#プログラミングレッスン] ━━━━━━━━━━━━━━━ No.376 ━□

「C#5.0編」-- 互換性に影響する変更点
                                                           by Gushwell
□━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━■

C#4.0でプログラマーの意図通りに動作しないいくつかの問題がありました。
C#5.0ではその問題解消のために、互換性に影響する変更点があります。
ここでは、３つの変更点について説明しようと思います。


■□───────────────────────────────────
■□ ラムダ式でのforeach反復変数の利用

まず、以下のコードを見て、結果を想像してみてください。

  var methods = new List<Action>();
  foreach (var word in new string[] { "hello", "world" }) {
      methods.Add(() => Console.Write(word + " "));
  }
  methods[0]();
  methods[1]();

C#4.0では、

 world world

と出力されます。つまり、ラムダ式がmethodsリストに追加されたときの
wordの値ではなく、反復変数の最後の値が利用されていました。
C#5.0では、プログラマが本来意図したとおり

 hello world

と表示されます。


■□───────────────────────────────────
■□ LINQ式でのforeach反復変数の利用

ラムダ式でのforeach反復変数の利用と同様の問題が、LINQにおいても
当てはまります。

  var lines = new List<IEnumerable<string>>();
  int[] numbers = { 1, 2, 3 };
  char[] letters = { 'a', 'b', 'c' };

  foreach (var number in numbers) {
      var line = from letter in letters
                 select number.ToString() + letter;
      lines.Add(line);
  }
  foreach (var line in lines) {
      foreach (var entry in line)
          Console.Write(entry + " ");
      Console.WriteLine();
  }

C#4.0での出力結果は、 

 3a 3b 3c
 3a 3b 3c
 3a 3b 3c

ですが、C#5.0では、

 1a 1b 1c
 2a 2b 2c
 3a 3b 3c

と表示されます。


■□───────────────────────────────────
■□ 名前つき引数の副作用の評価順序

以下のコードを見てください。

  static void Main(string[] args) {
      TestMethod(WriteLetter("A"), WriteLetter("B"), WriteLetter("C"));
      TestMethod(WriteLetter("A"), b: WriteLetter("B"), c: WriteLetter("C"));
      TestMethod(WriteLetter("A"), c: WriteLetter("C"), b: WriteLetter("B"));
      Console.ReadLine();
  }

  static int WriteLetter(string letter) {
      Console.Write(letter + " ");
      return 1;
  }

  static void TestMethod(int a, int b, int c) {
      Console.WriteLine();
  }

これをC#4.0で実行すると、

 A B C
 B C A
 C B A

となります。名前つきの引数が優先的に左から順に評価されていました。

C#5.0では、以下の結果となります。

 A B C 
 A B C 
 A C B 

まあ、このような副作用が伴うコードは普段は記述しないと思うので、動作が変
更になっても、実質的な影響はないと思われます。


※このサンプルコードは、MSDN「Visual Studio 2012 での Visual C# の互換性
  に影響する変更点」から引用させていただきました。

─────────────────────────────────────
『C#プログラミングレッスン』  (ほぼ週刊）
☆皆さまからの感想をお待ちしています。http://gushwell.ifdef.jp/mail.html
─────────────────────────────────────
Published by Gushwell.
Copyright (C) 2013 Gushwell All rights reserved.
Microsoft MVP for Visual C#(Apr 2005 - Mar 2014)

■Gushwell's Page
facebook Page                     : http://www.facebook.com/CSharpLesson
Gushwell's C# Dev Notes           : http://gushwell.ldblog.jp/
Gushwell's C# Programming Page    : http://gushwell.ifdef.jp/
気ままな読書ノート                : http://gwbooks.hatenablog.com/
Twitterアカウント                 : @gushwell
─────────────────────────────────────
