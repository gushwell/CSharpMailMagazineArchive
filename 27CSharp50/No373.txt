■━ [C#プログラミングレッスン] ━━━━━━━━━━━━━━━ No.373 ━□

「C#5.0編」-- async, awaitによる非同期処理(3)
                                                           by Gushwell
□━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━■

おはようございます。今週は、複数のタスクを並列処理する例とWhenALLメソッド
について学びます。

■□───────────────────────────────────
■□ 複数のタスクの終了を待つ

複数のタスクを並列処理し、すべてが終わるまで待ちたいとしましょう。
この場合も、async awaitを使えばとても簡単に記述できます。

以下の２つのメソッドを並列処理させたいと思います。

   private string DoSomething1() {
       string s = DateTime.Now.ToLongTimeString();
       Thread.Sleep(2000);
       return s + "～" + DateTime.Now.ToLongTimeString();
   }

   private string DoSomething2() {
       string s = DateTime.Now.ToLongTimeString();
       Thread.Sleep(5000);
       return s + "～" + DateTime.Now.ToLongTimeString();
   }

やっていることはほとんど同じです。Sleepの時間が異なるだけです。

呼び出し側のコードは次のようになります。

  private async void button1_Click(object sender, EventArgs e) {
      var task1 = Task.Factory.StartNew<string>(DoSomething1);
      var task2 = Task.Factory.StartNew<string>(DoSomething2);
      string s1 = await task1;
      string s2 = await task2;
      label1.Text = String.Format("Finish {0}, {1}", s1, s2);
  }

単に、awaitを続けて書くだけです。いやー実に簡単ですね。
実行させてみましょう。

Labelには、以下のような文字列が表示されます。

 Fisish 21:23:49～21:23:51, 21:23:49～21:23:54

この表示からも２つのタスクが同時に始まり、並列処理されていることが
わかると思います。

並列処理するタスクの数が少なかったり、数が固定されている場合は上記の
方法で問題は無いですが、数が多い場合は、awaitを沢山記述するのは面倒です。
まちがいも起こりやすくなります。実際に、この記事のサンプルコードを書いて
いるときも

  string s1 = await task1;
  string s2 = await task2;

と書くべきところを

  string s1 = await task1;
  string s2 = await task1;   // task2 が正しい

と書いて「あれ？」となりました。
なので、以下のように書く方法もあります。

  private async void button2_Click(object sender, EventArgs e) {
      Task<string>[] tasks = new[] {
          Task.Factory.StartNew<string>(DoSomething1),
          Task.Factory.StartNew<string>(DoSomething2)
      };
      foreach (var t in tasks)
          await t;
      string s = "Finish\n";
      foreach (var t in tasks)
          s += t.Result + "\n";
      label1.Text = s;
  }

各Taskの文字列は、Task<TResult>.Resultプロパティで得ることができます。


■□───────────────────────────────────
■□ WhenALLメソッド

でも、foreachで回すのも、なんだかあまりスマートじゃない。
TaskクラスのWhenAllを使えばもっと簡単に書けます。

  private async void button2_Click(object sender, EventArgs e) {
      Task<string>[] tasks = new[] {
          Task.Factory.StartNew<string>(DoSomething1),
          Task.Factory.StartNew<string>(DoSomething2)
      };
      await Task.WhenAll(tasks);
      string s = "Finish\n";
      foreach (var t in tasks)
          s += t.Result + "\n";
      label1.Text = s;
  }

どうでも良いことですが、LINQを使えば、最後の４行は以下のようにも書けます。

  label1.Text = tasks.Aggregate("Finish\n", (s, t) => s + t.Result + "\n");

さらに、こんな風に書いてしまっても良いかもしれませんね。

  private async void button2_Click(object sender, EventArgs e) {
      var results = await Task.WhenAll(
          Task.Factory.StartNew<string>(DoSomething1),
          Task.Factory.StartNew<string>(DoSomething2)
      );
      label1.Text = results.Aggregate("Finish\n", (s, r) => s + r + "\n");
  }


─────────────────────────────────────
『C#プログラミングレッスン』  (ほぼ週刊）
☆皆さまからの感想をお待ちしています。http://gushwell.ifdef.jp/mail.html
─────────────────────────────────────
Published by Gushwell.
Copyright (C) 2013 Gushwell All rights reserved.
Microsoft MVP for Visual C#(Apr 2005 - Mar 2014)

■Gushwell's Page
facebook Page                     : http://www.facebook.com/CSharpLesson
Gushwell's C# Dev Notes           : http://gushwell.ldblog.jp/
Gushwell's C# Programming Page    : http://gushwell.ifdef.jp/
気ままな読書ノート                : http://gwbooks.hatenablog.com/
Twitterアカウント                 : @gushwell
─────────────────────────────────────
