┏━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━┳━┳━┓
┃☆┃ C#プログラミングレッスン                         ┃＿┃□┃×┃
┣━┻━━━━━━━━━━━━━━━━━━━━━━━━━┻━┻━┻━┫
┃ System.Threading.Timer(2)                                  No.147┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

■──────────────────────────────────
■ タイマー処理の問題点

さて、実は、先週示したサンプルには大きな問題があります。
その例をまずは示しましょう。

using System;
using System.Threading;

class Program {
    static void Main(string[] args) {
        SampleWorker sw = new SampleWorker();
        Console.WriteLine("Start");
        sw.Run();
        Console.ReadLine();
        sw.Stop();
        Console.WriteLine("Stop");
        Console.ReadLine();
    }
}

class SampleWorker {
    private System.Threading.Timer tm;
    private int Count;

    public void Run() {
        tm = new Timer(TimerCallbackMethod, null, 0, 1000);
    }

    public void Pause() {
        tm.Change(Timeout.Infinite, Timeout.Infinite);
    }

    public void Restart() {
        tm.Change(0, 1000);
    }

    public void Stop() {
        tm.Dispose();
        tm = null;
    }

    private void TimerCallbackMethod(object state) {
        Count++;
        Console.WriteLine(string.Format("{0} {1}回目, ThreadId={2}", 
                          DateTime.Now, Count, 
                          Thread.CurrentThread.ManagedThreadId));
        System.Threading.Thread.Sleep(2000);
        Console.WriteLine("MethodOut - " + Count.ToString());
    }
}

1秒間隔で、TimerCallbackMethod() を呼び出すようにしていますが、このメ
ソッドは、処理時間が2秒以上かかります。つまり、TimerCallbackMethod が
終わらないうちに、もう一度、TimerCallbackMethod が呼ばれるということで
す。

実行してみると

Start
2007/11/04 21:13:47 1回目, ThreadId=4
2007/11/04 21:13:48 2回目, ThreadId=5
MethodOut - 2
2007/11/04 21:13:49 3回目, ThreadId=4
MethodOut - 3
2007/11/04 21:13:50 4回目, ThreadId=5

Stop
MethodOut - 4
MethodOut - 4

と表示されます。ThreadIdが4のスレッドが動いている間に、ThreadIdが5のス
レッドが起動しているのがわかります。
スレッドが同時に動くこと自体は良いのですが、問題は、Countの値です。
MethodOutの後ろに続く数値は、1,2,3,4と順に上がってほしいのに、2,3,4,4 
となっています。これは、２つのスレッドが、同じ Countフィールドを参照し
ているからですね。

■──────────────────────────────────
■ とりあえずの回避策

これを回避する簡単な方法は、ローカル変数にCountの値をいったん保存し、
その値を、MethodOut の出力時に利用するというものです。

private void TimerCallbackMethod(object state) {
    int tempcnt = ++Count;
    Console.WriteLine(string.Format("{0} {1}回目, ThreadId={2}", 
          DateTime.Now, tempcnt, 
          Thread.CurrentThread.ManagedThreadId));
    System.Threading.Thread.Sleep(2000);
    Console.WriteLine("MethodOut - " + tempcnt.ToString());
}

このようなメソッドを再入可能なメソッドと言います。
マルチスレッドプログラミングをする際で、同一メソッドが同時に動く可能性
がある場合には、再入可能なメソッドにする必要があります。
再入可能にする最も簡単な方法は、内部で利用するデータをローカル変数と引
数だけにするというものです。

さて、見かけ上は、これでうまく動くようになりましたが、これで完全という
わけではありません。それについてはまた次回に。

┌─┬─────────────────────────┬─┬─┬─┐
│☆│ C#プログラミングレッスン  (ぼぼ週刊）            │＿│□│×│
├─┴─────────────────────────┴─┴─┴─┤
│ Published by Gushwell.                                           │
│ Copyright (C) 2004-2007 Gushwell All rights reserved.            │
│ Microsoft MVP Visual Developer - Visual C#(Apr 2005 - Mar 2008)  │
│-------------------- Gushwell's Page ---------------------------- │
│ 窓際プログラマーの独り言  ：http://blog.livedoor.jp/gushwell/    │
│ 窓際プログラマーの読書三昧：http://gushwell.jugem.jp/            │
│ Gushwell's C# Programing Page：http://gushwell.ifdef.jp/         │
│ C#デザインパターン :                                             │
│  『増補改訂版Java言語で学ぶデザインパターン入門 / 結城 浩(著)』  │
│   のサンプルコードをC#に移植したものを掲載しています。           │
│   移植後のコードの公開は、結城氏の了解を得ています。             │
│   http://blog.livedoor.jp/gushwell/archives/50333227.html        │
└─────────────────────────────────┘
