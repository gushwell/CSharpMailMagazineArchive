┏━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━┳━┳━┓
┃☆┃ C#プログラミングレッスン                         ┃＿┃□┃×┃
┣━┻━━━━━━━━━━━━━━━━━━━━━━━━━┻━┻━┻━┫
┃ lockを使った同期処理                                       No.148┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

■──────────────────────────────────
■ フィールを参照する場合の問題点

再度、以下のコードを検討してみましょう。

 private int Count;

 private void TimerCallbackMethod(object state) {
    int tempcnt = ++Count;
    Console.WriteLine(string.Format("{0} {1}回目, ThreadId={2}", 
          DateTime.Now, Count, Thread.CurrentThread.ManagedThreadId));
    System.Threading.Thread.Sleep(2000);
    Console.WriteLine("MethodOut - " + tempcnt.ToString());
 }

問題となる箇所は、

    int tempcnt = ++Count;

の行です。このメソッドは、同時に複数動く可能性があるわけですから、

スレッドA　++Count を実行
スレッドB  ++Count を実行
スレッドA  tempcntに代入
スレッドB  tempcntに代入

という順に動作する可能性があります。
つまり、スレッドAの tempcntには、期待する値とは別の値が格納される可能
性があるわけです。
これを回避しなくてはなりません。
..NET では、いくつかのやり方がありますが、ここでは、lockステートメント
による同期方法を説明します。


■──────────────────────────────────
■ lockを使った同期処理

lockを使った同期コードは以下のようになります。

 private static Object thisLock = new Object();

 private void TimerCallbackMethod(object state) {
    int tempcnt;
    lock (thisLock) {
        tempcnt = ++Count;
    }
    Console.WriteLine(string.Format("{0} {1}回目, ThreadId={2}", 
　　　　DateTime.Now,
        tempcnt, Thread.CurrentThread.ManagedThreadId));
    System.Threading.Thread.Sleep(405);
    Console.WriteLine("MethodOut - " + tempcnt.ToString());
 }

lockステートメントを使い、static なオブジェクト thisLock をロックしま
す。
この状態で、別スレッドが動くと、thisLockオブジェクトのロックが解除され
るまで、処理待ち状態になります。これにより、lockステートメントのブロッ
ク内は、同時に動くことがなくなり、安全に動作するようになります。

なお、
 lock(this) {
     ...
 }

というコードを見かけますが、これはお勧めしません。
詳細は割愛しますが、場合によっては、デッドロックの原因になったり、まっ
たくロックされなかったりします。


┌─┬─────────────────────────┬─┬─┬─┐
│☆│ C#プログラミングレッスン  (ぼぼ週刊）            │＿│□│×│
├─┴─────────────────────────┴─┴─┴─┤
│ Published by Gushwell.                                           │
│ Copyright (C) 2004-2007 Gushwell All rights reserved.            │
│ Microsoft MVP Visual Developer - Visual C#(Apr 2005 - Mar 2008)  │
│-------------------- Gushwell's Page ---------------------------- │
│ 窓際プログラマーの独り言  ：http://blog.livedoor.jp/gushwell/    │
│ 窓際プログラマーの読書三昧：http://gushwell.jugem.jp/            │
│ Gushwell's C# Programing Page：http://gushwell.ifdef.jp/         │
│ C#デザインパターン :                                             │
│  『増補改訂版Java言語で学ぶデザインパターン入門 / 結城 浩(著)』  │
│   のサンプルコードをC#に移植したものを掲載しています。           │
│   移植後のコードの公開は、結城氏の了解を得ています。             │
│   http://blog.livedoor.jp/gushwell/archives/50333227.html        │
└─────────────────────────────────┘