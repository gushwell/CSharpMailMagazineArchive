┏━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━┳━┳━┓
┃☆┃ C#プログラミングレッスン                         ┃＿┃□┃×┃
┣━┻━━━━━━━━━━━━━━━━━━━━━━━━━┻━┻━┻━┫
┃ System.Threading.Thread(2)                                 No.152┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

■──────────────────────────────────
■ デッドロックの回避

No148で、lockステートメントについて説明しましたが、スレッドの排他処理
を行う際は、デッドロックに注意しなければなりません。

以下のプログラムは、ほぼ確実にデッドロックを起こします。

using System; 
using System.Threading;

public class SampleProgram {

    public static void Main() {
        Thread thread1 = new Thread(Thread01);
        thread1.Start();
        Thread thread2 = new Thread(Thread02);
        thread2.Start();
        thread1.Join();
        thread2.Join();
        Console.ReadLine();
    }

    private static Object obj1 = new Object();
    private static Object obj2 = new Object();

    private static void Thread01() {
        lock (obj1) {
            Console.WriteLine("Thread 01 : res1 を lock");
            Thread.Sleep(20);

            lock (obj2) {
                Console.WriteLine("Thread 01 : res2 を lock");
            }
        }
    }

    private static void Thread02() {
        lock (obj2) {
            Console.WriteLine("Thread 02 : res2 を lock");
            Thread.Sleep(20);

            lock (obj1) {
                Console.WriteLine("Thread 02 : res1 を lock");
            }
        }
    }
}

Thread01は、obj1 をlock し、その後、obj2 を lockしようとします。

一方、 

Thread02は、obj2 をlock し、その後、obj1 を lockしようとします。

しかし、Thread 01 が、obj2をlockしようとした時には、　obj2は、Thread 
02 によってlockされていますので、obj2が解放されるまで待ちになります。

また、Thread 02 が、obj1をlockしようとした時には、　obj1は、Thread 01 
によってlockされていますので、obj1が解放されるまで待ちになります。

このため永久にlock状態が解除されずに、プログラムがハングアップ状態にな
ってしまいます。

この原理は、データベースのデッドロックとほぼ同じですね。
デッドロックは、lockステートメントに限らず、他の同期クラスを利用して排
他処理をする場合も発生します。
デッドロックを回避するには、複数のリソースを同時にロックしない、複数の
リソースをロックする場合は、同じ順番でロックする、といった対応が必要で
す。

---------------------------------------------------------------------
【お知らせ】
今回で、「マルチスレッド編」は終了です。
3週間ほどお休みをいただいたのち、「C#3.0編」を開始する予定です。
ご期待ください。

では、みなさん良いお年を！

┌─┬─────────────────────────┬─┬─┬─┐
│☆│ C#プログラミングレッスン  (ぼぼ週刊）            │＿│□│×│
├─┴─────────────────────────┴─┴─┴─┤
│ Published by Gushwell.                                           │
│ Copyright (C) 2004-2007 Gushwell All rights reserved.            │
│ Microsoft MVP Visual Developer - Visual C#(Apr 2005 - Mar 2008)  │
│-------------------- Gushwell's Page ---------------------------- │
│ 窓際プログラマーの独り言  ：http://blog.livedoor.jp/gushwell/    │
│ 窓際プログラマーの読書三昧：http://gushwell.jugem.jp/            │
│ Gushwell's C# Programing Page：http://gushwell.ifdef.jp/         │
│ C#デザインパターン :                                             │
│  『増補改訂版Java言語で学ぶデザインパターン入門 / 結城 浩(著)』  │
│   のサンプルコードをC#に移植したものを掲載しています。           │
│   移植後のコードの公開は、結城氏の了解を得ています。             │
│   http://blog.livedoor.jp/gushwell/archives/50333227.html        │
└─────────────────────────────────┘
