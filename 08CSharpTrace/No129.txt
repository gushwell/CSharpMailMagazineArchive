┏━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━┳━┳━┓
┃☆┃ C#プログラミングレッスン                         ┃＿┃□┃×┃
┣━┻━━━━━━━━━━━━━━━━━━━━━━━━━┻━┻━┻━┫
┃ Trace(3)                                                   No.129┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

■──────────────────────────────────
■ BooleanSwitch

今回は、単純な On/Off スイッチを提供する BooleanSwitch について説明しま
す。
BooleanSwitch クラスを使うとデバッグおよびトレースの出力有無を制御する
ことが可能となります。

通常、BooleanSwitch は、アプリケーション構成ファイルで設定を行います。

<configuration>
  <system.diagnostics>
    <switches>
      <add name="mySwitch" value="1"/>
    </switches>
  </system.diagnostics>
</configuration>

name 属性は、任意の文字列を指定します。この名前をプログラムで指定するこ
とになります。
value属性は、0 が Off、0以外が On に対応しています。


■──────────────────────────────────
■ コードによる制御

もちろん構成ファイルだけでは、トレースの出力有無を制御することはできま
せん。プログラムコードのほうも、これに対応させる必要があります。
そのコードは、

 BooleanSwitch mySwitch = new BooleanSwitch("mySwitch", 
　　　　　　　　　　　　　　　　"Sample of BooleanSwitch");
 if ( mySwitch.Enabled )
     Trace.WriteLine("Switch on");
   
となります。これで、構成ファイルの value 属性を変更することで、再コンパ
イルしなくとも Trace の有効/無効を制御することが可能になります。
BooleanSwitch は、複数作成できますので、一部のメッセージだけを On/Off 
することも可能です。

なお、実際のコードでは、BooleanSwitch の変数は、ローカル変数ではなく、
static にすると良いでしょう。
また、各アプリケーションコードで直接 if ( mySwitch.Enabled ) の判断をす
るのではなく、

 if ( mySwitch.Enabled )
     Trace.WriteLine("Switch on");

をラップするクラスを作成して利用すると良いかもしれません。

例えば、こんな感じでしょうか？

  public static class MyTrace {
      private static BooleanSwitch mySwitch = 
　　　　　new BooleanSwitch("mySwitch", "Sample of BooleanSwitch");

      public static void WriteLine(string message) {
          if ( mySwitch.Enabled )
              Trace.WriteLine(message);
      }
  }

まあ、これはあまりにも安易なので、実際に利用するには、もう少し工夫が必
要かとは思いますが...
WriteLine の引数に、BooleanSwitch の名前や、あるいは、BooleanSwitch の
インスタンスそのものを追加すれば、複数の Switch に対応させることも可能
になると思います。

┌─┬─────────────────────────┬─┬─┬─┐
│☆│ C#プログラミングレッスン  (ぼぼ週刊）            │＿│□│×│
├─┴─────────────────────────┴─┴─┴─┤
│ Published by Gushwell.                                           │
│ Copyright (C) 2004-2007 Gushwell All rights reserved.            │
│ Microsoft MVP Visual Developer - Visual C#(Apr 2005 - Mar 2008)  │
│-------------------- Gushwell's Page ---------------------------- │
│ 窓際プログラマーの独り言  ：http://blog.livedoor.jp/gushwell/    │
│ 窓際プログラマーの読書三昧：http://gushwell.jugem.jp/            │
│ C#デザインパターン :                                             │
│  『増補改訂版Java言語で学ぶデザインパターン入門 / 結城 浩(著)』  │
│   のサンプルコードをC#に移植したものを掲載しています。           │
│   移植後のコードの公開は、結城氏の了解を得ています。             │
│   http://blog.livedoor.jp/gushwell/archives/50333227.html        │
└─────────────────────────────────┘