┏━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━┳━┳━┓
┃☆┃ C#プログラミングレッスン                         ┃＿┃□┃×┃
┣━┻━━━━━━━━━━━━━━━━━━━━━━━━━┻━┻━┻━┫
┃ Trace(1)                                                   No.127┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

■──────────────────────────────────
■ Traceクラス

前回の最後でお知らせしたように、今回は Traceクラスの説明です。

まずは、以下のコードを見てください。

using System;
using System.Collections.Generic;
using System.Text;
using System.Diagnostics;

namespace Trace1 {
    class Program {
        static void Main(string[] args) {
            Trace.WriteLine("Start Method");
            Trace.IndentSize = 4;
            Trace.Indent();
            Trace.Write("Trace.Write");
            Trace.WriteLine("は、改行しません。");
            for ( int i = 0; i < 4; i++ ) {
                Trace.WriteIf(i % 2 == 1, i);
                Trace.WriteLineIf(i % 2 == 1, " は、奇数です.");
            }
            System.Version v = new Version(1, 2, 3, 4);
            Trace.WriteLine(v);
            Trace.Unindent();
            Trace.WriteLine("End Method");
            Trace.Flush();
            Console.ReadLine();
        }
    }
}

このコード、実は、前回示したコードのDebug部分をTraceに変えただけです。
では、Visual Studio 2005でデバッグ実行してみましょう。
結果は、

Start Method
    Trace.Writeは、改行しません。
    1 は、奇数です.
    3 は、奇数です.
    1.2.3.4
End Method

と出力ウィンドウに表示されますので、Debugとまったく同じ動作です。
では、何が違うのでしょうか？


■──────────────────────────────────
■ Debugクラスとの違い

今度は、前回示した構成ファイルを組み込んで実行してみましょう。構成ファ
イルを再度掲載します。

<?xml version="1.0" encoding="utf-8" ?>
<configuration>
<system.diagnostics>
<trace autoflush="false" indentsize="4">
<listeners>
<add name="myListener"
                     type="System.Diagnostics.TextWriterTraceListener"
                     initializeData="TraceLog.txt" />
<remove name="Default" />
</listeners>
</trace>
</system.diagnostics>
</configuration>

これで、プログラムをビルドしてください。
以降、作成されるプログラムは、TestTrace.exe と仮定します。bin\Debug フ
ォルダに TestTrace.exe と TestTrace.exe.config ができていることを確認し、
TestTrace.exe を起動してください。
同じフォルダに、TraceLog.txt が作成されたことが確認できると思います。
これも、前回の Debugクラスと同様の動作です。

さて、Release モードでもビルドし、TestTrace.exe と TestTrace.exe.config
が bin\release フォルダにできていることを確認し、TestTrace.exe を起動し
てください。
同じように、TraceLog.txt が作成されたことが確認できると思います。
この部分が、Debug クラスと異なる点です。Debug クラスでは、Release モー
ドでコンパイルした exe では、ファイルは作成されませんでした。

つまり実際の運用環境でも利用するのが、Trace クラスということになります。

なお、トレースの有効無効は、コンパイル時の /d:TRACE フラグの有無で指定
できます。
Trace クラスが release モードでも有効なのは、/d:TRACE フラグが指定され
ているからです。

┌─┬─────────────────────────┬─┬─┬─┐
│☆│ C#プログラミングレッスン  (ぼぼ週刊）            │＿│□│×│
├─┴─────────────────────────┴─┴─┴─┤
│ Published by Gushwell.                                           │
│ Copyright (C) 2004-2007 Gushwell All rights reserved.            │
│ Microsoft MVP Visual Developer - Visual C#(Apr 2005 - Mar 2008)  │
│-------------------- Gushwell's Page ---------------------------- │
│ 窓際プログラマーの独り言  ：http://blog.livedoor.jp/gushwell/    │
│ 窓際プログラマーの読書三昧：http://gushwell.jugem.jp/            │
│ C#デザインパターン :                                             │
│  『増補改訂版Java言語で学ぶデザインパターン入門 / 結城 浩(著)』  │
│   のサンプルコードをC#に移植したものを掲載しています。           │
│   移植後のコードの公開は、結城氏の了解を得ています。             │
│   http://blog.livedoor.jp/gushwell/archives/50333227.html        │
└─────────────────────────────────┘
