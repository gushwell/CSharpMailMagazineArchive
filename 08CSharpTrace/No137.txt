┏━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━┳━┳━┓
┃☆┃ C#プログラミングレッスン                         ┃＿┃□┃×┃
┣━┻━━━━━━━━━━━━━━━━━━━━━━━━━┻━┻━┻━┫
┃ TraceSource(5)                                             No.137┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

■──────────────────────────────────
■ Filter

TraceSource 毎に、スイッチを指定し、どのレベル以上の情報を出力するかを
制御できることは以前説明しましたが、今度は、リスナー毎に設定できる Filter
について説明します。

構成ファイルの例を示します。

<?xml version="1.0" encoding="utf-8" ?>
<configuration>
  <system.diagnostics>
    <sources>
      <source name="MyTraceSource01" switchName="sourceSwitch01"
              switchType="System.Diagnostics.SourceSwitch">
        <listeners>
          <remove name="Default" />
          <add name="ConsoleFile" 
               type="System.Diagnostics.ConsoleTraceListener">
            <filter type="System.Diagnostics.EventTypeFilter" 
                    initializeData="Error" />
          </add>
        </listeners>
      </source>
    </sources>
    <switches>
      <add name="sourceSwitch01" value="Information"/>
    </switches>
  </system.diagnostics>
</configuration>

まず、switches 要素で、TraceSOpurce に対してレベルを指定しています。
Information となっていますので、Information レベル以上の情報が出力され
ることになります。

一方、中ほどの filter 要素では、Error を指定していますので、Error 以上
の情報が出力されます。

以下のプログラムで確かめて見ましょう。

 TraceSource trace1 = new TraceSource("MyTraceSource01");

 trace1.TraceEvent(TraceEventType.Start, 0, "開始です");
 trace1.TraceEvent(TraceEventType.Critical, 1, "重大なエラーです");
 trace1.TraceEvent(TraceEventType.Error, 2, "エラーです");
 trace1.TraceEvent(TraceEventType.Warning, 3, "警告です");
 trace1.TraceEvent(TraceEventType.Information, 4, "情報です");
 trace1.TraceEvent(TraceEventType.Stop, 5, "終了です");
 Console.ReadLine();

この結果は、

MyTraceSource01 Critical: 1 : 重大なエラーです
MyTraceSource01 Error: 2 : エラーです

となります。

■──────────────────────────────────
■ Filterの利点

だったら、はじめから、switches で Error にすれば良いんじゃないの？ と思
うかもしれませんが、リスナーを２つ以上利用するときに、このオプションは
威力を発揮します。

上記構成ファイルの<listeners>要素を以下のように変更し、

<listeners>
  <remove name="Default" />
  <add name="ConsoleFile" 
       type="System.Diagnostics.ConsoleTraceListener">
    <filter type="System.Diagnostics.EventTypeFilter" 
            initializeData="Error" />
  </add>
  <add name ="Default" 
       type="System.Diagnostics.DefaultTraceListener">
    <filter type="System.Diagnostics.EventTypeFilter" 
            initializeData="All" />
  </add>
</listeners>

デバッグ実行してみてください。

コンソールには、

MyTraceSource01 Critical: 1 : 重大なエラーです
MyTraceSource01 Error: 2 : エラーです

と表示され、Visual Studio の出力ウィンドウには、

MyTraceSource01 Critical: 1 : 重大なエラーです
MyTraceSource01 Error: 2 : エラーです
MyTraceSource01 Warning: 3 : 警告です
MyTraceSource01 Information: 4 : 情報です

と表示されるはずです。

この機能を使うことで、Error 以上はイベントログへ、すべての情報はテキス
トファイルへ出力するということが可能になります。
これは、従来の Traceクラスでは実現できませんでした。

<filter> 要素では、type 属性で、System.Diagnostics.EventTypeFilter と指
定しています。
ということは、ここを変えれば、独自のフィルターを作成できそうです。
次回は、独自フィルターの作成をしてみましょう。

┌─┬─────────────────────────┬─┬─┬─┐
│☆│ C#プログラミングレッスン  (ぼぼ週刊）            │＿│□│×│
├─┴─────────────────────────┴─┴─┴─┤
│ Published by Gushwell.                                           │
│ Copyright (C) 2004-2007 Gushwell All rights reserved.            │
│ Microsoft MVP Visual Developer - Visual C#(Apr 2005 - Mar 2008)  │
│-------------------- Gushwell's Page ---------------------------- │
│ 窓際プログラマーの独り言  ：http://blog.livedoor.jp/gushwell/    │
│ 窓際プログラマーの読書三昧：http://gushwell.jugem.jp/            │
│ C#デザインパターン :                                             │
│  『増補改訂版Java言語で学ぶデザインパターン入門 / 結城 浩(著)』  │
│   のサンプルコードをC#に移植したものを掲載しています。           │
│   移植後のコードの公開は、結城氏の了解を得ています。             │
│   http://blog.livedoor.jp/gushwell/archives/50333227.html        │
└─────────────────────────────────┘

