┏━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━┳━┳━┓
┃☆┃ C#プログラミングレッスン                         ┃＿┃□┃×┃
┣━┻━━━━━━━━━━━━━━━━━━━━━━━━━┻━┻━┻━┫
┃ TraceSource(2)                                             No.134┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

前回、TraceSourceクラスについて説明をしましたが、まだ説明し残したメン
バーがありますので、今回はその説明です。

■──────────────────────────────────
■ TraceDataメソッド

TraceDataメソッドの使い方は、TraceEvent とほとんど同じです。
TraceEvent が出力したい文字列を引数に渡すのに対し、TraceData は、データ
オブジェクトを渡します。

 Person person = new Person();
 ...
 trace.TraceData(TraceEventType.Warning, 3, person);

といった感じですね。調べた限りでは、デフォルトの TraceListener では、
p.ToString() の結果が、出力されるようです。

※ まだ、説明していませんでしたが、TraceSource も従来の Trace クラス同
   様、 登録された TraceListener が実際の出力を行います。そのため、上記
   の第３引数の person オブジェクトが実際にどのように出力されるかは、
   TraceListener の実装しだいということになります。

TraceSource.TraceInformation (String) 

TraceInformation(String) は、TraceEvent(TraceEventType,Int32,String) メ
ソッドを呼び出して、id(イベントの数値識別子) を 0 に、eventType を 
TraceEventType.Information に設定し、情報メッセージを出力します。

ちょっとした出力には、こちらの方が手軽ですね。


■──────────────────────────────────
■ Listeners プロパティ

TraceSource には、TraceListenerCollection 型の Listeners プロパティがあ
ります。
ということは、TraceListener も、それぞれの TraceSource インスタンス毎に
登録できるということになります。

これにより、TraceSource のインスタンス別に、イベントログとテキストファ
イルへの出力を分けるなどといったより柔軟な対応が可能になりました。

  TraceSource trace1 = new TraceSource("MyTraceSource01");
  trace1.Listeners.Clear();
  trace1.Listeners.Add(new TextWriterTraceListener(@"D:\Temp\trace.log"));

  TraceSource trace2 = new TraceSource("MyTraceSource02");
  trace2.Listeners.Clear();
  trace2.Listeners.Add(new EventLogTraceListener());

  // ファイルに出力
  trace1.TraceEvent(TraceEventType.Start, 0, "開始です");
  trace1.TraceEvent(TraceEventType.Critical, 1, "重大なエラーです");
  trace1.TraceEvent(TraceEventType.Error, 2, "エラーです");

  // イベントログに出力
  trace1.TraceEvent(TraceEventType.Start, 0, "開始です");
  trace1.TraceEvent(TraceEventType.Critical, 1, "重大なエラーです");
  trace1.TraceEvent(TraceEventType.Error, 2, "エラーです");

とすれば、trace1 に対するイベントはテキストファイルに、trace2 に対する
イベントは、イベントログに出力されるようになります。


┌─┬─────────────────────────┬─┬─┬─┐
│☆│ C#プログラミングレッスン  (ぼぼ週刊）            │＿│□│×│
├─┴─────────────────────────┴─┴─┴─┤
│ Published by Gushwell.                                           │
│ Copyright (C) 2004-2007 Gushwell All rights reserved.            │
│ Microsoft MVP Visual Developer - Visual C#(Apr 2005 - Mar 2008)  │
│-------------------- Gushwell's Page ---------------------------- │
│ 窓際プログラマーの独り言  ：http://blog.livedoor.jp/gushwell/    │
│ 窓際プログラマーの読書三昧：http://gushwell.jugem.jp/            │
│ C#デザインパターン :                                             │
│  『増補改訂版Java言語で学ぶデザインパターン入門 / 結城 浩(著)』  │
│   のサンプルコードをC#に移植したものを掲載しています。           │
│   移植後のコードの公開は、結城氏の了解を得ています。             │
│   http://blog.livedoor.jp/gushwell/archives/50333227.html        │
└─────────────────────────────────┘