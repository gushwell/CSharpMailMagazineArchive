┏━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━┳━┳━┓
┃☆┃ C#プログラミングレッスン                         ┃＿┃□┃×┃
┣━┻━━━━━━━━━━━━━━━━━━━━━━━━━┻━┻━┻━┫
┃ Debug(1)                                                   No.125┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

今回から、Debug, Traceクラスについて解説します。また、.NET Framework2.0
では、新たに、TraceSourceというクラスも追加されていますので、この新しい
クラスにつていも解説したいと考えています。


■──────────────────────────────────
■ Debugクラス

Debug クラスは、その名前の通り、デバッグ情報を出力するクラスです。とい
っても出力する内容は、プログラマがコーディングしなければなりませんが。
Debug クラスは、System.Diagnostics　名前空間に存在します。
早速、Debugクラスを使った、簡単な例を見てみましょう。


using System.Diagnostics;
....

 Debug.WriteLine("Start Method");
 Debug.IndentSize = 4;
 Debug.Indent();
 Debug.Write("Debug.Write");
 Debug.WriteLine("は、改行しません。");
 for (int i = 0; i < 4; i++) {
     Debug.WriteIf(i%2==1,i);
     Debug.WriteLineIf(i % 2 == 1, " は、奇数です.");
 }
 Debug.WriteLine(e);
 Debug.Unindent();
 Debug.WriteLine("End Method");
 Debug.Flush();

このコードを見ていただければ分かるとおり、Debug クラスで利用するメソッ
ド、プロパティは、static となっています。

実際にこのコードを、Windows アプリケーションや、コンソールアプリケーシ
ョンに組み込んで動かしてみると、Debug のメッセージは、Visual Studio IDE
の出力ウィンドウに出力されます。

結果は、

Start Method
    Debug.Writeは、改行しません。
    1 は、奇数です.
    3 は、奇数です.
    System.Windows.Forms.MouseEventArgs
End Method

となります。
　

最後から４行目の

　Debug.WriteLine(e);

に注目してください、クラスのインスタンスを引数に渡しています。Console.
WriteLine(e) と明らかに動きが違いますね。Debug の場合は、ToString() が
override されていたとしても、名前空間名も含めた型名が表示されます。

■──────────────────────────────────
■ Debugクラスのメソッド

もうほとんど説明するまでもありませんが、簡単にメソッド等の説明をします。

IndentSizeプロパティ
　1 つのインデントに含まれる空白の数を取得または設定します。

Indentメソッド
　現在の IndentLevel を 1 だけ増やします。 

Unindentメソッド
　現在の IndentLevel を 1 だけ減らします。 

Writeメソッド
　デバッグ情報を出力します。改行はしません。

WriteLineメソッド
　デバッグ情報を出力します。最後に改行を付加します。

WriteIf, WriteLineIfメソッド
　第1引数の値が true の時に、デバッグ情報を出力します。

Flushメソッド
　出力バッファをフラッシュします。

Assertメソッド
  Assert メソッドは、このサンプルコードには出ていませんが、Debug クラス
  の特徴を良く現しているメソッドです。指定された条件が False と評価され
  た場合にのみ、出力ウィンドウにメッセージが表示されます。

  たとえば、

   Debug.Assert(obj != null, "obj is null");

  というコードがあった場合、obj が　null のときだけ、[中止]、 [再試行]、
  [無視] の選択とともに、第2引数のメッセージが表示されます。


┌─┬─────────────────────────┬─┬─┬─┐
│☆│ C#プログラミングレッスン  (ぼぼ週刊）            │＿│□│×│
├─┴─────────────────────────┴─┴─┴─┤
│ Published by Gushwell.                                           │
│ Copyright (C) 2004-2007 Gushwell All rights reserved.            │
│ Microsoft MVP Visual Developer - Visual C#(Apr 2005 - Mar 2008)  │
│-------------------- Gushwell's Page ---------------------------- │
│ 窓際プログラマーの独り言  ：http://blog.livedoor.jp/gushwell/    │
│ 窓際プログラマーの読書三昧：http://gushwell.jugem.jp/            │
│ C#デザインパターン :                                             │
│  『増補改訂版Java言語で学ぶデザインパターン入門 / 結城 浩(著)』  │
│   のサンプルコードをC#に移植したものを掲載しています。           │
│   移植後のコードの公開は、結城氏の了解を得ています。             │
│   http://blog.livedoor.jp/gushwell/archives/50333227.html        │
└─────────────────────────────────┘