┏━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━┳━┳━┓
┃☆┃ C#プログラミングレッスン                         ┃＿┃□┃×┃
┣━┻━━━━━━━━━━━━━━━━━━━━━━━━━┻━┻━┻━┫
┃ Trace(2)                                                   No.128┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

■──────────────────────────────────
■ <listeners>の意味

前回までの説明で、Trace と Debug を一度に使ったらどうなるのだろう？と疑
問に思った方もいると思います。

実際に試してみましょう。

using System;
using System.Collections.Generic;
using System.Text;
using System.Diagnostics;

namespace Trace2 {
    class Program {
        static void Main(string[] args) {
            Trace.WriteLine("Start Method");
            Trace.IndentSize = 4;
            Trace.Indent();
            Trace.Write("Trace.Write");
            Trace.WriteLine("は、改行しません。");
            for ( int i = 0; i < 4; i++ ) {
                Debug.WriteIf(i % 2 == 1, i);
                Debug.WriteLineIf(i % 2 == 1, " は、奇数です.");
            }
            System.Version v = new Version(1, 2, 3, 4);
            Trace.WriteLine(v);
            Trace.Unindent();
            Trace.WriteLine("End Method");
            Trace.Flush();
            Console.ReadLine();
        }
    }
}

<?xml version="1.0" encoding="utf-8" ?>
<configuration>
  <system.diagnostics>
    <trace autoflush="false" indentsize="4">
      <listeners>
        <add name="myListener" 
             type="System.Diagnostics.TextWriterTraceListener"
             initializeData="TraceLog.txt" />
        <remove name="Default" />
      </listeners>
    </trace>
  </system.diagnostics>
</configuration>

前回示したものとほぼ同じですが、C# のソースの、for 文の中を Debug に変
更しています。
Debugモードビルドしたプログラムを実行すると、TraceLog.txtの中身は、

Start Method
    Trace.Writeは、改行しません。
    1 は、奇数です.
    3 は、奇数です.
    1.2.3.4
End Method

となり、Releaseモードビルドしたプログラムを実行すると、

Start Method
    Trace.Writeは、改行しません。
    1.2.3.4
End Method

となります。
これから、構成ファイルの <listeners> 要素は、Debug と Trace で共有して
いることがわかります。

■──────────────────────────────────
■ イベントログへの出力

今回は、これで終わろうかと思ったのですが、これだけだと、あまりにも内容
がないので、イベントログに出力する方法についても、説明しましょう。

構成ファイルを以下のように変更するだけです。

<?xml version="1.0" encoding="utf-8" ?>
<configuration>
  <system.diagnostics>
    <trace autoflush="false" indentsize="4">
      <listeners>
        <add name="MyEventListener"
             type="System.Diagnostics.EventLogTraceListener"
             initializeData="GushwellEventLog"/>
        <remove name="Default" />
      </listeners>
    </trace>
  </system.diagnostics>
</configuration>

これで、プログラムを実行してみてください。イベントビューワで見ると、
GushwellEventLog というイベントソース名で、ログが出力されているのを確認
できるはずです。
ただ、注意してみると、Write と WriteLine の区別がなく、Write メソッドの
みで、ひとつのイベントが作成されています。
このため、実際にイベントログに出力するよう

また、
      <add name="myListener"
           type="System.Diagnostics.TextWriterTraceListener"
           initializeData="TraceLog.txt" />

の記述を残したまま、EventLogTraceListener の記述をすれば、イベントログ
にもテキストファイルにも、同じ情報を出力できることになります。

┌─┬─────────────────────────┬─┬─┬─┐
│☆│ C#プログラミングレッスン  (ぼぼ週刊）            │＿│□│×│
├─┴─────────────────────────┴─┴─┴─┤
│ Published by Gushwell.                                           │
│ Copyright (C) 2004-2007 Gushwell All rights reserved.            │
│ Microsoft MVP Visual Developer - Visual C#(Apr 2005 - Mar 2008)  │
│-------------------- Gushwell's Page ---------------------------- │
│ 窓際プログラマーの独り言  ：http://blog.livedoor.jp/gushwell/    │
│ 窓際プログラマーの読書三昧：http://gushwell.jugem.jp/            │
│ C#デザインパターン :                                             │
│  『増補改訂版Java言語で学ぶデザインパターン入門 / 結城 浩(著)』  │
│   のサンプルコードをC#に移植したものを掲載しています。           │
│   移植後のコードの公開は、結城氏の了解を得ています。             │
│   http://blog.livedoor.jp/gushwell/archives/50333227.html        │
└─────────────────────────────────┘