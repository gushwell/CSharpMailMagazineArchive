■━ [C#プログラミングレッスン] ━━━━━━━━━━━━━━━ No.350 ━□

「暗号化編」-- 共有キー暗号方式(1)
                                                            by Gushwell  
□━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━■

みなさん、お久しぶりです。「C#プログラミングレッスン」再開です。
いろいろあって、再開するのが遅れました。m(_ _)m
今号から、「暗号化編」の連載を開始します。


■□───────────────────────────────────
■□ 暗号化とは

インターネットなどのネットワークを通じ大切なデータをやり取りする場合、第三
者にデータを盗まれたり改変されたりしないように、データをそのままでは読めな
いようにデータ変換することを暗号化と言います。元のデータに戻すことを複合化
と言います。

暗号化、複合化には鍵を使いますが、一つのカギを使う共有キー暗号方式と、２つ
のカギを使う公開キー暗号方式があります。今回は、共有キー暗号方式について説
明します。


■□───────────────────────────────────
■□ 共有キー暗号方式

共有キー暗号方式では、単一の共有キーを使用してデータの暗号化と複合化を行
います。キーを取得した人はだれでもデータを復号化できます。

つまり、このキーは、認証されていない第三者からアクセスできないように保護
する必要があります。
この共有キー暗号方式は、 (公開キー暗号方式と比較して) 非常に高速です。その
ため、大量のデータストリームに対して暗号変換を実行する場合に適しています。
この暗号化方式は、暗号化と復号化で同じキーが使用されるため対称暗号化方式
とも呼ばれます。

.NET Framework には、共有キー暗号化アルゴリズムを実装する次のクラスが用意
 されています。

 AesManaged (.NET Framework 3.5 で導入)。
 DESCryptoServiceProvider .
 RC2CryptoServiceProvider .
 RijndaelManaged .
 TripleDESCryptoServiceProvider .

これらのアルゴリズムを実装するクラスは、すべて、 
   System.Security.Cryptography.SymmetricAlgorithm
から派生しており、アルゴリズムを簡単に交換することが可能となっています。



■□───────────────────────────────────
■□ 共有キー暗号方式による暗号化、複合化の手順

共有キー暗号方式による暗号化、複合化の手順を示します。

●暗号化の手順

(1)CryptoServiceProvider のインスタンス（csp とする）を生成
(2)csp.Key, csp.IV プロパティの設定
(3)csp.CreateEncryptorメソッドで、ICryptoTransformインスタンスを得る。
(4)ICryptoTransformのTransformFinalBlockで暗号化する。

●複合化の手順

(1)CryptoServiceProvider のインスタンス（csp とする）を生成
(2)csp.Key, csp.IV プロパティの設定
(3)csp.CreateDecryptorメソッドで、ICryptoTransformインスタンスを得る。
(4)ICryptoTransformのTransformFinalBlockで複合化する。

さて、ここで、Key と IV という単語が出てきました。これについて簡単に説明
します。

共有キー暗号方式ではデータをブロック単位で暗号化しますが、この時、暗号ブロ
ックチェイン (CBC: Cipher Block Chaining) と呼ばれるチェインモードが使用さ
れます。

CBC 暗号では、暗号文ブロックを使用してビットごとの排他的 OR (XOR) 演算を
実行してから、Keyを使って暗号化されます。 
そのため、ひとつ前のブロックのデータに依存することになります。これにより複
合化を困難にしているわけです。

なお、最初のブロックでは、前のブロックが存在しませんので、初期ベクターと
して、IVを利用し、ビットごとの排他的 OR (XOR) 演算が実行されます。

再度まとめてみると以下のようになります。

CBC
  暗号クラスでは、暗号ブロックチェイン (CBC) と呼ばれるチェインモードが使用
  される。
  CBCでは、KeyとIV(初期化ベクタ）を使用して暗号化をする。

Key
  暗号化するためのキー。
  IVを利用しない暗号化の場合、同じキーを使うと、同じ入力ストリームには、同
  じ暗号文が出力される。これは、望ましくない。

IV
  入力ストリームを複数のブロックに分けて暗号化をする。
  次のブロックを暗号化する際に、一つ前のブロックの情報を使って暗号化する。
  このとき、先頭ブロックは、ひとつ前のブロックの情報を利用できないため、初
  期化ベクタ（IV)を使う。

難しいことはわからなくても、共有キー暗号方式では、暗号化、複合化ともに、
keyと IV のペアが必要であることだけは覚えておいてください。


─────────────────────────────────────

今回は、ここまで。
実際の暗号化のコードは次回示します。

─────────────────────────────────────
『C#プログラミングレッスン』  (ほぼ週刊）                                 
☆皆さまからの感想をお待ちしています。http://gushwell.ifdef.jp/mail.html  
─────────────────────────────────────
Published by Gushwell.                                                    
Copyright (C) 2012 Gushwell All rights reserved.                          
Microsoft MVP for Visual C#(Apr 2005 - Mar 2013)                          
                                                                          
■Gushwell's Page                                                         
facebook Page                     : http://www.facebook.com/CSharpLesson  
Gushwell's C# Dev Notes           : http://gushwell.ldblog.jp/            
Gushwell's C# Programming Page    : http://gushwell.ifdef.jp/             
Gushwellの読書ノート              : http://gushwell.jugem.jp/             
Twitterアカウント                 : @gushwell                             
─────────────────────────────────────
