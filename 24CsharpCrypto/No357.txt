■━ [C#プログラミングレッスン] ━━━━━━━━━━━━━━━ No.357 ━□

「暗号化編」-- 公開キー暗号方式 (非対称暗号化方式) - (2)
                                                            by Gushwell  
□━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━■

■□───────────────────────────────────
■□ 公開キー暗号方式のシナリオ

前回は、RSACryptoServiceProviderの使い方を示しましたが、これだけでは正しく
公開キー暗号化を使うことはできません。
もう少し具体的なシナリオを考えてみましょう。実際の暗号化されたデータのや
り取りについて、暗号化の話で良く登場する BobとAlice を例とり、その流れを
示します。

 Bob   : メッセージを送る側
 Alice : メッセージを受け取る側

           Bob                                             Alice 
  --------------------+----------------------------+--------------------
                        -->> 公開キーを頂戴ね -->>
                                                    公開/秘密キー生成
                        <<---  公開キーだよ  <<---     
  公開キーで
  メッセージを暗号化
                        -->> メッセージ送るよ -->>
                                                    秘密キーで復号化


これを見てもわかる通り、注意しなければいけないのは、キーを生成するのは、
メッセージを受け取る側の Apliceの行為です。メッセージを贈るBob の行為では
ありません。ここを良く頭に入れる必要があります。
これを理解しないと公開キー暗号方式の正しい使い方ができません。

■□───────────────────────────────────
■□ BobクラスとAliceクラス

上記シナリオをできるだけ忠実にBobクラスとAliceクラスを書いてみました。

  class Bob {
      private RsaCripto _rsa = new RsaCripto();
      private string _publicKey;

      public string Encrypt(string message) {
          return _rsa.Encrypt(message, _publicKey);
      }

      public void Send(Alice alice, string message) {
          alice.Receive(message);
      }

      public void RequestPublicKey(Alice alice) {
          _publicKey = alice.CreatePublicKey();
      }
  }

  class Alice {
      private RsaCripto _rsa = new RsaCripto();
      private string _privateKey;
      private string _crypted;

      public string Decrypt() {
          return _rsa.Decrypt(_crypted, _privateKey);
      }

      public string CreatePublicKey() {
          // 対となる秘密キーも生成する。
          _privateKey = _rsa.CreatePrivateKey();
          return _rsa.CreatePublicKey();
      }

      public void Receive(string crypted) {
          this._crypted = crypted;
      }
  }


この BobクラスとAliceクラスを使ったコードです。

 string message = "この文字列をRSAアルゴリズムで暗号化します";
 Bob bob = new Bob();
 Alice alice = new Alice();

 // Bob側のアクション (Aliceにメッセージを送りたい）
 // 公開キーをAliceに要求
 // 受け取った公開キーでmessageを暗号化
 // aliceに暗号文を送る
 bob.RequestPublicKey(alice);
 var crypted = bob.Encrypt(message);
 bob.Send(alice, crypted);  // AliceはReceiveする
 Console.WriteLine(crypted);
 Console.WriteLine();

 // Alice側のアクション (Bobからのメッセージを復号化する)
 // 受け取った暗号文を復号化する
 var decrypted = alice.Decrypt();
 Console.WriteLine(decrypted);


通常は、BobとAliceは別プロセスとして動作しますので、上記コードは実際の場
面では使えませんし、クラス設計におかしな点もあります。あくまでも暗号化
を理解するためのコードとして捉えてください。


─────────────────────────────────────
『C#プログラミングレッスン』  (ほぼ週刊）                                 
☆皆さまからの感想をお待ちしています。http://gushwell.ifdef.jp/mail.html  
─────────────────────────────────────
Published by Gushwell.                                                    
Copyright (C) 2013 Gushwell All rights reserved.                          
Microsoft MVP for Visual C#(Apr 2005 - Mar 2013)                          
                                                                          
■Gushwell's Page                                                         
facebook Page                     : http://www.facebook.com/CSharpLesson  
Gushwell's C# Dev Notes           : http://gushwell.ldblog.jp/            
Gushwell's C# Programming Page    : http://gushwell.ifdef.jp/             
Gushwellの読書ノート              : http://gushwell.jugem.jp/             
Twitterアカウント                 : @gushwell                             
─────────────────────────────────────
