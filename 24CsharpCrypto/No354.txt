■━ [C#プログラミングレッスン] ━━━━━━━━━━━━━━━ No.354 ━□

「暗号化編」-- データ保護 API (DPAPI: Data Protection API)
                                                            by Gushwell  
□━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━■


■□───────────────────────────────────
■□ データ保護 API (DPAPI: Data Protection API)とは

.NET Framework では、データ保護 API (DPAPI: Data Protection API) へのアク
セス機能が提供されています。この DPAPI を使用すると、簡単にデータを保護す
ることが可能です。
DPAPIは、現在のユーザー アカウントまたは現在のコンピューターの情報を使用
してデータを暗号化しますので、暗号化キーの生成や保護といった面倒な問題か
ら解放されます。
そのため、同一コンピュータ上で暗号化と復号化が行われるケースでは、今回
説明する DPAPIの利用を検討してみてください。

.NET Frameworkには、ProtectedMemory と ProtectedDataの２つのクラスが用意
されています。
ProtectedMemory クラスは、コンピュータを再起動すると復元できないようなの
で、より実用的なProtectedDataクラスを使ったコードを示します。
例えば、パスワードなど保護したい場合に利用できます。

ProtectedDataクラスでは、暗号化されたデータを暗号化時のユーザーアカウント
に制限したり、同一コンピュータならば、だれでも復元できるようにしたりの指
定が可能になっています。

■□───────────────────────────────────
■□ DPAPIの暗号化のコード

ProtectedDataクラスを用いた暗号化のコードを示します。

 public static void EncryptStringToFile(string original, 
                                DataProtectionScope Scope, string filepath) {
     var buffer = UnicodeEncoding.UTF8.GetBytes(original);
     byte[] encrptedData = ProtectedData.Protect(buffer, null, Scope);
     using (FileStream fStream = new FileStream(filepath, FileMode.OpenOrCreate)) {
         fStream.Write(encrptedData, 0, encrptedData.Length);
     }
 }

ProtectedData.Protectが暗号化のメソッドです。
文字列へのファイル出力コードに、わずかなコードを加えただけですね。
前回お見せした共有キー暗号化でのファイルへの出力と比べるとずいぶんと短い
コードになっています。
Protectメソッドの第２引数には、データの暗号化に使用される、追加のバイト配
列を指定します。
指定することで、より強固な暗号化が行えます。不要な場合は、nullを指定しま
す。

このメソッドを呼び出すコードを示します。

 string encryptStr = "この文字列を暗号化してファイルに保存します。";
 EncryptStringToFile(encryptStr, DataProtectionScope.CurrentUser, 
                     "Crypto.Dat");


DataProtectionScope.CurrentUser を指定しているので、復号化も、同一ユーザ
である必要があります。


■□───────────────────────────────────
■□ DPAPIの復号化のコード

では次に、ProtectedDataクラスを用いた復号化のコードを示します。

 public static string DecryptStringFromFile(DataProtectionScope Scope, 
                                                         string filepath) {
     using (var fStream = new FileStream(filepath, FileMode.Open)) {
         int length = (int)fStream.Length;
         byte[] inBuffer = new byte[length];
         fStream.Read(inBuffer, 0, length);
         byte[] outBuffer = ProtectedData.Unprotect(inBuffer, null, Scope);
         return UnicodeEncoding.UTF8.GetString(outBuffer);
     }
 }

このコードでは、フィルサイズがintで収まりきらないデータを復元することはで
きませんが、まあ、たいていの場合はこれで問題ないでしょう。
ProtectedData.Unprotectが復号化のメソッドです。
Unprotectメソッドの第２引数には、Protectメソッドで使用されたオプションの
追加のバイト配列を渡します。追加のバイト配列が使用されなかった場合は、
nullです。

このDecryptStringFromFileメソッドの呼び出し例を示します。

  string decryptStr = DecryptStringFromFile(DataProtectionScope.CurrentUser, 
                                            "Crypto.Dat");
  Console.WriteLine(decryptStr);


■□───────────────────────────────────
■□ より強固な暗号化を行いたい場合

なお、より強固な暗号化を行いたい場合には、以下のようなコードで、追加のバイ
ト配列を生成すると良いです。もちろん、プログラムで固定で追加のバイト配列を
記述しても構いません。

        public static byte[] CreateRandomEntropy() {
            byte[] entropy = new byte[16];
            var crypto = new RNGCryptoServiceProvider();
            crypto.GetBytes(entropy);
            return entropy;
        }

このメソッドで得られたbyte配列を ProtectedData.Protectメソッドおよび
ProtectedData.Unprotectの第２引数に渡してあげます。
この場合は、このバイト配列をどこに保持しておくのかというもう一つの課題が
出てきますので、どこまで保護を強固にするかをとのバランスを考える必要があ
ります。

─────────────────────────────────────
『C#プログラミングレッスン』  (ほぼ週刊）                                 
☆皆さまからの感想をお待ちしています。http://gushwell.ifdef.jp/mail.html  
─────────────────────────────────────
Published by Gushwell.                                                    
Copyright (C) 2013 Gushwell All rights reserved.                          
Microsoft MVP for Visual C#(Apr 2005 - Mar 2013)                          
                                                                          
■Gushwell's Page                                                         
facebook Page                     : http://www.facebook.com/CSharpLesson  
Gushwell's C# Dev Notes           : http://gushwell.ldblog.jp/            
Gushwell's C# Programming Page    : http://gushwell.ifdef.jp/             
Gushwellの読書ノート              : http://gushwell.jugem.jp/             
Twitterアカウント                 : @gushwell                             
─────────────────────────────────────
