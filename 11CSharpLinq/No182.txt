┏━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━┳━┳━┓
┃☆┃ C#プログラミングレッスン                         ┃＿┃□┃×┃
┣━┻━━━━━━━━━━━━━━━━━━━━━━━━━┻━┻━┻━┫
┃ C#3.0-LINQ let句                                           No.182┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

いよいよ、LINQ to Objectの最終回です。
最後は、let句について説明します。

■──────────────────────────────────
■let句

クエリ式のなかで、新たな変数に値を保持し、その後の句で参照すしたいとい
う要求に答えてくれるのが let 句です。

 var products = NorthwindObjects.GetProducts();
 var categories =
     from p in products
     group p by p.CategoryID into g
     let minPrice = g.Min(p => p.UnitPrice)
     select new { 
         Category = g.Key, 
         CheapestProducts = g.Where(p => p.UnitPrice == minPrice)
     };
 foreach (var c in categories) {
     Console.WriteLine(c.Category);
     foreach (var p in c.CheapestProducts)
         Console.WriteLine(p.ProductName);
 }

この例では、

 group p by p.CategoryID into g

でグループ化された結果(Productのシーケンス）が g に代入されます。
その後、

 let minPrice = g.Min(p => p.UnitPrice)

で、グループ化された中で、最も低い製品の単価を求め、minPriceに入れてい
ます。
この minPriceを使い、以下のSelect句で最も単価の低い製品群を 
CheapestProducts に入れています。

 select new { 
     Category = g.Key, 
     CheapestProducts = g.Where(p => p.UnitPrice == minPrice)
 };

※ サンプルコードに出てくる NorthwindObjects.GetProducts() メソッドは、
   http://gushwell.ifdef.jp/magArchive.html のページ右下からダウンロー
   ドできます。

■──────────────────────────────────
■もう一つの例

では、もう一つ MSDNドキュメントにある例を見てみましょう。

 string[] strings = {
      "A penny saved is a penny earned.",
      "The early bird catches the worm.",
      "The pen is mightier than the sword." 
 };

 var earlyBirdQuery =
     from sentence in strings
     let words = sentence.Split(' ')
     from word in words
     let w = word.ToLower()
     where w[0] == 'a' || w[0] == 'e'
         || w[0] == 'i' || w[0] == 'o'
         || w[0] == 'u'
     select word;
 foreach (var v in earlyBirdQuery) {
     Console.WriteLine("\"{0}\" starts with a vowel", v);
 }


このコードは、stringsにある文字列を単語に切り分け、母音で始まる単語だ
けを抜き出しています。

 let words = sentence.Split(' ')

で、文字列を空白で切り分け、words配列に入れています。
words は、string[]型なので、IEnumerable<string>を実装しているので、次
のfromのソースに利用できます。

  from word in words

さらに、

  let w = word.ToLower()

で、先頭文字を小文字に変換し、

 where w[0] == 'a' || w[0] == 'e'
     || w[0] == 'i' || w[0] == 'o'Aggregate
     || w[0] == 'u'

で、母音で始まる単語だけを選択しています。

■──────────────────────────────────
■拡張メソッドで書くと

先ほどのMSDNに掲載されているクエリ式を拡張メソッドで書いてみましょう。
私の知識不足なのか、1対1に素直に置き換えることができませんでした。

 var earlyBirdQuery = strings
     .SelectMany(s => s.Split(' '))
     .Where(word => {
         var w = word.ToLower();
         return w[0] == 'a' || w[0] == 'e'
             || w[0] == 'i' || w[0] == 'o'
             || w[0] == 'u';
     })
     .Select(word => word);

最初にあげたクエリ式を拡張メソッドで書くのは、読者の皆さんの課題とした
いと思います。

---------------------------------------------------------------------

今年の春から続いた LINQ to Objectの説明はこれで終了です。いかがでした
か？ C#の新しい一面を見ることができたのではないでしょいうか？

┌─┬─────────────────────────┬─┬─┬─┐
│☆│ C#プログラミングレッスン  (ぼぼ週刊）            │＿│□│×│
├─┴─────────────────────────┴─┴─┴─┤
│ Published by Gushwell.                                           │
│ Copyright (C) 2004-2007 Gushwell All rights reserved.            │
│ Microsoft MVP Visual Developer - Visual C#(Apr 2005 - Mar 2009)  │
│-------------------- Gushwell's Page ---------------------------- │
│ 窓際プログラマーの独り言  ：http://blog.livedoor.jp/gushwell/    │
│ 窓際プログラマーの読書三昧：http://gushwell.jugem.jp/            │
│ Gushwell's C# Programing Page：http://gushwell.ifdef.jp/         │
│ C#デザインパターン :                                             │
│  『増補改訂版Java言語で学ぶデザインパターン入門 / 結城 浩(著)』  │
│   のサンプルコードをC#に移植したものを掲載しています。           │
│   移植後のコードの公開は、結城氏の了解を得ています。             │
│   http://gushwell.ifdef.jp/dp/csdpindex.html                     │
└─────────────────────────────────┘
