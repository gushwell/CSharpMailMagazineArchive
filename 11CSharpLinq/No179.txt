┏━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━┳━┳━┓
┃☆┃ C#プログラミングレッスン                         ┃＿┃□┃×┃
┣━┻━━━━━━━━━━━━━━━━━━━━━━━━━┻━┻━┻━┫
┃ C#3.0-LINQ 生成演算子                                      No.179┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

■──────────────────────────────────
■Range

Range 演算子は、整数のシーケンスを生成します。
Rangeの第1引数が、シーケンス内の最初の整数の値で、第2引数が、生成する
連続した整数の数です。。

 var nums = Enumerable.Range(1, 10).Select(n => n * 2);
 foreach (var n in nums)
     Console.WriteLine(n);

上の例は、2 から 20までの偶数のシーケンスを作成しています。

また、
 int[] array = Enumerable.Range(1, 10)
                         .Select(n => n * 2)
                         .ToArray();

とすれば、配列の要素が、2,4,6,8,...,20 という配列を作ることも出来ます。

■──────────────────────────────────
■Repeat

Repeat 演算子は、値を指定された回数分繰り返すシーケンスを生成します。
2つの例を示します。

 Enumerable.Repeat(-1, 10)
           .ToList()
           .ForEach(n => Console.WriteLine(n));

上の例は、-1 を 10回表示する例です。
次の例は、-1の要素を100個含む、int型の配列を作成しています。

 int[] array = Enumerable.Repeat(-1, 100).ToArray();
 foreach (var n in array)
     Console.WriteLine(n);

Repeatで生成するシーケンスの型は整数に限りませんので、

 Random rnd = new Random();
 Enumerable.Repeat(rnd, 10)
           .Select(r => r.Next(100))
           .ToList()
           .ForEach(n => Console.WriteLine(n));

なんていうコードも書けます。このコードの動きを理解できない場合は、
実際に動かしてみてくささい。

■──────────────────────────────────
■Empty

Empty 演算子は、指定された型の空のシーケンスを返します。

IEnumerable<Product> noProducts = Enumerable.Empty<Product>();

IEnumerable<T>を受け取るメソッドに空のシーケンスを渡す際に利用できます。
また、IEnumerable<T>を返すメソッド内で、空のシーケンスを返す場合などに
も利用できると思います。


┌─┬─────────────────────────┬─┬─┬─┐
│☆│ C#プログラミングレッスン  (ぼぼ週刊）            │＿│□│×│
├─┴─────────────────────────┴─┴─┴─┤
│ Published by Gushwell.                                           │
│ Copyright (C) 2004-2007 Gushwell All rights reserved.            │
│ Microsoft MVP Visual Developer - Visual C#(Apr 2005 - Mar 2009)  │
│-------------------- Gushwell's Page ---------------------------- │
│ 窓際プログラマーの独り言  ：http://blog.livedoor.jp/gushwell/    │
│ 窓際プログラマーの読書三昧：http://gushwell.jugem.jp/            │
│ Gushwell's C# Programing Page：http://gushwell.ifdef.jp/         │
│ C#デザインパターン :                                             │
│  『増補改訂版Java言語で学ぶデザインパターン入門 / 結城 浩(著)』  │
│   のサンプルコードをC#に移植したものを掲載しています。           │
│   移植後のコードの公開は、結城氏の了解を得ています。             │
│   http://gushwell.ifdef.jp/dp/csdpindex.html                     │
└─────────────────────────────────┘
