┏━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━┳━┳━┓
┃☆┃ C#プログラミングレッスン                         ┃＿┃□┃×┃
┣━┻━━━━━━━━━━━━━━━━━━━━━━━━━┻━┻━┻━┫
┃ C#3.0-LINQ事始め                                           No.162┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

お待たせしました。今回から、LINQ についての連載を始めようと思います。

■──────────────────────────────────
■ LINQとは

LINQとは「Language Integrated Query」の略で、日本語に訳せば「言語に統
合されたクエリ」といったところでしょうか。

Visual Studio 2008から新しく導入された機能で、このLINQをサポートするた
めに、C# の仕様も拡張されており、今まで説明してきたC#3.0の新機能がLINQ
と密接に関わっています。

まだ理解が不足していると思う方は、再度バックナンバーで復習をしておいて
くださいね。

LINQを使うと、オブジェクト、データベース、XMLなど様々なデータに対して
標準化された方法で、問い合わせ処理が可能になります。

まずは、オブジェクトを扱う、LINQ to Objects について説明したいと思いま
す。「LINQ to SQL」については、当メルマガで扱うかどうかはまだ未定です。
 # テキストだけで説明するのは、かなり大変なので。

■──────────────────────────────────
■ 簡単なLINQのコード

LINQってどんな感じなのかを掴んでもらうために、簡単な例を示します。
今回は、細かな説明は省きます。雰囲気がわかればそれでOKです。

 using System;
 using System.Collections.Generic;
 using System.Linq;
 ...

  string[] names = { 
       "Microsoft", "Apple", "IBM", "Google", "HP", "Dell 
  };

  IEnumerable<string> query = names.Select(s => s.ToLower());
  foreach (string s in query)
      Console.WriteLine(s);

なんとなく、前回(No161)示した

 var list2 = list.ConvertAll(s => s.ToLower());
 list2.ForEach(s => Console.WriteLine(s));

と似ていますね。前回は、List<T>に対する操作でしたが、LINQ to Objectの
コードは、IEnumerable<T>に対する操作となっています。
これがLINQの肝ですので、是非頭に入れておいてください。

では、簡単なコードの解説を。

まず、

 names.Select(s => s.ToLower());

の部分です。

Selectメソッドは、拡張メソッドで、IEnumerable<T>インターフェースに対し
て拡張されています。
このコードは、

  namesの要素を一つ一つ取り出し、その要素が s として渡ってくるので、  
  それをToLower()で小文字にせよ

という意図だと思ってください。
ラムダ式を使っている点も注目です。

この戻り値を、IEnumerable<string> の変数 queryに入れています。

Selectメソッドの戻り値は、IEnumerable<T>型なので、foreachで順に（小文
字にした結果を）取り出すことができます。プログラムを実行すると、

 microsoft
 apple
 ibm
 google
 hp
 dell

と表示されます。

■──────────────────────────────────
■クエリ式

C#3.0では、上記の式を、クエリ式というSQLに似た構文で書き換えることが可
能です。

 IEnumerable<string> query = from s in names
                             select s.ToLower();
 foreach (string s in query)
     Console.WriteLine(s);

varを使えば、先ほどのコードは、

 // 拡張メソッド方式
 var query = names.Select(s => s.ToLower());
 foreach (string s in query)
     Console.WriteLine(s);

 // クエリ式
 var query = from s in names
             select s.ToLower();
 foreach (var s in query)
     Console.WriteLine(s);

とより簡潔に書くことができます。

┌─┬─────────────────────────┬─┬─┬─┐
│☆│ C#プログラミングレッスン  (ぼぼ週刊）            │＿│□│×│
├─┴─────────────────────────┴─┴─┴─┤
│ Published by Gushwell.                                           │
│ Copyright (C) 2004-2007 Gushwell All rights reserved.            │
│ Microsoft MVP Visual Developer - Visual C#(Apr 2005 - Mar 2009)  │
│-------------------- Gushwell's Page ---------------------------- │
│ 窓際プログラマーの独り言  ：http://blog.livedoor.jp/gushwell/    │
│ 窓際プログラマーの読書三昧：http://gushwell.jugem.jp/            │
│ Gushwell's C# Programing Page：http://gushwell.ifdef.jp/         │
│ C#デザインパターン :                                             │
│  『増補改訂版Java言語で学ぶデザインパターン入門 / 結城 浩(著)』  │
│   のサンプルコードをC#に移植したものを掲載しています。           │
│   移植後のコードの公開は、結城氏の了解を得ています。             │
│   http://blog.livedoor.jp/gushwell/archives/50333227.html        │
└─────────────────────────────────┘