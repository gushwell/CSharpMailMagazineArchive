┏━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━┳━┳━┓
┃☆┃ C#プログラミングレッスン                         ┃＿┃□┃×┃
┣━┻━━━━━━━━━━━━━━━━━━━━━━━━━┻━┻━┻━┫
┃ C#3.0-LINQ 要素演算子                                      No.171┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

■──────────────────────────────────
■First, FirstOrDefault

First演算子は、先頭の要素を返します。

 var names = new[] { 
             "IBM", "Microsoft", "Google", "Oracle", "HP", "Adobe" };
 var name = names.Where(n => n.Length > 8)
                 .First();
 Console.WriteLine(name);

この結果は、

 Microsoft

となります。

では、

 var name = names.Where(n => n.Length > 20)
                 .First();

とした場合どうなるでしょうか？この場合は、該当する要素が存在しないため、
System.InvalidOperationException 例外が発生してしまいます。この例外を
回避するには、FirstOrDefaultを使います。

 var name = names.Where(n => n.Length > 20)
                 .FirstOrDefault();

とすれば、default(string)  つまり、nullが name変数に代入されます。

■──────────────────────────────────
■Last、LastOrDefault

Last演算子は、末尾の要素を返します。同様に、LastOrDefaultは、末尾の要
素を返しますが、要素が見つからなかった場合は、default値を返します。

 var names = new[] { 
             "IBM", "Microsoft", "Google", "Oracle", "HP", "Adobe" };
 var name = names.OrderBy(n => n.Length)
                 .Last();
 Console.WriteLine(name);

のコードでは、

 Microsoft

が表示されます。


■──────────────────────────────────
■Single,  SingleOrDefault

Singleは、シーケンスの単一要素を返します。

通常、LINQのクエリの結果は、IEnumerable<T>ですが、この要素が一つだった
場合に、その要素が返ります。

 var names = new[] { 
             "IBM", "Microsoft", "Google", "Oracle", "HP", "Adobe" };
 var name = names.Where(n => n.Length == 5)
                 .Single();
 Console.WriteLine(name);

の結果は、

 Adobe

となります。

なお、上記のクエリ部分は、

 // 引数にラムダ式で条件を指定できます。
 var name = names.Single(n => n.Length == 5);

と同じ結果となります。

条件の部分を n.Length == 6 とすると、条件に一致する要素が複数あるため、
例外が発生します。
 ※ First演算子との違いはここにあります。

また、n.Length == 20 だと、合致する要素がないため、例外が発生します。
SingleOrDefaultという演算子もあります。この演算子は、要素がみつからな
かった時に、default値を返します。
ただし、複数要素がある場合は、例外が発生します。


■──────────────────────────────────
■ElementAt,  ElementAtOrDefault

ElementAt演算子は、シーケンス内の指定インデックスの位置にある要素を返
します。

 var names = new[] { 
             "IBM", "Microsoft", "Google", "Oracle", "HP", "Adobe" };
 var name = names.OrderBy(n => n.Length)
                 .ElementAt(2);
 Console.WriteLine(name);

では、文字列の短い順に並べ替えられ、インデックス == 2 の位置にある

 Adobe

が表示されます。
ElementAtOrDefaultという演算子もあります。もう説明は不要ですね。


■──────────────────────────────────
■おまけ、

今回出てきた default値ってなんでしょうか？ default値は、defalut(型名)
で求められます。
参照型の場合には null を返し、数値の値型にはゼロを返します。
構造体の場合は、各メンバーは、ゼロまたは null (値型か参照型かによって
変わります) に初期化されたものが返ります。
ちなみに、規定値を求めるdefaultキーワードは、C#2.0で導入されたもので、
ジェネリッククラスを定義する際に利用されることが多いです。

 public class GenericClass<T> {
    ...
 }

といったクラスの中で、規定値を記述したいけど、型 T の規定値を 0 とか、
null とかに限定できないので、

  T temp = default(T)；

と書くことで、Tが値型でも参照型でも通用するコードを書くことができるよ
うになっています。


┌─┬─────────────────────────┬─┬─┬─┐
│☆│ C#プログラミングレッスン  (ぼぼ週刊）            │＿│□│×│
├─┴─────────────────────────┴─┴─┴─┤
│ Published by Gushwell.                                           │
│ Copyright (C) 2004-2007 Gushwell All rights reserved.            │
│ Microsoft MVP Visual Developer - Visual C#(Apr 2005 - Mar 2009)  │
│-------------------- Gushwell's Page ---------------------------- │
│ 窓際プログラマーの独り言  ：http://blog.livedoor.jp/gushwell/    │
│ 窓際プログラマーの読書三昧：http://gushwell.jugem.jp/            │
│ Gushwell's C# Programing Page：http://gushwell.ifdef.jp/         │
│ C#デザインパターン :                                             │
│  『増補改訂版Java言語で学ぶデザインパターン入門 / 結城 浩(著)』  │
│   のサンプルコードをC#に移植したものを掲載しています。           │
│   移植後のコードの公開は、結城氏の了解を得ています。             │
│   http://blog.livedoor.jp/gushwell/archives/50333227.html        │
└─────────────────────────────────┘
