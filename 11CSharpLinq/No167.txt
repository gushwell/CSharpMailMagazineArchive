┏━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━┳━┳━┓
┃☆┃ C#プログラミングレッスン                         ┃＿┃□┃×┃
┣━┻━━━━━━━━━━━━━━━━━━━━━━━━━┻━┻━┻━┫
┃ C#3.0-LINQ Where演算子                                     No.167┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

さて、今回から、LINQが用意している標準クエリ演算子について、順に解説し
ていきます。

■──────────────────────────────────
■前置き

当連載では、演算子の詳細な解説ではなく、「簡単なコード例をみることで、
クエリ演算子の使い方を理解する」という方針のもと、説明をしてゆこうと思
います。

LINQ to Object（C#のオブジェクトに対するクエリ）を例にとって説明します
が、LINQ to SQLでもそのまま利用できますので、ここで得られた知識は、そ
のままデータベースの操作でも役立つと思います。

提示するコード片では、GetCustomers(), GetProducts()などのメソッドを利
用していきます。
実際に動作を確認したい場合には、以下のURLからNorthwindObjects.cs とい
うファイルをダウンロードし、プロジェクトに追加してください。

http://gushwell.ifdef.jp/mailmag/NorthwindObjects.cs

ここにNorthwindObjectsというstaticクラスが定義してあります。利用する際
は、

using NorthwindClass;

をソースの先頭に追加してください。


■──────────────────────────────────
■クエリ演算子とは

クエリ演算子は、演算子といっても、System.LINQ.Enumerable静的クラスや
System.LINQ.Queryable静的クラスに定義されている拡張メソッドのことです。
クエリ演算子を使用すると、データに対して走査、フィルタ、および射影の各
操作を実行できます。

この拡張メソッドのなかのいくつか(Where,Selectなど)は、クエリ式に変換可
能なものとなっています。しかし、すべてがクエリ式に変換できるわけではあ
りません。
クエリ式に変換できるものについては、できるだけ、クエリ式のコード例も示
していきます。

標準クエリ演算子の操作対象のデータを、"シーケンス" と呼びます。ある型 
T に対してインターフェイス IEnumerable<T> を実装するオブジェクトはすべ
て、その型のシーケンスと見なされます。当連載で、「シーケンス」という用
語が出てきたら、IEnumerable<T> を実装する列挙可能なオブジェクトのこと
だと考えてください。
シーケンスの最も身近なものは、配列やList<T>のオブジェクトでしょうか。


前置きが長くなりましたが、本題に入りましょう。今回はWhere演算子につい
てです。

■──────────────────────────────────
■Where演算子

Where演算子は、引数に渡されたDelegateの戻り値が trueのものだけをシーケ
ンスから列挙します。戻り値は、Where演算子の戻り値はIEnumerable<T>です。

２つのほど、例を。

 // UnitPriceの値が40以上のProductを求める。
 var products = NorthwindObjects.GetProducts();
 IEnumerable<Product> query = products.Where(p => p.UnitPrice >= 40);
 foreach (var p in query) {
     Console.WriteLine("{0} : {1}", p.ProductName, p.UnitPrice);
 }


 // UnitsInStockが0より大きく、かつUnitPriceの値が30より大きい
 // Productを求める。
 var products = NorthwindObjects.GetProducts();
 IEnumerable<Product> query = products.Where(
     p => p.UnitsInStock > 0 && p.UnitPrice > 30.0
 );
 foreach (var p in query) {
     Console.WriteLine("{0} : {1}", p.ProductName, p.UnitPrice);
 }

Whereメソッドを利用しているステートメントは、クエリ式を使うと以下のよ
うに書くことができます。

 var query = from p in products
             where p.UnitPrice >= 40
             select p;

 var query = from p in products
             where p.UnitsInStock > 0 && p.UnitPrice > 30.0
             select p;

┌─┬─────────────────────────┬─┬─┬─┐
│☆│ C#プログラミングレッスン  (ぼぼ週刊）            │＿│□│×│
├─┴─────────────────────────┴─┴─┴─┤
│ Published by Gushwell.                                           │
│ Copyright (C) 2004-2007 Gushwell All rights reserved.            │
│ Microsoft MVP Visual Developer - Visual C#(Apr 2005 - Mar 2009)  │
│-------------------- Gushwell's Page ---------------------------- │
│ 窓際プログラマーの独り言  ：http://blog.livedoor.jp/gushwell/    │
│ 窓際プログラマーの読書三昧：http://gushwell.jugem.jp/            │
│ Gushwell's C# Programing Page：http://gushwell.ifdef.jp/         │
│ C#デザインパターン :                                             │
│  『増補改訂版Java言語で学ぶデザインパターン入門 / 結城 浩(著)』  │
│   のサンプルコードをC#に移植したものを掲載しています。           │
│   移植後のコードの公開は、結城氏の了解を得ています。             │
│   http://blog.livedoor.jp/gushwell/archives/50333227.html        │
└─────────────────────────────────┘
