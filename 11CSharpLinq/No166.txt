┏━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━┳━┳━┓
┃☆┃ C#プログラミングレッスン                         ┃＿┃□┃×┃
┣━┻━━━━━━━━━━━━━━━━━━━━━━━━━┻━┻━┻━┫
┃ C#3.0-LINQ拡張メソッド (2)                                 No.166┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

■──────────────────────────────────
■Where、Select拡張メソッドを自作してみる

さて、前回の実験だけでは面白くないので、MyEnumerableクラスのMyWhere、
MySelectメソッドの名前を Where、Selectに変えてコンパイルしてみてくださ
い。
このときに、MyEnumerable型は、呼び出すメソッドと同じ名前空間に入れてく
ださい。

今回は、読むだけではなく、是非実行していただきたいので、コード全体を示
します。

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace LINQ {
    class Program {
        static void Main(string[] args) {
            var nums = Enumerable.Range(1, 10);
            var q = nums.Where(n => n % 3 == 0)
                        .Select(n => n * 2);
            foreach (var n in q)
                Console.WriteLine(n);
        }

    }
    static class MyEnumerable {
        public static IEnumerable<TSource> Where<TSource>(
                         this IEnumerable<TSource> source,
                         Func<TSource, bool> predicate) {
            Console.WriteLine("Where Start");
            foreach (var x in source) {
                Console.WriteLine("Where {0}", x);
                if (predicate(x))
                    yield return x;
            }
            Console.WriteLine("Where end");
        }
        public static IEnumerable<TResult> Select<TSource, TResult>(
                         this IEnumerable<TSource> source,
                         Func<TSource, TResult> selector) {
            Console.WriteLine("Select Start");
            foreach (var x in source) {
                Console.WriteLine("Select {0}", x);
                yield return selector(x);
            }
            Console.WriteLine("Select end");
        }
    }
}

では、実行してみましょう。
コンパイルも通り、

  var q = nums.Where(n => n % 3 == 0)
              .Select(n => n * 2);

のクエリ式において、独自に作成したWhere、Selectメソッドが呼ばれている
ことが確認できると思います。

以下、その結果です。

 Select Start
 Where Start
 Where 1
 Where 2
 Where 3
 Select 3
 6
 Where 4
 Where 5
 Where 6
 Select 6
 12
 Where 7
 Where 8
 Where 9
 Select 9
 18
 Where 10
 Where end
 Select end

ここで、重要なのは、Where, Selectが呼ばれている順番です。
where がすべて終わってから、Selectが呼ばれ、最後に、Console.WriteLine
が呼び出されているのでは無い、という点に注目してください。

中でどのようなことが行なわれているかですが、
1. foreachで、クエリから n を取り出そうとする。
2．Selectメソッドが呼ばれ、Whereメソッドに「データ頂戴！」とお願いす
   る。
3. Whereメソッドは、numsから順にデータを取り出し、該当するデータが見つ
   かったら、Wehreメソッドにその値を返す。
4. Selectメソッドは、2倍した結果を返す。
5. foreachの n  に代入され、Console.WriteLineが呼ばれる。
6. 1に戻って、データがなくなるまで繰り返す。

といった感じでしょうか。


■──────────────────────────────────
■クエリ式から独自拡張メソッドを呼び出す

では、
  var q = nums.Where(n => n % 3 == 0)
              .Select(n => n * 2);
の部分をクエリ式に変えてみましょう。

 var nums = Enumerable.Range(1, 10);
 var q = from n in nums
         where n % 3 == 0   // MyEnumerableクラスのWhereを呼ぶ
         select n * 2;      // MyEnumerableクラスのSelectを呼ぶ
 foreach (var n in q)
     Console.WriteLine(n);

このコードもコンパイルでき、独自の Where, Select メソッドが呼ばれてい
ることが確認できます。

実際の開発では、標準のWhere,Selectを置き換えることは無いと思われますが、
独自のクエリ演算子（拡張メソッド）を作成する場合に、この知識が生きてく
ると思います。

┌─┬─────────────────────────┬─┬─┬─┐
│☆│ C#プログラミングレッスン  (ぼぼ週刊）            │＿│□│×│
├─┴─────────────────────────┴─┴─┴─┤
│ Published by Gushwell.                                           │
│ Copyright (C) 2004-2007 Gushwell All rights reserved.            │
│ Microsoft MVP Visual Developer - Visual C#(Apr 2005 - Mar 2009)  │
│-------------------- Gushwell's Page ---------------------------- │
│ 窓際プログラマーの独り言  ：http://blog.livedoor.jp/gushwell/    │
│ 窓際プログラマーの読書三昧：http://gushwell.jugem.jp/            │
│ Gushwell's C# Programing Page：http://gushwell.ifdef.jp/         │
│ C#デザインパターン :                                             │
│  『増補改訂版Java言語で学ぶデザインパターン入門 / 結城 浩(著)』  │
│   のサンプルコードをC#に移植したものを掲載しています。           │
│   移植後のコードの公開は、結城氏の了解を得ています。             │
│   http://blog.livedoor.jp/gushwell/archives/50333227.html        │
└─────────────────────────────────┘