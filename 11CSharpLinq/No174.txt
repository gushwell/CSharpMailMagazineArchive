┏━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━┳━┳━┓
┃☆┃ C#プログラミングレッスン                         ┃＿┃□┃×┃
┣━┻━━━━━━━━━━━━━━━━━━━━━━━━━┻━┻━┻━┫
┃ C#3.0-LINQ 結合演算子(1)                                   No.174┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

今回は、join演算子についてじっくりと見ていきましょう。
join演算子は、異なる２つのシーケンスの要素どうしを関連付けます。いわゆ
る SQLの内部結合を実現するための演算子と同等の機能だと考えていただいて
問題ありません。

※ サンプルコードに出てくる NorthwindObjects.GetOrders() メソッドは、
   http://gushwell.ifdef.jp/magArchive.html のページ右下からダウンロー
   ドできます。

■──────────────────────────────────
■joinを使わない例

通常、C#のオブジェクトの場合は、２つのクラス間で関連を保持していること
が多いと思われます。
つまり、結合がデータ構造として表現されているわけです。この場合は、join
演算子を使わなくても同等の処理が可能です。

実際にコードで見てみましょう。

+----------+      * +-------+
| Customer | -----> | Order |
+----------+        +-------+ 

という関係があり、

 public class Customer {
     public string CustomerID { get; set; }
     public string CompanyName { get; set; }
     ...
     public IEnumerable<Order> Orders { get; set; }
 }

 public class Order {
     public string CustomerID { get; set; }
     public int OrderID { get; set; }
     public decimal Total { get; set; }
     public DateTime OrderDate { get; set; }
 }

と定義されているとします。

     public IEnumerable<Order> Orders { get; set; }

は、

     public List<Order> Orders { get; set; }

と定義されていると考えてもらってもかまいません。

このとき、Customerに対する注文を列挙するコードは以下のようになります。
この例では、CountryがUSAであるCustomerだけを対象にしています。

 var customers = NorthwindObjects.GetCustomers();
 var result = from c in customers
              where c.Country == "USA"
              select c;
 foreach (var p in result) 
     foreach (var o in p.Orders) 
         Console.WriteLine("{0} : {1} : {2}", 
              p.CompanyName, o.OrderDate, o.Total);

  ※ USAにある企業に対して、何時、いくらの注文をしたのかを一覧表示して
     います。

すでに、CustomerとOrderは関連付けされていますので、join演算子を使う必
要がありません。


■──────────────────────────────────
■join

では、Customerクラスに、Orders メンバーが存在しない場合はどうでしょう
か。この場合は、joinの出番となります。

 var customers = NorthwindObjects.GetCustomers();
 var orders = NorthwindObjects.GetOrders();
 var result = from c in customers
              where c.Country == "USA"
              join o in orders on c.CustomerID equals o.CustomerID
              select new { c.CompanyName, o.OrderDate, o.Total };
 foreach (var p in result)
     Console.WriteLine("{0} : {1} : {2}",
         p.CompanyName, p.OrderDate, p.Total);

注文オブジェクトにある CustomerIDと顧客オブジェクトの CustomerIDを結び
つけています。

   join o in orders on c.CustomerID equals o.CustomerID

の記述で CustomerIDが同じCustomerとOrderを結合しています。

これを拡張メソッド方式で書くと、以下のようなコードとなります。

 var customers = NorthwindObjects.GetCustomers();
 var orders = NorthwindObjects.GetOrders();
 var result = customers.Where(c => c.Country == "USA")
                  .Join(orders, c => c.CustomerID, o => o.CustomerID,
                        (c, o) => new { 
                            c.CompanyName, o.OrderDate, o.Total });
 foreach (var p in result)
     Console.WriteLine("{0} : {1} : {2}", 
         p.CompanyName, p.OrderDate, p.Total);

Join演算子の記述が冗長になってしまいますね。

※ コードを70桁に収めるため、不必要に改行していますが、ご了承ください。

┌─┬─────────────────────────┬─┬─┬─┐
│☆│ C#プログラミングレッスン  (ぼぼ週刊）            │＿│□│×│
├─┴─────────────────────────┴─┴─┴─┤
│ Published by Gushwell.                                           │
│ Copyright (C) 2004-2007 Gushwell All rights reserved.            │
│ Microsoft MVP Visual Developer - Visual C#(Apr 2005 - Mar 2009)  │
│-------------------- Gushwell's Page ---------------------------- │
│ 窓際プログラマーの独り言  ：http://blog.livedoor.jp/gushwell/    │
│ 窓際プログラマーの読書三昧：http://gushwell.jugem.jp/            │
│ Gushwell's C# Programing Page：http://gushwell.ifdef.jp/         │
│ C#デザインパターン :                                             │
│  『増補改訂版Java言語で学ぶデザインパターン入門 / 結城 浩(著)』  │
│   のサンプルコードをC#に移植したものを掲載しています。           │
│   移植後のコードの公開は、結城氏の了解を得ています。             │
│   http://blog.livedoor.jp/gushwell/archives/50333227.html        │
└─────────────────────────────────┘
