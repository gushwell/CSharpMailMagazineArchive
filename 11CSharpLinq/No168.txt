┏━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━┳━┳━┓
┃☆┃ C#プログラミングレッスン                         ┃＿┃□┃×┃
┣━┻━━━━━━━━━━━━━━━━━━━━━━━━━┻━┻━┻━┫
┃ C#3.0-LINQ Select演算子                                    No.168┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

■──────────────────────────────────
■Select演算子

Select演算子は、新たなシーケンスを生成します。

今までは、

 select p

という記述で、クエリ対象となるシーケンスの要素と同じ型を返していたわけ
ですが、別の型のシーケンスを返すこともできます。

２つほど例を。

 // すべての製品名を取り出す
 var products = NorthwindObjects.GetProducts();
 IEnumerable<string> query = products.Select(p => p.ProductName);
 foreach (var name in query) {
     Console.WriteLine(name);
 }

 // 条件にあった製品名と単価だけを取り出す
 var products = NorthwindObjects.GetProducts();
 var query = products
             .Where(p => p.UnitPrice > 40)
             .Select(p => new { p.ProductName, p.UnitPrice });
 foreach (var p in query) {
     Console.WriteLine("{0} {1}", p.ProductName, p.UnitPrice);
 }


2つ目の例では、

new { p.ProductName, p.UnitPrice }

と匿名クラスを使っていることに注目してください。
この匿名クラスのプロパティ名は、ProductName と UnitPriceとなります。
foreach文では、匿名クラスのオブジェクトを一つずつ取り出していますので、

 foreach (Product p in query) {

と、Productのオブジェクトを取り出すことはできません。匿名クラスのオブ
ジェクトを取り出すときには、必ず var を使う必要があります。

これをクエリ式で記述すると、以下のようになります。

 var query = from p in products
             select p.ProductName;


 var query = from p in products
             where p.UnitPrice > 40
             select new { p.ProductName, p.UnitPrice };


■──────────────────────────────────
■匿名クラスの生成で演算を行なう

おまけ、こんな書き方もできます。

 var products = NorthwindObjects.GetProducts();
 var query = from p in products
             where p.SupplierID == 2
             select new {
                 Name = p.ProductName,
                 StockPrice = p.UnitsInStock * p.UnitPrice
             };
 foreach (var p in query) {
     Console.WriteLine("{0} {1}", p.Name, p.StockPrice);
 }


製品名と「p.UnitsInStock * p.UnitPrice」の結果をプロパティに持つ匿名ク
ラスのオブジェクトを返しています。
こちらの例では、プロパティ名を明示的に示しています。プロパティ名は、
NameとStockPrice です。

次は、Selectを２つ使った例です。

 IEnumerable<int> indices = products
                           .Select((product, index) => 
                               new { product, index } )
                           .Where(x => x.product.UnitPrice >= 40)
                           .Select(x => x.index);

Selectは、

public static IEnumerable<TResult> Select<TSource, TResult>(
    this IEnumerable<TSource> source,
    Func<TSource, int, TResult> selector
)

という別のオーバーロードメソッドが定義されています。これを使えば、
何番目のデータかを知ることができます。
最初のSelectで、(何番目の商品かを示す）インデックスを付加し、UnitPrice
が40 以上の商品のインデックスを取得しています。

Where(x => ...)

の x の型は、new { Product, Index }で作成された匿名クラスのオブジェク
トであることに注意してください。


┌─┬─────────────────────────┬─┬─┬─┐
│☆│ C#プログラミングレッスン  (ぼぼ週刊）            │＿│□│×│
├─┴─────────────────────────┴─┴─┴─┤
│ Published by Gushwell.                                           │
│ Copyright (C) 2004-2007 Gushwell All rights reserved.            │
│ Microsoft MVP Visual Developer - Visual C#(Apr 2005 - Mar 2009)  │
│-------------------- Gushwell's Page ---------------------------- │
│ 窓際プログラマーの独り言  ：http://blog.livedoor.jp/gushwell/    │
│ 窓際プログラマーの読書三昧：http://gushwell.jugem.jp/            │
│ Gushwell's C# Programing Page：http://gushwell.ifdef.jp/         │
│ C#デザインパターン :                                             │
│  『増補改訂版Java言語で学ぶデザインパターン入門 / 結城 浩(著)』  │
│   のサンプルコードをC#に移植したものを掲載しています。           │
│   移植後のコードの公開は、結城氏の了解を得ています。             │
│   http://blog.livedoor.jp/gushwell/archives/50333227.html        │
└─────────────────────────────────┘
