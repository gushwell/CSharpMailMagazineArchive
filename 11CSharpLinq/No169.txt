┏━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━┳━┳━┓
┃☆┃ C#プログラミングレッスン                         ┃＿┃□┃×┃
┣━┻━━━━━━━━━━━━━━━━━━━━━━━━━┻━┻━┻━┫
┃ C#3.0-LINQ 順序付け演算子                                  No.169┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

今回は、シーケンスからデータを取り出す順序を指定する演算子の説明です。

■──────────────────────────────────
■OrderBy

OrderBy演算子は、列挙するシーケンスの順序を設定します。
以下のコードは、在庫の少ない順に商品を取り出す例です。

 var products = NorthwindObjects.GetProducts();
 var orderedProducts = products.OrderBy(p => p.UnitsInStock);
 foreach (var p in orderedProducts)
     Console.WriteLine("{0} {1}", p.ProductName, p.UnitsInStock);

これを、クエリ式にすると、

 var orderedProducts = from p in products
                       orderby p.UnitsInStock 
                       select p;

逆順にするには、OrderByDescending  演算子を使います。

 var orderedProducts = products.OrderByDescending(
                                     p => p.UnitsInStock);

クエリ式だと

 var orderedProducts = from p in products
                       orderby p.UnitsInStock descending
                       select p;

と記述できます。


■──────────────────────────────────
■ThenBy, ThenByDescending 

ソートキーを複数指定する場合に、ThenBy, ThenByDescending演算子を使いま
す。
以下のコードは、第1キーをCategoryID、第2キー（逆順）をUnitPrice, 第3キ
ーをProductNameにして、順序付けを行っています。

 var products = NorthwindObjects.GetProducts();
 var orderedProducts = products
                      .OrderBy(p => p.CategoryID)
                      .ThenByDescending(p => p.UnitPrice)
                      .ThenBy(p => p.ProductName);
 foreach (var p in orderedProducts)
     Console.WriteLine("{0} {1} {2}", 
                        p.CategoryID, p.UnitPrice, p.ProductName);


これをクエリ式で書くと

 var orderedProducts = from p in products
                       orderby p.CategoryID, 
                               p.UnitPrice descending, 
                               p.ProductName
                       select p;

となります。thenby といったキーワードは出てきません。カンマで区切るだ
けです。

なお、OrderBy演算子は、第2引数に、IComparer<TKey> を受け取るoverloadメ
ソッドが存在します。
この例を以下に示します。大文字、小文字の違いを無視して、順序付けを行っ
ています。

 var orderedProducts 
          = products
           .Where(p => p.UnitsInStock > 100)
           .OrderBy(p => p.ProductName,
                    StringComparer.CurrentCultureIgnoreCase);
 foreach (var p in orderedProducts)
     Console.WriteLine("{0} {1} {2}", 
                       p.CategoryID, p.UnitPrice, p.ProductName);

■──────────────────────────────────
■Reverse

Reverse演算子は、その名の通り、逆順に要素を列挙します。
今までの演算子は、すべて、クエリ式に変換することができましたが、この演
算子は、クエリ式に置き換えることはできません。
以下のコードは、長さ 5 以上の文字列を抜き出し、逆順にとりだすものです。

 string[] digits = { "zero", "one", "two", "three", "four", "five", 
                     "six", "seven", "eight", "nine" };

 var reversed = (from d in digits
                 where d.Length >= 5
                 select d).Reverse();

 foreach (var d in reversed)
     Console.WriteLine(d);


┌─┬─────────────────────────┬─┬─┬─┐
│☆│ C#プログラミングレッスン  (ぼぼ週刊）            │＿│□│×│
├─┴─────────────────────────┴─┴─┴─┤
│ Published by Gushwell.                                           │
│ Copyright (C) 2004-2007 Gushwell All rights reserved.            │
│ Microsoft MVP Visual Developer - Visual C#(Apr 2005 - Mar 2009)  │
│-------------------- Gushwell's Page ---------------------------- │
│ 窓際プログラマーの独り言  ：http://blog.livedoor.jp/gushwell/    │
│ 窓際プログラマーの読書三昧：http://gushwell.jugem.jp/            │
│ Gushwell's C# Programing Page：http://gushwell.ifdef.jp/         │
│ C#デザインパターン :                                             │
│  『増補改訂版Java言語で学ぶデザインパターン入門 / 結城 浩(著)』  │
│   のサンプルコードをC#に移植したものを掲載しています。           │
│   移植後のコードの公開は、結城氏の了解を得ています。             │
│   http://blog.livedoor.jp/gushwell/archives/50333227.html        │
└─────────────────────────────────┘
