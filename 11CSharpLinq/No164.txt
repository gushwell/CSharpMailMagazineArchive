┏━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━┳━┳━┓
┃☆┃ C#プログラミングレッスン                         ┃＿┃□┃×┃
┣━┻━━━━━━━━━━━━━━━━━━━━━━━━━┻━┻━┻━┫
┃ C#3.0-LINQ遅延評価                                         No.164┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

■──────────────────────────────────
■クエリ式はいつ実行されるのか

ちょっと面白い実験をしてみましょう。実験するコードを以下に示します。
結果がどうなるかを想像してみてください。

 string[] names = { 
     "Microsoft", "Apple", "IBM", "Google", "HP" , "Dell" };
 var query = from s in names
             where s.Length > 5
             orderby s
             select s;
 foreach (var item in query)     
     Console.WriteLine(item);
 Console.WriteLine("------");

 names[1] = "Machintosh";       // ★1
 // 再度 foreachで取り出す。
 foreach (var item in query)    // ★2
     Console.WriteLine(item);


注目すべきは、★1の行ですね。クエリ式を変数queryに代入後に、配列names
の要素を書き換えています。その後、★2 の foreachで、queryの結果を取り
出しています。

結果は、

 Google
 Microsoft
 ------
 Google
 Machintosh
 Microsoft

となります。

なんと、２つの結果が違っています。
これからわかることは、

 var query = from s in names
             where s.Length > 5
             orderby s
             select s;

というステートメントが実行された時に、クエリそのものが動作しその結果が、
変数queryに代入されているわけではないということです。もしこのときにク
エリが動くとすれば、２つは同じ結果になるはずですが、そうなっていません。

これは、実際に値が必要になった時に、クエリ式が実行されていることを示し
ています。
これを「遅延評価」と言います。拡張メソッドでも「遅延評価」が有効ですの
で、ご自身で確認してみてください。


■──────────────────────────────────
■明示的にクエリを動かす

これまで見てきたように、プログラムの複数の個所で、foreachを使いクエリ
の結果を取り出そうとした場合は、遅延評価の結果、同じクエリが実行される
ことになります。
当然コストがかかります。また、LINQ to SQLの場合は、その間にデータベー
スが更新され、２つの結果が一致しないという可能性もあり得ます。
そんなときは、ToList()メソッド(ToArray()でもOK)を使い、クエリを明示的
に実行させることができます。
以下のコードを見てください。

 var query = from s in names
             where s.Length > 5
             orderby s
             select s;
 var result = query.ToList();  // ここでクエリを実行して、Listに変換

 foreach (string item in result)
     Console.WriteLine(item);
 Console.WriteLine("------");

 names[1] = "Machintosh";
 foreach (string item in result)
     Console.WriteLine(item);

こうすれば、結果は、

 Google
 Microsoft
 ------
 Google
 Microsoft

となり、同じ結果を得ることができます。

┌─┬─────────────────────────┬─┬─┬─┐
│☆│ C#プログラミングレッスン  (ぼぼ週刊）            │＿│□│×│
├─┴─────────────────────────┴─┴─┴─┤
│ Published by Gushwell.                                           │
│ Copyright (C) 2004-2007 Gushwell All rights reserved.            │
│ Microsoft MVP Visual Developer - Visual C#(Apr 2005 - Mar 2009)  │
│-------------------- Gushwell's Page ---------------------------- │
│ 窓際プログラマーの独り言  ：http://blog.livedoor.jp/gushwell/    │
│ 窓際プログラマーの読書三昧：http://gushwell.jugem.jp/            │
│ Gushwell's C# Programing Page：http://gushwell.ifdef.jp/         │
│ C#デザインパターン :                                             │
│  『増補改訂版Java言語で学ぶデザインパターン入門 / 結城 浩(著)』  │
│   のサンプルコードをC#に移植したものを掲載しています。           │
│   移植後のコードの公開は、結城氏の了解を得ています。             │
│   http://blog.livedoor.jp/gushwell/archives/50333227.html        │
└─────────────────────────────────┘