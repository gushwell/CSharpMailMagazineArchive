■━ [C#プログラミングレッスン] ━━━━━━━━━━━━━━━ No.307 ━□

「レシピ編」-- 日付の操作 (2)
                                                           by Gushwell  
□━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━■

今日のコード


1. 月末日を求めるには
2. 指定した日が第何週かを求めるには
3. 指定した月の第n日曜日を求めるには


■□───────────────────────────────────
■□ 月末日を求めるには

DaysInMonth静的メソッドを使うことで、当該月が何日あるかがわかりますので、
この値を使い、月末日を求めることができます。
月末日もDateTime型として求めています。

DateTime today = DateTime.Today;
int day = DateTime.DaysInMonth(today.Year, today.Month);
DateTime endOfMonth = new DateTime(today.Year, today.Month, day);
Console.WriteLine(endOfMonth);


■□───────────────────────────────────
■□ 指定した日が第何週かを求めるには

指定した日が第何週の日なのかを求めるメソッドを示します。
一週間は日曜日から始まるものとします。

static int NthWeek(DateTime date) {
    int w = (int)(new DateTime(date.Year, date.Month, 1).DayOfWeek);
    return (date.Day + w - 1) / 7 + 1;

}


このコードは、まず、その月の１日が何曜日かを求め、それをint に変換します。
日曜日が 0で、土曜日が6 です。この値から1引いた値を該当する日に加え、7で割
れば、何週目かがわかります。最初の週を 1週目とするので、ここでは 1を加えて
います。
具体的な日付を使って計算してみれば理解できると思います。

このメソッドを使ったコードを示します。

DateTime date = DateTime.Today;
Console.WriteLine(NthWeek(date));


■□───────────────────────────────────
■□ 指定した月の第n日曜日を求めるには

たとえば、2011年10月の３回目の日曜日を求めるには、といったときに利用できる
メソッドを示します。

static DateTime NthWDay(int year, int month, int n, DayOfWeek dayOfWeek) {
    int fw = (int)(new DateTime(year, month, 1)).DayOfWeek;
    int x = (6 + fw - (int)dayOfWeek) % 7;
    int day = n * 7 - x;
    return new DateTime(year, month, day);
}

引数 n には、何番目の週かを指定します。
引数 dayOfWeek は、求める曜日を指定します。

次のように使います。

DateTime day = NthWDay(2011,9, 3, DayOfWeek.Sunday)

このNthWDayメソッドは、次のように書くこともできます。

 private static DateTime NthWDay(int year, int month, int n, DayOfWeek dayOfWeek) {
     int fw = (int)(new DateTime(year, month, 1)).DayOfWeek;
     int firstDay = ((int)dayOfWeek - fw) + 1;
     if (firstDay <= 0)
         firstDay += 7;
     int day = firstDay + (n - 1) * 7;
     return new DateTime(year, month, day);
 }

こちらのほうが理解しやすいかもしれませんね。こちらは、まず、指定した曜日の
最初の日を求めて、それから、n週目（n回目）の日を求める、ということを、最初
のメソッドよりも素直に書いたものです。

わかりやすさを優先し、効率は無視してよいならば、以下のようなコードもありかと
思います。

static DateTime NthWDay(int year, int month, int n, DayOfWeek dayOfWeek) {
    return Enumerable.Range(1, DateTime.DaysInMonth(year, month))
                     .Select(d => new DateTime(year,month,d))
                     .Where(d => d.DayOfWeek == dayOfWeek)
                     .Skip(n-1).FirstOrDefault();
}

指定した月の 1日から月末までのDateTimeのシーケンスを作り出し、そこから、指
定した曜日だけを抜き出し、n-1個を読み飛ばせば、n回目の日を求めることができ
ます。
LINQに慣れていない人には、わかり難いかもしれませんが、僕にとっては、面倒な
計算式を導き出すよりは、はるかにやさしく感じます。

ここまで書いてふと思い立ちました。この２つのアプローチを組み合わせれば、
理解しやすくかつ効率もそれほど悪くないコードが書けるなと。
以下にそのコードを示します。

static DateTime NthWDay(int year, int month, int n, DayOfWeek dayOfWeek) {
    var firstDay = Enumerable.Range(1, 7)
                             .Select(d => new DateTime(year,month,d))
                             .First(d => d.DayOfWeek == dayOfWeek);
    int day = firstDay.Day + (n - 1) * 7;
    return new DateTime(year, month, day);
}


─────────────────────────────────────
『C#プログラミングレッスン』  (ぼぼ週刊）                                 
☆皆さまからの感想をお待ちしています。http://gushwell.ifdef.jp/mail.html  
─────────────────────────────────────
Published by Gushwell.                                                    
 Copyright (C) 2011 Gushwell All rights reserved.                        
 Microsoft MVP for Visual C#(Apr 2005 - Mar 2012)                        

■Gushwell's Page                                                         
Gushwell's C# Dev Notes           : http://gushwell.ldblog.jp/            
Gushwell's C# Programming Page    : http://gushwell.ifdef.jp/             
Gushwellの読書ノート              : http://gushwell.jugem.jp/             
─────────────────────────────────────
