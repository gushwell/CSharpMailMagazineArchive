■━ [C#プログラミングレッスン] ━━━━━━━━━━━━━━━ No.304 ━□

「レシピ編」-- リストの操作 (1)
                                                           by Gushwell  
□━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━■

今日のコード

1. リストを複製するには
2. ２つのリストを連結し、新たなリストを作成するには
3. リストの要素の重複を取り除くには
4. ２つのリストを比較するには
5. リストを同じ値で埋めるには

■□───────────────────────────────────
■□ リストを複製するには

リストを複製するコードです。
これが、繰り返しのコードを使った最も一般的なコードだと思います。

List<int> source = new List<int> { 1, 2, 3, 4, 5, 6, 7 };
List<int> target = new List<int>();
foreach (var n in source) 
    target.Add(n);

なお、AddRangeメソッドを使えば、foreachを使わなくても、複製が作成できます。

List<int> source = new List<int> { 1, 2, 3, 4, 5, 6, 7 };
List<int> target = new List<int>();
target.AddRange(source);


次は、LINQを使ったコードです。ToList拡張メソッドを使えば、簡単に複製が作れ
ます。

List<int> source = new List<int> { 1, 2, 3, 4, 5, 6, 7 };
List<int> target = source.ToList();

まあ、これを「LINQを使ったコード」と言うのは、どうかなとも思いますが、この
ToList拡張メソッドは、System.Linq名前空間の、Enumerable クラスのメソッドす
ので、LINQを使ったコードと言っても間違いではないでしょう。


■□───────────────────────────────────
■□ ２つのリストを連結し、新たなリストを作成するには

2つのリストを連結するコードです。
source1, source2を連結し、結果をtargetに格納しています。

List<int> source1 = new List<int> { 1, 2, 3, 4, 5, 6, 7 };
List<int> source2 = new List<int> { 8, 9, 10 };
List<int> target = new List<int>();
foreach (var n in source1) {
    target.Add(n);
}
foreach (var n in source2) {
    target.Add(n);
}

List<T>.AddRangeメソッドを使った場合は、以下のようになります。

List<int> source1 = new List<int> { 1, 2, 3, 4, 5, 6, 7 };
List<int> source2 = new List<int> { 8, 9, 10 };
List<int> target = new List<int>();
target.AddRange(source1);
target.AddRange(source2);

もちろん、Source1 の後ろに追加してよい場合は、

source1.AddRange(source2);

の１行で連結が可能です。
次に、LINQを使ったコードです。

List<int> source1 = new List<int> { 1, 2, 3, 4, 5, 6, 7 };
List<int> source2 = new List<int> { 8, 9, 10 };
List<int> target = source1.Concat(source2).ToList();

LINQのConcat拡張メソッドを使い、ToList()で List<int>に変換します。
こちらのコードのほうが、より直観的なコードになっていますね。


■□───────────────────────────────────
■□ リストの要素の重複を取り除くには

リストの要素の重複を取り除くコードです。
２つ以上存在する要素をひとつにします。結果は、新たなリストに格納しています。
Containsメソッドを使い、targetに存在しない要素だけをtargetに追加しています。

List<int> source = new List<int> { 1, 2, 3, 1, 4, 7, 5, 6, 3, 7 ,1};
List<int> target = new List<int>();
for (int i = 0; i < source.Count; i++) {
    if (!target.Contains(source[i]))
        target.Add(source[i]);
}

Containsの代わりに、IndexOfを使うことも可能ですが、私は、この場合は、
「存在していなかったら」ということを直接的に表しているContainsメソッドを使
うほうがよいと考えています。


次に、LINQを使ったコードです。
Distinctメソッドを使うだけなので、繰り返し文が不要になっています。

List<int> source = new List<int> { 1, 2, 3, 1, 4, 7, 5, 6, 3, 7 ,1};
List<int> target = source.Distinct().ToList();


■□───────────────────────────────────
■□ ２つのリストを比較するには

２つのリストを比較するメソッドを示します。
下記のメソッドは、引数で与えた source1、source2の比較をし、等しい場合は、
true を、等しくない場合は、false を返しています。

private static bool ListCompare(List<int> source1, List<int> source2) {
    if (source1.Count != source2.Count)
        return false;
    for (int i = 0; i < source1.Count; i++) {
        if (source1[i] != source2[i])
            return false;
    }
    return true;
}

LINQを使えば、SequenceEqual 拡張メソッドが用意されていますので、メソッドを
定義するまでもなく、以下のようなコードで比較が行えます。

bool IsEquals = source1.SequenceEqual(source2)


■□───────────────────────────────────
■□ リストを同じ値で埋めるには

リストを同じ値で埋めるコードです。ここでは、-1 を 10 個セットしています。

List<int> source = new List<int>();
for (int i = 0; i < 10; i++)
    source.Add(-1);

次は、LINQを使ったコードです。
Enumerable.Repeat 静的メソッドを使えば、同じ値を繰り返したシーケンスを生成
できますので、それを List<T>に変換しています。

List<int> nums = Enumerable.Repeat(-1,10).ToList();


─────────────────────────────────────
『C#プログラミングレッスン』  (ぼぼ週刊）                                 
☆皆さまからの感想をお待ちしています。http://gushwell.ifdef.jp/mail.html  
─────────────────────────────────────
Published by Gushwell.                                                    
 Copyright (C) 2011 Gushwell All rights reserved.                        
 Microsoft MVP for Visual C#(Apr 2005 - Mar 2012)                        

■Gushwell's Page                                                         
Gushwell's C# Dev Notes           : http://gushwell.ldblog.jp/            
Gushwell's C# Programming Page    : http://gushwell.ifdef.jp/             
Gushwellの読書ノート              : http://gushwell.jugem.jp/             
─────────────────────────────────────
