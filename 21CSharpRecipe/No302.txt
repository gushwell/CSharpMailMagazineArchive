■━ [C#プログラミングレッスン] ━━━━━━━━━━━━━━━ No.302 ━□

「レシピ編」-- 配列の操作 (2)
                                                           by Gushwell
□━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━■

今日のコード

1. 配列の要素を逆順にするには
2. 配列から特定の条件に一致する要素を一つ取り出すには
3. 配列から特定の条件に一致する要素を複数取り出すには
4. 配列の要素を特定の条件で並び替えるには

なお、この「配列操作」においては、"元の配列は変更しない" を前提にしています。
ですから、1番目の問題では、逆順にした結果は、別の配列に格納するものとします。

■□───────────────────────────────────
■□ 配列の要素を逆順するには

配列の要素を逆転させ、その結果を新たな配列に格納する例です。

 int[] source = { 1, 2, 3, 4, 5, 6, 7 };
 int[] target = source.ToArray();
 Array.Reverse(target);

Array.Reverseは、引数に渡した配列の要素の順番を入れ替えてしまうため、いった
ん、複製を取り、その複製に対して、Array.Reverseを呼び出しています。

次は、LINQを使ったコードです。
こちらは、Reverseメソッドを呼び出すだけです。

 int[] source = { 1, 2, 3, 4, 5, 6, 7 };
 int[] target = source.Reverse().ToArray();

 ※ System.Linq を using しているものとします。（以降のコードも同様）


■□───────────────────────────────────
■□ 配列から特定の条件に一致する要素を一つ取り出すには

Array.Findジェネリックメソッドを使うことで、条件に一致した要素を取り出すこ
とができます。
最もインデックス番号の小さい要素返ります。
第2引数には、検索する条件を示す Predicate<T> デリゲートです。デリゲートを受
け取れるところには、ラムダ式が使えます。

 DateTime[] source = {
                 new DateTime(2009,2,2),
                 new DateTime(2009,3,3),
                 new DateTime(2009,4,4),
                 new DateTime(2009,5,5),
             };
 DateTime r = Array.Find(source, d => d.Month == 2);

なお、条件に一致するインデックスを求める場合は、Array.FindIndex メソッドを
利用します。

次にLINQを使ったコードを示します。

 DateTime[] source = {
                 new DateTime(2009,2,2),
                 new DateTime(2009,3,3),
                 new DateTime(2009,4,4),
                 new DateTime(2009,5,5),
             };
 DateTime r = source.FirstOrDefault(d => d.Month == 2);

LINQのFirstメソッドの場合は、要素が見つからなかった場合、例外が発生してしま
いますので、絶対に要素が見つかることが明白な場合を除き、FirstOrDefaultを使
うのがよいと思います。


■□───────────────────────────────────
■□ 配列から特定の条件に一致する要素を複数取り出すには

MyClassオブジェクトの Value1プロパティの値が 600未満のオブジェクトを取り出
しています。なお、結果は、新たな配列に格納しています。

 MyClass[] source = {
                 new MyClass { Key = 5, Value1 = 500, Value2 = "555" },
                 new MyClass { Key = 8, Value1 = 800, Value2 = "888" },
                 new MyClass { Key = 2, Value1 = 200, Value2 = "222" },
                 new MyClass { Key = 9, Value1 = 900, Value2 = "999" },
                 new MyClass { Key = 4, Value1 = 400, Value2 = "444" },
 };
 List<MyClass> temp = new List<MyClass>();
 foreach (var o in source) {
    if (o.Value1 < 600)
        temp.Add(o);
 }
 MyClass[] target = temp.ToArray();

 ※ MyClass型が定義済みであるものとします。

このコードには、そもそも、結果を配列に格納するべきなのかという根本的な問題
がありますが、このコードでその無益さがわかっていただければと思います。

次は、LINQを使ったコードです。

 MyClass[] source = {
                 new MyClass { Key = 5, Value1 = 500, Value2 = "555" },
                 new MyClass { Key = 8, Value1 = 800, Value2 = "888" },
                 new MyClass { Key = 2, Value1 = 200, Value2 = "222" },
                 new MyClass { Key = 9, Value1 = 900, Value2 = "999" },
                 new MyClass { Key = 4, Value1 = 400, Value2 = "444" },
 };
 MyClass[] target = source.Where(o => o.Value1 < 600).ToArray();

より、直感的なコードになっていますね。


■□───────────────────────────────────
■□ 配列の要素を特定の条件で並び替えるには

MyClassのKeyプロパティの値順に並べ替え、結果を別の配列に格納するコードです。

 MyClass[] source = {
                 new MyClass { Key = 5, Value1 = 500, Value2 = "555" },
                 new MyClass { Key = 8, Value1 = 800, Value2 = "888" },
                 new MyClass { Key = 2, Value1 = 200, Value2 = "222" },
                 new MyClass { Key = 9, Value1 = 900, Value2 = "999" },
                 new MyClass { Key = 4, Value1 = 400, Value2 = "444" },
 };
 MyClass[] target = new MyClass[source.Length];
 Array.Copy(source, target, source.Length);
 Array.Sort(target, (x, y) => x.Key - y.Key);

最初に示した Reverseと同様、引数で指定した配列そのものの順序を変えてしまう
ので、いったん、結果を格納する配列に要素を複写してから、ソートしています。

LINQだと次のようなコードになります。

 MyClass[] source = {
                 new MyClass { Key = 5, Value1 = 500, Value2 = "555" },
                 new MyClass { Key = 8, Value1 = 800, Value2 = "888" },
                 new MyClass { Key = 2, Value1 = 200, Value2 = "222" },
                 new MyClass { Key = 9, Value1 = 900, Value2 = "999" },
                 new MyClass { Key = 4, Value1 = 400, Value2 = "444" },
 };
 MyClass[] target = source.OrderBy(x => x.Key).ToArray();

OrderByメソッドを使えば、Key順（昇順）に並び替えることが間単に書けます。
先ほどの、Whereメソッド同様、LINQを使ったほうが直感的なコードになりますね。

降順にするには、Enumerable.OrderByDescending メソッドを使います。

------------------------------------------------------------------------

前回、今回と配列を扱うコードを示してきましたが、すべてのコードは、元々の配
列を一切変更しないコードとしています。
オリジナルの配列を変更してしまうと、別のところでは、変更前の配列だと思って
いたのに、変更後の配列だったなんてことが起こり、予期しない結果になってしま
うことがあります。
そういった意味では、LINQを使えば、オリジナルの配列を変更しないコードが意識
せずに書けるので、プログラムの安全性が高まると思います。
もちろん、オリジナルの配列を変更しなければならない場面もありますので、ケー
スバイケースではりますが。

─────────────────────────────────────
『C#プログラミングレッスン』  (ぼぼ週刊）
☆皆さまからの感想をお待ちしています。http://gushwell.ifdef.jp/mail.html
─────────────────────────────────────
Published by Gushwell.
 Copyright (C) 2011 Gushwell All rights reserved.
 Microsoft MVP for Visual C#(Apr 2005 - Mar 2012)

■Gushwell's Page
Gushwell's C# Dev Notes           : http://gushwell.ldblog.jp/
Gushwell's C# Programming Page    : http://gushwell.ifdef.jp/
Gushwell's F# Programming Diary   : http://techbank.jp/gushwell/
Gushwellの読書ノート              : http://gushwell.jugem.jp/
─────────────────────────────────────
