■━ [C#プログラミングレッスン] ━━━━━━━━━━━━━━━ No.303 ━□

「レシピ編」-- 配列の操作 (3)
                                                           by Gushwell  
□━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━■

今日のコード

1. 配列の最後の要素を取り出すには
2. 配列を連結するには
3. 配列のサイズを拡張し、配列の末尾に要素を追加するには 
4. ２つの配列のなかから両方に存在する要素を抜き出すには

なお、前回も書きましたが、この「配列操作」においては、特に断りがない限り "
元の配列は変更しない" を前提にしています。

■□───────────────────────────────────
■□ 配列の最後の要素を取り出すには

ちょと簡単すぎるコードですが、以下のようコードが一般的ですね。

int[] source = { 1, 2, 3, 4, 5, 6, 7 };
int last = source[source.Length - 1];

LINQを使えば、

int[] source = { 1, 2, 3, 4, 5, 6, 7 };
int last = source.Last();

と、より直感的なコードになりますが、サイズの大きな配列で、Lastメソッドが何
回も呼び出されるようなコードでは、パフォーマンス上、問題になる可能性があり
ます。


■□───────────────────────────────────
■□ 配列を連結するには 

２つの配列を連結した、新たな配列を作成するコードです。
まず、結果を格納する配列targetを用意し、Copyメソッドで、２つの配列から要素
をコピーすることで、連結しています

int[] source1 = { 1, 2, 3, 4, 5, 6, 7 };
int[] source2 = { 8, 9, 10 };
int[] target = new int[source1.Length + source2.Length];
Array.Copy(source1, target, source1.Length);
Array.Copy(source2, 0, target, source1.Length, source2.Length);


次に、LINQを使ったコードです。Concatメソッドを使うことで、より直感的なコー
ドが書けます。

int[] source1 = { 1, 2, 3, 4, 5, 6, 7 };
int[] source2 = { 8, 9, 10 };
int[] target = source1.Concat(source2).ToArray();


■□───────────────────────────────────
■□ 配列のサイズを拡張し、配列の末尾に要素を追加するには 

配列の末尾に、３つの  -1 を追加するコードです。
新たは配列target を確保し、そこにオリジナルの配列をコピーした後に、残りの部
分に- 1 を入れています。

int[] source = { 1, 2, 3, 4, 5, 6, 7 };
int[] target = new int[source.Length + 3];
Array.Copy(source, target, source.Length);
for (int i = source.Length; i < target.Length; i++)
    target[i] = -1;

なお、source 配列そのものを拡張したい場合は、Array.Resizeメソッドを
使います。

int[] source = { 1, 2, 3, 4, 5, 6, 7 };
int prevLength = source.Length;
Array.Resize(ref source, source.Length + 3);
for (int i = prevLength; i < source.Length; i++)
    source[i] = -1;


次は、LINQのConcat拡張メソッドを使ったコードを示します。２つの配列を結合す
ることで、結果的に、配列の後ろに要素を追加したことになります。

int[] source = { 1, 2, 3, 4, 5, 6, 7 };
var additional = Enumerable.Repeat(-1, 3);
int[] target = source.Concat(additional).ToArray();


■□───────────────────────────────────
■□ ２つの配列のなかから両方に存在する要素を抜き出すには

２つの配列の中から、両方に存在する要素を抜き出し、配列に格納するコードを示
します。
いわゆる、積集合を求めるコードですね。

int[] source1 = { 1, 2, 3, 4, 5, 6, 7 };
int[] source2 = { 3, 5, 7, 8, 9, 10, 1 };
List<int> temp = new List<int>();
foreach (var n in source1) {
    if (Array.Exists(source2, x => x == n))
        temp.Add(n);
}

Array.Existsの２つめの引数は、ラムダ式で、Source2の中の要素 xと source1の要
素 n が等しいかを判断しています。
結果は、{ 1,3,5,7 } になります。

LINQを使うと、Intersectという積集合を求めるそのもののメソッドがありますので、
それを使うだけです。

int[] source1 = { 1, 2, 3, 4, 5, 6, 7 };
int[] source2 = { 3, 5, 7, 8, 9, 10, 1 };
int[] target = source1.Intersect(source2).ToArray();


--------------------------------------------------------------------------
3回配列の話題を続けてきましたが、次回から、「List<T>の操作」を扱ったコー
ドを示したいと思います。

─────────────────────────────────────
『C#プログラミングレッスン』  (ぼぼ週刊）                                 
☆皆さまからの感想をお待ちしています。http://gushwell.ifdef.jp/mail.html  
─────────────────────────────────────
Published by Gushwell.                                                    
 Copyright (C) 2011 Gushwell All rights reserved.                        
 Microsoft MVP for Visual C#(Apr 2005 - Mar 2012)                        

■Gushwell's Page                                                         
Gushwell's C# Dev Notes           : http://gushwell.ldblog.jp/            
Gushwell's C# Programming Page    : http://gushwell.ifdef.jp/             
Gushwell's F# Programming Diary   : http://techbank.jp/gushwell/          
Gushwellの読書ノート              : http://gushwell.jugem.jp/             
─────────────────────────────────────