■━ [C#プログラミングレッスン] ━━━━━━━━━━━━━━━ No.320 ━□

「レシピ編」-- ディクショナリーの操作(2)
                                                           by Gushwell  
□━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━■

今日のコード

1. Key1,Value1, key2,value2...と連続した配列から、Dictionaryを生成するには

今回は、この一つだけです。これを題材に、今日は、いろいろと考えてみたいと
思います。


■□───────────────────────────────────
■□ Key1,Value1, key2,value2...と連続した配列から、Dictionaryを生成するには

例えば、

var arr = new[] { "1", "one", "2", "two", "3", "three" };

という配列から、

"1", "one"
"2", "two"
"3", "three"

というペアを作り出し、それをDictionaryに格納するコードを考えてみます。

■ オーソドックスなコード

まずは、オーソドックスなコードを示します。

var arr = new[] { "1", "one", "2", "two", "3", "three" };
var dict = new Dictionary<string, string>();
for (int i = 0; i < arr.Length; i += 2) {
    string key = arr[i];
    string val = arr[i + 1];
    dict.Add(key, val);
}

素直なコード（だと思っている）なので、説明の必要もないですね。
入力が配列固定ならば、これがシンプルでわかりやすいコードだと思います。
しかし、入力がLisy<T>でも、配列でも対応可能にしたいとすると、この
やり方ではうまくいきません。そんな時には、LINQの出番となります。

■LINQを使ったコード

次に、LINQのEnumerable.Zipメソッドを使ったコードを示します。

 var arr = new[] { "1", "one", "2", "two", "3", "three" };
 var dict = Enumerable.Zip(
         arr.Where((s, i) => i % 2 == 0),
         arr.Where((s, i) => i % 2 == 1),
         Tuple.Create)
     .ToDictionary(t => t.Item1, t => t.Item2);

Enumerable.Zipメソッドは、指定された述語関数を使用して 2 つのシーケンスをマ
ージします。
第1引数と第2引数は、マージするシーケンスです。第3引数に、マージする操作関数
を渡します。
上記コードでは、偶数番目の値のシーケンスを第1引数に、奇数番目の値のシーケン
スを第2引数に、第3引数には、Tuple.Createを渡します。
これにより、("1", "one") , ("2", "two"), ("3", "three") というTupleのシーケ
ンスが作成されます。
この生成されたシーケンスに対し、ToDictionayメソッドで、Dictionaryを生成して
います。


■ジェネリックなメソッドにする

では、上記のLINQを使ったコードをより汎用的にしてみましょう。

以下のような、ジェネリックな拡張メソッドを定義します。

static class DictionaryExtentions {
    public static Dictionary<T, T> ToDictionaryFromSeq<T>(
                                             this IEnumerable<T> items) {
        return Enumerable.Zip(
                            items.Where((s, i) => i % 2 == 0),
                            items.Where((s, i) => i % 2 == 1),
                            Tuple.Create)
                         .ToDictionary(t => t.Item1, t => t.Item2);
    }
}

こうすることで、以下のようなコードが書けるようになります。

var seq = new List<string> { "1", "one", "2", "two", "3", "three" };
foreach (var d in seq.ToDictionaryFromSeq()) {
    Console.WriteLine("{0} {1}", d.Key, d.Value);
}

上記拡張メソッドは、IEnumerable<T> を受け取るようにしてあるので、配列ではな
く、List<T>でも、処理できるようになりました。
また、文字列ではなく、値が int のシーケンスに対しても、処理が可能です。

─────────────────────────────────────
『C#プログラミングレッスン』  (ほぼ週刊）                                 
☆皆さまからの感想をお待ちしています。http://gushwell.ifdef.jp/mail.html  
─────────────────────────────────────
Published by Gushwell.                                                    
 Copyright (C) 2012 Gushwell All rights reserved.                        
 Microsoft MVP for Visual C#(Apr 2005 - Mar 2012)                        

■Gushwell's Page                                                         
facebook Page                     : http://www.facebook.com/CSharpLesson  
Gushwell's C# Dev Notes           : http://gushwell.ldblog.jp/            
Gushwell's C# Programming Page    : http://gushwell.ifdef.jp/             
Gushwellの読書ノート              : http://gushwell.jugem.jp/             
Twitterアカウント                 : @gushwell                             
─────────────────────────────────────
