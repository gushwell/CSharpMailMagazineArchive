■━ [C#プログラミングレッスン] ━━━━━━━━━━━━━━━ No.301 ━□

「レシピ編」-- 配列の操作 (1)
                                                           by Gushwell
□━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━■

みなさん、おはようございます。
今回から、「レシピ編」を開始します。この「レシピ編」では、配列やリストの操
作、文字列操作、日付操作、ファイル操作など、様々な場面で使われると思われる
プログラムコードを「○○するには（問題）」と「C＃のコード(解決)」を示すとい
う形式で、提示したいと考えています。
まずは、配列の操作です。

今日のコード

1.配列の複製を作成するには。
2.配列の要素を同じ値で埋めるには。
3.２つの配列を比較するには。
4.順序を保持したまま、配列の要素の重複を取り除くには。

なお、この「配列操作」においては、"元の配列は変更しない" を前提にしています。
ですから、4番目の問題では、重複を取り除いた結果は、別の配列に格納するものと
します。

■□───────────────────────────────────
■□ 配列の複製を作成するには。

配列の各要素を、新たな配列に複写する例です。サイズも同じ配列を作成します。

 DateTime[] source = {
    new DateTime(2011,2,2),
    new DateTime(2011,3,3),
    new DateTime(2011,4,4),
    new DateTime(2011,5,5),
 };
 DateTime[] target = new DateTime[source.Length];
 Array.Copy(source, target, source.Length);

Array.Copyメソッドを使い、配列sourceの複製targetを作成しています。target
配列は、事前にサイズを指定し領域を確保しておく必要があります。
なお、配列は参照型ですので、

 int[] target = source;

だと複製になりません。この理由がわからない方は、参照型と値型の復習をしてく
ださいね。

次は LINQ を使ったコードです。

 DateTime[] source = {
    new DateTime(2011,2,2),
    new DateTime(2011,3,3),
    new DateTime(2011,4,4),
    new DateTime(2011,5,5),
 };
 DateTime[] target = source.ToArray();

 ※ System.Linq を using しているものとします。（以降のコードも同様）

ToArray拡張メソッドを使い、複製を作成しています。


■□───────────────────────────────────
■□ 配列の要素を同じ値で埋めるには。

配列を -1 で埋める例です。
ここでは、配列のサイズは、実行時に確定するものとします。そのため、変数size
を用意しています、この値は、引数などで渡ってくるものと考えてください。

 int size = 10;
 int[] target = new int[size];
 for (int i = 0; i < target.Length; i++)
    target[i] = -1;

for文の繰り返し条件では、変数sizeではなく、target.Lengthを使っている点に注
意してください。こうすることで、より一般的なコードになっています。

次に、LINQを使ったコードを示します。

 int size = 10;  // サイズは、実行時に確定するものとする
 int[] target = Enumerable.Repeat(-1, size).ToArray();

繰り返し文であるforは必要ありません。
Enumerable.Repeatメソッドの戻り値は、この例では、IEnumerable<int> です。
これを ToArrayメソッドで配列にしています。


■□───────────────────────────────────
■□ ２つの配列を比較するには。

２つの配列に格納されている要素がすべて同じかどうかを判断するコードです。も
ちろん、配列のサイズが違っていたら、"等しくない" という判断になります。
ArrayCompareというメソッドとして実装しました。

 private static bool ArrayCompare(int[] array1, int[] array2) {
    if (array1.Length != array2.Length)
        return false;
    for (int i = 0; i < array2.Length; i++) {
        if (array1[i] != array2[i])
            return false;
    }
    return true;
 }

ジェネリックメソッドにすれば、要素の型がintに限定されなくなります。

 private static bool ArrayCompare<T>(T[] nums1, T[] nums2)
                                    where T : IEquatable<T> {
    if (nums1.Length != nums2.Length)
        return false;
    for (int i = 0; i < nums1.Length; i++) {
        if (!nums1[i].Equals(nums2[i]))
            return false;
    }
    return true;
 }

要素が参照型の場合は、何を持って等しいと判断するかは、難しい問題ですが、配
列の各要素を Equals メソッドを使用して比較しています。

LINQを使ったコードを以下に示します。

 private static bool ArrayCompare(int[] array1, int[] array2) {
    return array1.SequenceEqual(array2));
 }

SequenceEqualメソッドを使うだけなので、メソッドにするほどのことはないですが、
上と対比させるために、メソッドにしました


■□───────────────────────────────────
■□ 順序を保持したまま、配列の要素の重複を取り除くには。

int型の配列から、順序を保持したまま、重複した要素を取り除き、別の配列に格
納する例です。

 int[] source = { 1, 2, 3, 1, 4, 7, 5, 6, 6, 3, 7, 7, 1 };
 List<int> temp = new List<int>();
 foreach (var n in source) {
    if (!temp.Exists(x => x == n))
        temp.Add(n);
 }
 int[] target = temp.ToArray();

作業用として、List<int> を利用しています。List<int> を使わずに、配列だけを
使ってこれを実現するのは、なかなか大変です。適材適所でどんな構造のデータを
使うかはとても重要になってきます。

次に、LINQを使ったコードです。

 int[] source = { 1, 2, 3, 1, 4, 7, 5, 6, 6, 3, 7, 7, 1 };
 int[] target = source.Aggregate(new List<int>(),
    (a,s) => {
        if (!a.Exists(x => x == s))
            a.Add(s);
        return a;
    }).ToArray();

非常にわかりにくいコードになってしまいました。

もし、順序を維持しなくてもよいならば、

 var target = source.Distinct();

だけでOKです。
実際に動かしてみたところ、順序を維持しているような結果が返ってきましたが、
MSDNライブラリには、「順序なしのシーケンスを返します。」とあるので、順序を
維持したい場合には使えないようです。
LINQは、ほとんどの場面において、LINQを使わないコードよりも完結に書くことが
できますが、例外もあります。やはり、適材適所ですね。

==========================================================================
■ Gushwellの書籍

『C#プログラミング入門』
 http://www.amazon.co.jp/exec/obidos/ASIN/4777515982/gaius-22/

 目次は、こちらで確認できます。
 http://www.kohgakusha.co.jp/books/detail/978-4-7775-1598-1


─────────────────────────────────────
『C#プログラミングレッスン』  (ぼぼ週刊）
☆皆さまからの感想をお待ちしています。http://gushwell.ifdef.jp/mail.html
─────────────────────────────────────
Published by Gushwell.
 Copyright (C) 2011 Gushwell All rights reserved.
 Microsoft MVP for Visual C#(Apr 2005 - Mar 2012)

■Gushwell's Page
Gushwell's C# Dev Notes           : http://gushwell.ldblog.jp/
Gushwell's C# Programming Page    : http://gushwell.ifdef.jp/
Gushwell's F# Programming Diary   : http://techbank.jp/gushwell/
Gushwellの読書ノート              : http://gushwell.jugem.jp/
─────────────────────────────────────
