■━ [C#プログラミングレッスン] ━━━━━━━━━━━━━━━ No.310 ━□

「レシピ編」-- 数値の扱い (2)
                                                           by Gushwell  
□━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━■

今日のコード

1. double値を四捨五入するには
2. double値の比較をするには
3. 数値をフォーマットするには


■□───────────────────────────────────
■□ double値を四捨五入するには

Math.Roundメソッドを使うことで、四捨五入することができます。

double num = Math.Round(10.5, MidpointRounding.AwayFromZero);
Console.WriteLine(num);

結果は、11 が表示されます。MidpointRounding オプションがない場合は、「偶数
丸め」(JIS 丸め) が行われます。
そのため、下記のコードの場合は、10 が表示されます。

double num = Math.Round(10.5);
Console.WriteLine(num);

第２引数で、MidpointRounding.ToEven を指定した時も同様です。

Math.Roundには、丸め後の小数点の桁数を指定するオプションも用意せれています。
その例を以下に示します。

double num = Math.Round(10.05, 1, MidpointRounding.AwayFromZero);
Console.WriteLine(num);

このコードの場合は、10.1 が表示されます。


■□───────────────────────────────────
■□ double値の比較をするには

間違った比較

double e = 0;
for (int i = 0; i < 3; i++)
    e += (double)0.1;
if ( e == 0.3 )
    Console.WriteLine("equals");

上記コードは、浮動小数点の丸め誤差により、equals は表示されません。
doublet値の比較をするには、ある閾値を定め、その閾値よりも、比較する２つの値
の差が小さいときに等しいとみなすコードを書く必要があります。
例えば、以下のようなコードを書きます。

double e = 0;
for (int i = 0; i < 3; i++)
 if ( Math.Abs(e-0.3) < 1E-13 )
    Console.WriteLine("equals");

1E-13 は、1 の -13 乗 を意味します。
この閾値は、あるケースによっては厳しすぎることもあり得ます。どのくらいの値
が良いのかは実際のアプリケーションの性質により変わってくると思います。
このような丸め誤差が気になる場合は、doubleではなく、decimal を使うことを検
討してください。


■□───────────────────────────────────
■□ 数値をフォーマットするには

String.Formatメソッドを使って、数値をフォーマットする例を示します。

FormatAndWrite(" 1.[{0,10}]", 12345);
FormatAndWrite(" 2.[{0,-10}]", 12345);
FormatAndWrite(" 3.[{0:d10}]", 12345);
FormatAndWrite(" 4.[{0,10:000000}]", 12345);
FormatAndWrite(" 5.[{0,10:#,#}]", 12345);
FormatAndWrite(" 6.[{0,10:#}]", 0);
FormatAndWrite(" 7.[{0,10:0}]", 0);
FormatAndWrite(" 8.[{0,10}]", 1234.567);
FormatAndWrite(" 9.[{0,10:f2}]", 1234.567);
FormatAndWrite("10.[{0,10:00.000}]", 1234.56);
FormatAndWrite("11.[{0,10:#,#.00}]", 1234.56);
FormatAndWrite("12.[{0,10:#,#.00}]", 1234.5);
FormatAndWrite("13.[{0,10:#,#.00}]", 1234);
FormatAndWrite("14.[{0:#,#.00}]", 1234);
FormatAndWrite("15.[{0:f2}]", 1234.5);

...

static void FormatAndWrite(string format, int num) {
    string s = string.Format(format, num);
    Console.WriteLine(s);
}

この結果は、以下のようになります。(固定ピッチのフォントでご覧ください)

 1.[     12345]
 2.[12345     ]
 3.[0000012345]
 4.[    012345]
 5.[    12,345]
 6.[          ]
 7.[         0]
 8.[  1234.567]
 9.[   1234.57]
10.[  1234.560]
11.[  1,234.56]
12.[  1,234.50]
13.[  1,234.00]
14.[1,234.00]
15.[1234.50]

説明は省略します。上記コードと結果を突き合わせ、それぞれの書式指定が
どんな効果を生むのかを確認してください。


─────────────────────────────────────
『C#プログラミングレッスン』  (ほぼ週刊）                                 
☆皆さまからの感想をお待ちしています。http://gushwell.ifdef.jp/mail.html  
─────────────────────────────────────
Published by Gushwell.                                                    
 Copyright (C) 2011 Gushwell All rights reserved.                        
 Microsoft MVP for Visual C#(Apr 2005 - Mar 2012)                        

■Gushwell's Page                                                         
Gushwell's C# Dev Notes           : http://gushwell.ldblog.jp/            
Gushwell's C# Programming Page    : http://gushwell.ifdef.jp/             
Gushwellの読書ノート              : http://gushwell.jugem.jp/             
─────────────────────────────────────
