
■━ [C#プログラミングレッスン] ━━━━━━━━━━━━━━━ No.322 ━□

「レシピ編」-- 自分自身を知る
                                                           by Gushwell  
□━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━■

今日のコード

1. 自分自身のメソッド名を得るには
2. 自分自身のアセンブリ名を得るには


■□───────────────────────────────────
■□ 自分自身のメソッド名を得るには

今実行しているメソッドの名前を得るコードを示します。

private static void SampleMethod() {
    MethodBase mb = MethodBase.GetCurrentMethod();
    Console.WriteLine(mb.Name);
}

MethodBaseクラスのGetCurrentMethodを呼び出すことで、現在のMethodBaseオブジ
ェクトを得ることができます。
MethodBase は、MethodInfo および ConstructorInfo の基本クラスであり、この例
では、MethodInfoオブジェクトが得られます。
このMethodBaseのNameプロパティを参照することで、現在のメソッド名を取得する
ことができます。

この例では、"SampleMethod" が表示されます。

このMethodBaseオブジェクトが得られれば、名前空間や、メソッドのフルネームな
ども知ることができます。
以下にそのコードを示します。

MethodBase mb = MethodBase.GetCurrentMethod();
Console.WriteLine(mb.DeclaringType.Name);
Console.WriteLine(mb.DeclaringType.Namespace);
Console.WriteLine(mb.DeclaringType.FullName);
Console.WriteLine(mb.DeclaringType.AssemblyQualifiedName);


なお、スタックトレースをたどることで、呼び出し元のメソッド名を取得する方法
もあります。この方法を使えば、GetMyMethodName() や、TraceMyMethodName() の
ようなメソッドを作ることができます。
詳しくは、僕のブログ記事を見てください。
http://gushwell.ldblog.jp/archives/50715142.html
この記事のコードのGetFrame(0)の引数を変えて実験してみてください。


■□───────────────────────────────────
■□ 自分自身のアセンブリ名を得るには

Assemblyクラスを利用することで、自分自身のアセンブリ名を知ることができます。
以下にその具体的な例を示しましょう。

C#ソリューションの中に、新たなプロジェクト（クラスライブラリ）を追加し、そ
のクラスライブラリの中に以下のようなクラスを定義したとします。
プロジェクト名は、SampleLibとします。

using System;
using System.Reflection;

namespace Gushwell.Lib {
    public class SampleClass {
        public void MySelfAssembly() {
            Assembly asm = Assembly.GetExecutingAssembly();
            Console.WriteLine(asm.Location);
            Console.WriteLine(asm.FullName);
        }

        public void EntryAssembly() {
            Assembly asm = Assembly.GetEntryAssembly();
            Console.WriteLine(asm.Location);
            Console.WriteLine(asm.FullName);
        }
    }
}

このSampleLibプロジェクトをアプリケーションプロジェクトから参照設定し呼び出
せるようにします。
そして、以下のように呼び出したとします。

SampleClass obj = new SampleClass();
obj.MySelfAssembly();
Console.WriteLine("----");
obj.EntryAssembly();

結果の例を示します。

D:/CSRecipes/MySelf/bin/Debug/SampleLib.DLL
SampleLib, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
----
D:/CSRecipes/MySelf/bin/Debug/MySelf.EXE
MySelf, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null


これで、GetExecutingAssembly と GetEntryAssembly の違いが判るかと思います。
GetEntryAssemblyは、エントリ・ポイント(Mainメソッド）を含むアセンブリが得ら
れます。一方、GetExecutingAssemblyは、現在実行中のコードを含むアセンブリが
得られます。
通常、自分自身のアセンブリ情報を知りたい場合には、GetExecutingAssemblyメソ
ッドを使うことになります。

─────────────────────────────────────
『C#プログラミングレッスン』  (ほぼ週刊）                                 
☆皆さまからの感想をお待ちしています。http://gushwell.ifdef.jp/mail.html  
─────────────────────────────────────
Published by Gushwell.                                                    
 Copyright (C) 2012 Gushwell All rights reserved.                        
 Microsoft MVP for Visual C#(Apr 2005 - Mar 2012)                        

■Gushwell's Page                                                         
facebook Page                     : http://www.facebook.com/CSharpLesson  
Gushwell's C# Dev Notes           : http://gushwell.ldblog.jp/            
Gushwell's C# Programming Page    : http://gushwell.ifdef.jp/             
Gushwellの読書ノート              : http://gushwell.jugem.jp/             
Twitterアカウント                 : @gushwell                             
─────────────────────────────────────
