┏━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━┳━┳━┓
┃☆┃ C#プログラミングレッスン                         ┃＿┃□┃×┃
┣━┻━━━━━━━━━━━━━━━━━━━━━━━━━┻━┻━┻━┫
┃リフレクション-Assemblyクラス                               No.184┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

■──────────────────────────────────
■Assemblyクラス

リフレクションでの基本となるクラスは、前回説明したTypeクラスですが、も
うひとつ重要となるのが、Assemblyクラスです。

主にアセンブリのメタ情報の取得やアセンブリに格納されている型の検出に利
用します。

まずは、現在実行されているアセンブリの情報を取得してみましょう。


 Assembly asm = Assembly.GetExecutingAssembly();
 PrintAssemblyInfo(asm);
 ...
 private static void PrintAssemblyInfo(Assembly asm) {
     Console.WriteLine("CodeBase = {0}", asm.CodeBase);
     Console.WriteLine("EscapedCodeBase = {0}", asm.EscapedCodeBase);
     Console.WriteLine("FullName = {0}", asm.FullName);
     Console.WriteLine("GlobalAssemblyCache = {0}", 
                                         asm.GlobalAssemblyCache);
     Console.WriteLine("ImageRuntimeVersion = {0}",
                                         asm.ImageRuntimeVersion);
     Console.WriteLine("Location = {0}", asm.Location);
     Console.WriteLine("GetName = {0}", asm.GetName());
 }

Assemblyクラスの staticメソッドである GetExecutingAssembly()で、現在実
行中のコードを格納しているアセンブリ情報を取得します。 
このプログラム(refrectionTest.exe)を d:\tempに入れて実行した結果を以下
に示します。

CodeBase = file:///D:/temp/RefrectionTest.exe
EscapedCodeBase = file:///D:/temp/RefrectionTest.exe
FullName = RefrectionTest, Version = 1.0.0.0, Culture = neutral,  PublicKeyToken = null
GlobalAssemblyCache = False
ImageRuntimeVersion = v2.0.50727
Location = D:\temp\RefrectionTest.exe
GetName = RefrectionTest, Version = 1.0.0.0, Culture = neutral,  PublicKeyToken = null


■──────────────────────────────────
■GetAssemblyメソッド

他にもAssemblyのインスタンスを得るための色々なメソッドが用意されていま
す。
たとえば、GetAssemblyメソッドは、指定したクラスが定義されている読み込
み済みのAssembly情報を取得します。 

 Assembly asm = Assembly.GetAssembly(typeof(DateTime));
 PrintAssemblyInfo(asm);
 
とすれば、DateTimeが定義されているアセンブリの情報を取得できます。僕の
PCでは、結果は、
 
CodeBase = file:///C:/Windows/Microsoft.NET/Framework/v2.0.50727/mscorlib.dll
EscapedCodeBase = file:///C:/Windows/Microsoft.NET/Framework/v2.0.50727/mscorlib.dll
FullName = mscorlib, Version = 2.0.0.0, Culture = neutral, PublicKeyToken = b77a5c561934e089
GlobalAssemblyCache = True
ImageRuntimeVersion = v2.0.50727
Location = C:\Windows\Microsoft.NET\Framework\v2.0.50727\mscorlib.dll
GetName = mscorlib, Version = 2.0.0.0, Culture = neutral, PublicKeyToken = b77a5c561934e089

となります。
※ ターゲットのフレームワークは .NET Framework 2.0としてコンパイルして
   います。

■──────────────────────────────────
■Loadメソッド

特定のアセンブリを読み込み、そのAssembly情報を得ることもできます。

Assembly asm = Assembly.Load("SampleClassLib, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null");

利用は限定されますが、特定のフォルダにあるアセンブリを読み込むことも可
能です。

Assembly asm = Assembly.LoadFrom(@"D:\Temp\SampleClassLib.dll");

ただし、MSDNライブラリを読んでいただければわかるとおり、
別のパスが指定されている場合であっても、同一名のアセンブリが読み込まれ
ている場合は、読み込み済みのアセンブリを返すなどの制限がありますので注
意が必要です。通常は、Loadメソッドを利用します。


■──────────────────────────────────
■Assemblyインスタンスから情報を得る

では、このAssemblyのインスタンスから、種々の情報を得てみましょう。
今回は、３つの例を示します。

■Assemblyに含まれる 型情報の一覧を取得

 Assembly asm = Assembly.GetExecutingAssembly();
 var types = asm.GetTypes();
 foreach (Type type in types) {
     Console.WriteLine(type.FullName);
 }

■このアセンブリ内で定義されているパブリック型を取得 

 var types = asm.GetExportedTypes();
 foreach (Type type in types) {
     Console.WriteLine(type.FullName);
 }
 
■このアセンブリが参照するすべてのアセンブリの AssemblyName オブジェク
  トを取得

 
 AssemblyName[] names = asm.GetReferencedAssemblies();
 foreach (AssemblyName a in names) {
    Console.WriteLine(a.FullName);
 } 

┌─┬─────────────────────────┬─┬─┬─┐
│☆│ C#プログラミングレッスン  (ぼぼ週刊）            │＿│□│×│
├─┴─────────────────────────┴─┴─┴─┤
│ Published by Gushwell.                                           │
│ Copyright (C) 2004-2008 Gushwell All rights reserved.            │
│ Microsoft MVP Visual Developer - Visual C#(Apr 2005 - Mar 2009)  │
│-------------------- Gushwell's Page ---------------------------- │
│ 窓際プログラマーの独り言  ：http://blog.livedoor.jp/gushwell/    │
│ 窓際プログラマーの読書三昧：http://gushwell.jugem.jp/            │
│ Gushwell's C# Programing Page：http://gushwell.ifdef.jp/         │
│ C#デザインパターン :                                             │
│  『増補改訂版Java言語で学ぶデザインパターン入門 / 結城 浩(著)』  │
│   のサンプルコードをC#に移植したものを掲載しています。           │
│   移植後のコードの公開は、結城氏の了解を得ています。             │
│   http://gushwell.ifdef.jp/dp/csdpindex.html                     │
└─────────────────────────────────┘
