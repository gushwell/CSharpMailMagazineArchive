┏━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━┳━┳━┓
┃☆┃ C#プログラミングレッスン                         ┃＿┃□┃×┃
┣━┻━━━━━━━━━━━━━━━━━━━━━━━━━┻━┻━┻━┫
┃リフレクション-応用(2) カスタム属性その１                   No.188┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛ 

■──────────────────────────────────
■カスタム属性             

簡単で実用的なコードを思い浮かばないのですが、こんな要求があったとしま
しょう。

「あるオブジェクトの各フィールド値が、ある範囲にあるかどうかを一括して
  チェックしたい。ただし、どのようなフィールドがあるのかは事前に決める
  ことはできない」
  
これを実現するために、カスタム属性を利用した方法を考えてみます。

まずは、利用者側の視点でどういった仕様にするかを考えてみます。

チェックしたいフィールドにカスタム属性を付加することで、取りうる範囲を
表せるようにしましょう。

 class MyClass {
    [IntValidation(MinVal = -10, MaxVal = 10)]
    public int int01;
    [LongValidation(MinVal = -1)]
    public long long01;
    public int int02;
}
    
IntValidation、LongValidation属性は、独自に定義するカスタム属性です。
フィールドint01とlong01は、属性で値の範囲を指定してますので、一括チェ
ックの対象です。
一方、int02は、属性指定がないので、一括チェックの対象外です。

IntValidation、LongValidation ともに、MinVal と MaxVal の２つのプロパ
ティで有効範囲を指定してもらうこととします。MinVal, MaxValを省略した場
合は、それぞれ, MinValue, MaxValueを指定したものとみなします。

フィールドを一括チェックするには

 bool b = FieldsValidator.Validate(myobjec);
 
とstaticメソッドを呼び出すことで、データのチェックを行うことにします。
どのフィールドがエラーなのかこれだけだとわかりませんが、属性の使い方を
説明するのが目的なのでご勘弁を。


■──────────────────────────────────
■カスタム属性の定義

ここまでは、FieldsValidatorの利用者側からの視点で見てきましたが、今度
は、FieldsValidatorの作成者側から見ていきましょう。

以下が、IntValidationAttribute, LongValidationAttribute の定義です。カ
スタム属性もクラスであり、Attributeクラスから派生させることになってい
ます。
カスタム属性の名前は、必ずAttributeを後ろに付加します。
（C#で、属性を利用する際は、Attributeは省略できます）

    [AttributeUsage(AttributeTargets.Field)]
    public class IntValidationAttribute : Attribute {
        public int MinVal { get; set; }
        public int MaxVal { get; set; }
        public IntValidationAttribute() {
            MinVal = int.MinValue;
            MaxVal = int.MaxValue;
        }
    }

    [AttributeUsage(AttributeTargets.Field)]
    public class LongValidationAttribute : Attribute {
        public long MinVal { get; set; }
        public long MaxVal { get; set; }
        public LongValidationAttribute() {
            MinVal = long.MinValue;
            MaxVal = long.MaxValue;
        }
        
    }

このコードからわかるように、カスタム属性は基本的には、ある値を保持して
おくだけのクラスです。
MinValue, MaxValueをプロパティとして公開することで、

    [IntValidation(MinVal = -10, MaxVal = 10)]

のような記述が可能になります。
また、

[AttributeUsage(AttributeTargets.Field)]

とclassに属性を付けることで、このIntValidationAttributeが、フィールド
に適用されることを宣言しています。

    [AttributeUsage(AttributeTargets.Field)]
    public class IntValidationAttribute : Attribute {
        internal int MinVal { get; set; }
        internal int MaxVal { get; set; }
        public IntValidationAttribute(int maxval, int minval) {
            MinVal = minval;
            MaxVal = maxval;
        }
    }
    
と、コンストラクタで引数を取るようにすれば、
    
    [IntValidation(-10, 10)]

と書くようにすることもできます。
個人的には、プロパティを公開するほうが好きです。そのほうが、属性を
利用したコードを見たときに、その意味がわかりやすいと思います。

さて、属性クラスは定義しましたが、まだこれだけだと、

 bool b = FieldsValidator.Validate(myobjec);

という使い方はできません。
当たり前ですが、FieldsValidatorクラスを定義する必要があります。
この説明は、次回にします。

┌─┬─────────────────────────┬─┬─┬─┐
│☆│ C#プログラミングレッスン  (ぼぼ週刊）            │＿│□│×│
├─┴─────────────────────────┴─┴─┴─┤
│ Published by Gushwell.                                           │
│ Copyright (C) 2004-2008 Gushwell All rights reserved.            │
│ Microsoft MVP Visual Developer - Visual C#(Apr 2005 - Mar 2009)  │
│-------------------- Gushwell's Page ---------------------------- │
│ 窓際プログラマーの独り言  ：http://blog.livedoor.jp/gushwell/    │
│ 窓際プログラマーの読書三昧：http://gushwell.jugem.jp/            │
│ Gushwell's C# Programing Page：http://gushwell.ifdef.jp/         │
│ C#デザインパターン :                                             │
│  『増補改訂版Java言語で学ぶデザインパターン入門 / 結城 浩(著)』  │
│   のサンプルコードをC#に移植したものを掲載しています。           │
│   移植後のコードの公開は、結城氏の了解を得ています。             │
│   http://gushwell.ifdef.jp/dp/csdpindex.html                     │
└─────────────────────────────────┘
