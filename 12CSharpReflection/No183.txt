┏━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━┳━┳━┓
┃☆┃ C#プログラミングレッスン                         ┃＿┃□┃×┃
┣━┻━━━━━━━━━━━━━━━━━━━━━━━━━┻━┻━┻━┫
┃リフレクション-Typeクラス                                   No.183┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

みなさん、１ヶ月ぶりですね。また、メールマガジンの発行を再開したいと思
います。どうぞよろしくお願いします。
１ヶ月間お休みをしていましたが、その間何名かの方から、励ましのメールを
いただきました。どうもありがとうございました。

再開第一弾は、リフレクションです。

■──────────────────────────────────
■リフレクションとは

プログラムの実行時に型情報を動的に取り出したり、取り出した情報を元にオ
ブジェクトを操作する機能のことをリフレクション （reflection）と呼びま
す。

どんな場面で使えるのか

 1.型が特定できない場面で、統一的な処理を行いたい場合。
 2.カスタム属性を定義し、その属性を利用したプログラムを作成する場合。
 3.プラグイン可能なプログラムを作成する場合。
 4.開発ツールを作成する場合。

といったところでしょうか。
これらからわかるように、一般のアプリケーションを作成する場面では、頻繁
に利用する機能ではありません。しかし、リフレクションを使えるようになる
と、確実にプログラミングの幅が広がると思います。そういう意味で、とても
重要な機能といえると思います。

■──────────────────────────────────
■Typeクラス

リフレクションを利用するには、System.Refrection 名前空間のクラスを
System.Type クラスと共に用いるわけですが、第一回目の今回は、手始めとし
て、Typeクラスについて説明します。

以下に示すのは、Type情報の主なプロパティを表示するメソッドです。

void PrintTypeInfo(Type type) {
    Console.WriteLine("Assembly: {0}", type.Assembly);
    Console.WriteLine("AssemblyQualifiedName: {0}", 
                                       type.AssemblyQualifiedName);
    Console.WriteLine("BaseType: {0}", type.BaseType);
    Console.WriteLine("FullName: {0}", type.FullName);
    Console.WriteLine("Module: {0}", type.Module);
    Console.WriteLine("Name: {0}", type.Name);
    Console.WriteLine("Namespace: {0}", type.Namespace);
    Console.WriteLine("HasElementType: {0}", type.HasElementType);
}

このメソッドを呼び出すには、Type情報を取得し、引数に渡す必要があります。
Type情報を取り出すには、System.Objectクラスに定義されているGetType()メ
ソッドを呼び出します。
このメソッドを呼び出すことで、そのインスタンスの型情報(Type)を得ること
ができます。

たとえば、

  Type type = typeof(DateTime);
  PrintTypeInfo(type);

とすれば、DateTimeの型情報を印刷することができます。

この結果は以下のようになります。

 Assembly: mscorlib, Version=2.0.0.0, Culture=neutral, 
    PublicKeyToken=b77a5c561934e089
 AssemblyQualifiedName: System.DateTime, mscorlib, Version=2.0.0.0, 
    Culture=neutral, PublicKeyToken=b77a5c561934e089
 BaseType: System.ValueType
 FullName: System.DateTime
 Module: CommonLanguageRuntimeLibrary
 Name: DateTime
 Namespace: System
 HasElementType: False

それぞれのプロパティの意味は以下の通りです。

◆Assembly : Assembly型
    現在の型を含むアセンブリを説明する Assembly インスタンス。
    上記コードでは、ToString()が暗黙的に呼ばれ、アセンブリの完全名が
    表示されています。

◆AssemblyQualifiedName : string型
    Type の読み込み元であるアセンブリの名前を含む、Type のアセンブリ修
    飾名。

◆BaseType : Type型
    現在の Type の直接の継承元の Type。
    上記コードでは、ToString()が暗黙的に呼ばれ、名前空間も含めた型名が
    表示されています。

◆FullName : string型
    Type の完全修飾名を含む文字列。Type の名前空間は含まれますが、アセ
    ンブリは含まれません。
    上記コードでは、ToString()が暗黙的に呼ばれ、名前空間も含めた型名が
    表示されています。

◆Module : Module型
    現在の Type が定義されているモジュール (DLL) を取得します。
    モジュール名が表示されています。

◆Name : string型
    クラス名。（名前空間は除く）

◆Namespace : string型
    Type の名前空間。

◆HasElementType : bool型
   現在の Type が別の型を包含または参照しているかどうかを示す。
   具体的には、Type が配列やポインタであるか、参照渡しである場合は 
   true。それ以外の場合は false。 

Typeクラスには、ここで紹介しきれないほどの沢山のプロパティ、メソッドが
存在しています。是非、MSDNライブラリドキュメントを見てください。
http://msdn.microsoft.com/ja-jp/library/system.type_properties(VS.85).aspx
次回以降では、今回紹介できなかったメソッドなども紹介していく予定です。

■──────────────────────────────────
■型情報を取り出す別の方法

Type情報は以下のコードでも取得できます。

  Type.GetType("System.DateTime");
  
  DateTime dt = new DateTime();
  Type type = dt.GetType();

１つ目のGetType staticメソッドですが、取得する型が、自アセンブリにある
場合や、mscorelib.dllにある場合は、名前空間で修飾された型名だけを与え
ればOKですが、そうでない場合は、完全修飾名を与える必要があります。
たとえば、

 Type.GetType("System.Data.DataColumn, System.Data, Version=2.0.0.0,
Culture=neutral, PublicKeyToken=b77a5c561934e089");
  
というように、指定する必要があります。

自分で定義したクラスについても、
  
  MyClass mc = new MyClass();
  Type type = mc.GetType();
  PrintTypeInfo(type);

とすれば、同様に型情報を印刷できます。
なお、これは型の情報であり、インスタンスの情報では無いことに注意してく
ださい。
つまり、

  if ((new DateTime()).GetType() == DateTime.Now.GetType())
      Console.WriteLine("true");
     
は、trueがプリントされます。


┌─┬─────────────────────────┬─┬─┬─┐
│☆│ C#プログラミングレッスン  (ぼぼ週刊）            │＿│□│×│
├─┴─────────────────────────┴─┴─┴─┤
│ Published by Gushwell.                                           │
│ Copyright (C) 2004-2008 Gushwell All rights reserved.            │
│ Microsoft MVP Visual Developer - Visual C#(Apr 2005 - Mar 2009)  │
│-------------------- Gushwell's Page ---------------------------- │
│ 窓際プログラマーの独り言  ：http://blog.livedoor.jp/gushwell/    │
│ 窓際プログラマーの読書三昧：http://gushwell.jugem.jp/            │
│ Gushwell's C# Programing Page：http://gushwell.ifdef.jp/         │
│ C#デザインパターン :                                             │
│  『増補改訂版Java言語で学ぶデザインパターン入門 / 結城 浩(著)』  │
│   のサンプルコードをC#に移植したものを掲載しています。           │
│   移植後のコードの公開は、結城氏の了解を得ています。             │
│   http://gushwell.ifdef.jp/dp/csdpindex.html                     │
└─────────────────────────────────┘