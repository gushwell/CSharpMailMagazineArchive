┏━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━┳━┳━┓
┃☆┃ C#プログラミングレッスン                         ┃＿┃□┃×┃
┣━┻━━━━━━━━━━━━━━━━━━━━━━━━━┻━┻━┻━┫
┃リフレクション-PropertyInfoクラス                           No.185┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

■──────────────────────────────────
■PropertyInfo

前回の Typeクラスを使うと、任意のクラスのPropertyの情報を取得すること
が可能です。

以下のサンプルコードを見てください。

 Moge obj = new Moge() {
                Number = 123,
                Text = "Sample"
            };
 Type type = obj.GetType();
 foreach (PropertyInfo prop in type.GetProperties()) {
    PrintPropertyInfo(prop);
    Console.WriteLine();
 }

 private static void PrintPropertyInfo(PropertyInfo prop) {
     Console.WriteLine("Name = {0}", prop.Name);
     Console.WriteLine("PropertyType = {0}", prop.PropertyType);
     Console.WriteLine("CanRead = {0}", prop.CanRead);
     Console.WriteLine("CanWrite = {0}", prop.CanWrite);
     Console.WriteLine("DeclaringType = {0}", prop.DeclaringType);
     Console.WriteLine("MemberType = {0}", prop.MemberType);
     Console.WriteLine("Module = {0}", 
                                 prop.Module.FullyQualifiedName);
     Console.WriteLine("ReflectedType = {0}", prop.ReflectedType);
 }

 ...
 class Moge {
     public int Number { get; set; }
     public string Text { get; set; }
 }

GetPropertiesメソッドで、その型に定義されているプロパティ情報
(PropertyInfo)の一覧が得られます。これを foreachでプロパティの数だけル
ープさせ、その情報を表示しています。
結果は、

 Name = Number
 PropertyType = System.Int32
 CanRead = True
 CanWrite = True
 DeclaringType = CSharpLesson.Moge
 MemberType = Property
 Module = D:\Sample\bin\Debug\RefrectionTest.exe
 ReflectedType = CSharpLesson.Moge

 Name = Text
 PropertyType = System.String
 CanRead = True
 CanWrite = True
 DeclaringType = CSharpLesson.Moge
 MemberType = Property
 Module = D:\Sample\bin\Debug\RefrectionTest.exe
 ReflectedType = CSharpLesson.Moge

となります。

これからわかるように、インスタンスからそのクラスが持っているプロパティ
の情報が得られるわけです。

なお、GetPropertiesで得られるProperyInfoは、プロパティのメタ情報を表す
ものであり、メモリ上に存在するオブジェクトのプロパティ値を表しているの
ではないという点に注意してください。

■──────────────────────────────────
■プロパティの値の参照

今度は、オブジェクトのプロパティの値を取得してみましょう。

以下がプロパティの値を参照するサンプルコードです。

 Moge obj = new Moge() {
     Number = 123,
     Text = "Sample"
 };
 Type type = obj.GetType();
 foreach (PropertyInfo prop in type.GetProperties()) {
     string name = prop.Name;
     object value = prop.GetValue(obj, null);
     Console.WriteLine("{0} = {1}", name, value);
 }

GetValueメソッドを使い、第1引数で与えたオブジェクトのプロパティ値を取
り出しています。 第2引数は、インデックス付きプロパティのインデックス値
です。インデックス付きでないプロパティの場合は、この値を null にします。
object型で返りますので、適切な型にキャストして利用します。

■──────────────────────────────────
■プロパティの値の設定

取得ができたので、値を設定するコードも見てみましょう。

 Moge obj = new Moge() {
     Number = 123,
     Text = "Sample"
 };
 Type type = obj.GetType();
 foreach (PropertyInfo prop in type.GetProperties()) {
     if (prop.PropertyType == typeof(Int32))
         prop.SetValue(obj, 987, null);
     else if (prop.PropertyType == typeof(String))
         prop.SetValue(obj, "Hello", null);
     string name = prop.Name;
     object value = prop.GetValue(obj, null);
     Console.WriteLine("{0} = {1}", name, value);
 }

ここでは、SetValueメソッドを使い、Int32型ならば、987を、String型ならば、
"Hello"という文字列を設定しています。
GetValue同様、第1引数には、対象となるオブジェクトを指定します。

注意すべき点は、コンパイル時には型チェックが行われないということです。
誤って

     if (prop.PropertyType == typeof(Int32))
         prop.SetValue(obj, "987", null);


と、Int32型のプロパティに文字列を設定するコードを書いても、コンパイル
エラーにはなりません。実行時エラーとなってしまいます。

┌─┬─────────────────────────┬─┬─┬─┐
│☆│ C#プログラミングレッスン  (ぼぼ週刊）            │＿│□│×│
├─┴─────────────────────────┴─┴─┴─┤
│ Published by Gushwell.                                           │
│ Copyright (C) 2004-2008 Gushwell All rights reserved.            │
│ Microsoft MVP Visual Developer - Visual C#(Apr 2005 - Mar 2009)  │
│-------------------- Gushwell's Page ---------------------------- │
│ 窓際プログラマーの独り言  ：http://blog.livedoor.jp/gushwell/    │
│ 窓際プログラマーの読書三昧：http://gushwell.jugem.jp/            │
│ Gushwell's C# Programing Page：http://gushwell.ifdef.jp/         │
│ C#デザインパターン :                                             │
│  『増補改訂版Java言語で学ぶデザインパターン入門 / 結城 浩(著)』  │
│   のサンプルコードをC#に移植したものを掲載しています。           │
│   移植後のコードの公開は、結城氏の了解を得ています。             │
│   http://gushwell.ifdef.jp/dp/csdpindex.html                     │
└─────────────────────────────────┘
