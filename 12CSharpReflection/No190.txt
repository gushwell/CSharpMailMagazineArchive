┏━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━┳━┳━┓
┃☆┃ C#プログラミングレッスン                         ┃＿┃□┃×┃
┣━┻━━━━━━━━━━━━━━━━━━━━━━━━━┻━┻━┻━┫
┃リフレクション-応用(3) プラグイン その１                    No.190┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

■──────────────────────────────────
■プラグイン

ここでは、本当に簡単なプラグインのサンプルを示します。

 1.インターフェースの定義
 2.本体プログラムの作成
 3.プラグインの作成

の順に説明します。

まずは、インターフェースの定義です。

namespace PluginSample {
    public interface IPlugin {
        string Name { get; }
        bool Execute();
    }
}

プラグインは、必ず上記のインターフェースを持っていることとします。つま
り、このインターフェースに従ってさえいれば、どんなクラスもプラグイン可
能なものにすることができるようにします。

Nameプロパティ
　読み取り専用のプロパティで、そのプラグインを識別する名前を取得
　します。

Executeメソッド
　このプラグインの処理本体。何をするかは、特に定めません。

クラスライブラリとしてプロジェクトを作成し、そこに、このインターフェー
スを定義します。
このクラスライブラリプロジェクトには、このインターフェースだけを定義し
ます。
ビルドすると、このインターフェースだけを持ったアセンブリが作成されます。


■──────────────────────────────────
■本体プログラムの作成

次に、このプラグインの機能を呼び出す側の本体プログラムの作成です。
今回は、コンソールアプリケーションとして作成します。

 class Program {
     static void Main(string[] args) {
         NameValueCollection settings = 
                                 ConfigurationManager.AppSettings;
         foreach (string key in settings.Keys) {
             string val = settings[key];
             ExecutePlugin(val);
         }
     }

     static void ExecutePlugin(string typename) {
         Type type = Type.GetType(typename);
         IPlugin plugin = Activator.CreateInstance(type, null) 
                              as IPlugin;
         if (plugin == null)
             return;

         Console.WriteLine(plugin.Name);
         plugin.Execute();        
     }
 }

このプログラムは、以下のような構成ファイルに定義されたプラグインを、順
に呼び出すというコードです。

<?xml version="1.0" encoding="utf-8" ?>
<configuration>
 <appSettings>
   <add key="sampleA" value="PluginSample.PluginA, PluginASampleLib"/>
   <add key="sampleB" value="PluginSample.PluginB, PluginBSampleLib"/>
 </appSettings>
</configuration>

コードを見ていただければわかるとおり、ConfigurationManagerを使い、上記
構成ファイルを読み込み、addされている要素の数だけ、ExecutePluginメソッ
ドを呼び出しています。

このプログラムの重要な箇所は、ExecutePluginメソッドです。
このメソッドは、

 ExecutePlugin("PluginSample.PluginA, PluginSampleLib");

と呼び出すと、PluginSampleLib.dllを読み込み、PluginSample.PluginA クラ
スのNameプロパティを表示し、それから、Executeメソッドを呼び出していま
す。

利用しているリフレクションの機能は、

 IPlugin plugin = Activator.CreateInstance(type, null) as IPlugin;

の部分だけです。
これでプラグインのインスタンスを生成し、IPlugin のオブジェクトとして、
plugin変数に格納しています。

IPluginインターフェースであることが前提ですので、

 string name = plugin.Name;
 plugin.Execute();  
 
と通常の呼び方でプラグインの機能を呼び出すことができます。この部分も
リフレクションを使ってコーディングすることもできますが、
プログラムを複雑化させるだけなので、その必要はないでしょう。

次回は、残りのプラグインの作成について説明します。

┌─┬─────────────────────────┬─┬─┬─┐
│☆│ C#プログラミングレッスン  (ぼぼ週刊）            │＿│□│×│
├─┴─────────────────────────┴─┴─┴─┤
│ Published by Gushwell.                                           │
│ Copyright (C) 2004-2008 Gushwell All rights reserved.            │
│ Microsoft MVP Visual Developer - Visual C#(Apr 2005 - Mar 2009)  │
│-------------------- Gushwell's Page ---------------------------- │
│ 窓際プログラマーの独り言  ：http://blog.livedoor.jp/gushwell/    │
│ 窓際プログラマーの読書三昧：http://gushwell.jugem.jp/            │
│ Gushwell's C# Programing Page：http://gushwell.ifdef.jp/         │
│ C#デザインパターン :                                             │
│  『増補改訂版Java言語で学ぶデザインパターン入門 / 結城 浩(著)』  │
│   のサンプルコードをC#に移植したものを掲載しています。           │
│   移植後のコードの公開は、結城氏の了解を得ています。             │
│   http://gushwell.ifdef.jp/dp/csdpindex.html                     │
└─────────────────────────────────┘
