┏━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━┳━┳━┓
┃☆┃ C#プログラミングレッスン                         ┃＿┃□┃×┃
┣━┻━━━━━━━━━━━━━━━━━━━━━━━━━┻━┻━┻━┫
┃構造体                                                     No.040 ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

■──────────────────────────────────
■ 構造体

C#の構造体は、文法的には、今までのクラスととてもよく似ています。C#では、
構造体も「オブジェクト」として扱われます。 C言語などの構造体とは、かな
り違いますので注意が必要です。

まずは、構造体の例をみてみましょう。

struct MyDate {
    private int year;
    private int month;
    private int day;
    public MyDate(int year, int month, int day) {
        this.year = year;
        this.month = month;
        this.day = day;
    }
    public string Format() {
        return string.Format("{0}年{1}月{2}日",year, month, day);
    }
    public int Year {
        get { return year; }
    }
    public int Month {
        get { return month; }
    }
    public int Day {
        get { return day; }
    }
}

実は、 この構造体は、以前、No028で解説した、MyDateクラスとほとんど同じ
です。違いは、class という部分を struct にしただけです。
  ※ 説明の都合上 IsLeapYearメソッドは省いています。

使い方も、まったく同じです。

  static void Main() {
      MyDate date = new MyDate(2005,5,28);
      Console.WriteLine(date.Format());
  }


■──────────────────────────────────
■ class と structの違い

では、class と struct は何が違うのでしょうか。その違いは、メモリの保持
の仕方にあります。

MyDateがクラスの場合には、
      MyDate date = new MyDate(2005,5,28);
とすると、date は、インスタンスの参照を保持することになります。

  date
 ┌───┐      ┌───────────┐
 │      ┼──→│MyDateのインスタンス  │
 └───┘      └───────────┘

一方、struct(構造体）の場合には、

  date
 ┌───────────┐
 │MyDateのインスタンス  │
 └───────────┘
となります。date という変数そのものに、MyDateの内容が保持されるのです。
前者のようなデータを参照型と言い、後者のデータを値型といます。

いったい、この違いにどういった意味があるのでしょうか。
以下のコードをじっくりと読んでみてください。

class MyClass {
    public int X;
    public int Y;
}

struct MyStruct {
    public int X;
    public int Y;
}

class Sample {
    static void Main() {
        MyClass mc = new MyClass();
        mc.X  = 10;
        mc.Y = 20;
        MyClass mc2 = mc;
        mc2.X = 0;
        mx2.Y = 1;
        Console.WriteLine("{0} {1}", mc.X,mc.Y);

        MyStruct ms = new MyStruct();
        ms.X  = 10;
        ms.Y = 20;
        MyStruct ms2 = ms;
        ms2.X = 0;
        ms2.Y = 1;
        Console.WriteLine("{0} {1}", ms.X,ms.Y);
    }
}

さて、このコードの出力を想像してみてください。

答えは、
  0,1
  10,20
です。ほとんど同じコードでも結果が違ってきます。その理由は、前述のとお
りデータの持ち方にあります。前述した図（？）を理解できれば、その理由も
明らかだと思います。

クラスの場合には、代入しても、その参照が代入されるだけで、mc も mc2 も
同じインスタンスを指しています。
一方、 構造体では、代入すると、ms2の領域に、msの値がコピーされます。こ
のため、結果が違ってくるのです。
これは、代入だけではなく、メソッドに引数を渡すときにも、同様です。

もしも、データが大きい場合、この違いは、処理速度にも大きな影響を与えま
す。
クラスにするか、構造体にするかという判断は、ケースバイケースですが、ほ
とんどの場合は、クラスにしておけば間違いないと思います。
一般的には、構造体は、非常にプリミティブなデータを扱う場合にのみ使うこ
とになると思われます。

┌─┬─────────────────────────┬─┬─┬─┐
│☆│ C#プログラミングレッスン  (ぼぼ週刊）            │＿│□│×│
├─┴─────────────────────────┴─┴─┴─┤
│ Published by Gushwell  (Microsoft MVP for Visual C#)             │
│ Copyright (C) 2004-2005 Gushwell All rights reserved.            │
│-------------------- Gushwell's Page ---------------------------- │
│ 窓際プログラマーの独り言  ：http://blog.livedoor.jp/gushwell/    │
│ 窓際プログラマーの読書三昧：http://gushwell.jugem.jp/            │
│             よろしかったらアクセスしてみてください！             │
└─────────────────────────────────┘

