┏━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━┳━┳━┓
┃☆┃ C#プログラミングレッスン                         ┃＿┃□┃×┃
┣━┻━━━━━━━━━━━━━━━━━━━━━━━━━┻━┻━┻━┫
┃再びコンストラクタ                                         No.034 ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

■──────────────────────────────────
■ コンストラクタ

前回の Personクラスにコンストラクタを追加してみましょう。

 ※ コンストラクタは、インスタンス生成時に呼び出される特殊なメソッドで
    したね。

 class Person {
     private string name;
     private int age;
     public Person(string name, int age) {  // 追加したコンストラクタ
         this.name = name;
         this.age = age;
     }
     public string Name {
         get { return name; }
         set { name = value; }
     }
     public int Age {
         get { return age; }
         set { age = value; }
     }
 }
 class Employee : Person {
    private int id;
    ... 以下省略

これでコンパイルすると、Employeeクラスのところで、
「引数を'0'個指定できるメソッド Person のオーバーロードはありません」
というエラーメッセージが出てしまいます。

このエラーメッセージを取るには、派生クラスであるEmployeeクラスでも
コンストラクタを定義しなければなりません。

Employeeクラスのコンストラクタは、以下のようになります。

class Employee : Person {
    private int id;
    private string deptName;
    public Employee(int id, string name, int age) : base(name, age) {
      this.id = id;
    }
    ...

ちなみに、独自のコンストラクタを定義した場合、引数なしのデフォルトのコ
ンストラクタは無効になるという仕様になっているようです。

 Person p = new Person();

と、引数無しで、Personのインスタンスを生成しようとすると、エラーになる
ことが確認できます。


■──────────────────────────────────
■ base キーワード

Employeeクラスのコンストラクタでは、新しいキーワード base が出てきまし
た。

: base(name, age)

の部分は、親クラスの、コンストラクタを呼び出すという意味です。親クラス
であるPersonクラスのコンストラクタは２つの引数を取りますから、それに合
わせ、２つの引数を渡してあげる必要があります。

この記述により、親クラスで定義した部分の初期設定が最初に処理され、その
後に、
  this.id = id;
で、Employee内で定義した、フィールドの初期化がなされます。

なお、以下のようには書くことはできませんので注意してください。

  public Employee(int id, string name, int age) {
      base(name, age);    // 親コンストラクタを呼び出したい。
      this.id = id;
  }

┌─┬─────────────────────────┬─┬─┬─┐
│☆│ C#プログラミングレッスン                         │＿│□│×│
├─┴─────────────────────────┴─┴─┴─┤
│ Published by GushWell                                            │
│ Copyright (C) 2004-2005 GushWell All rights reserved.            │
│-------------------- GushWell's Page ---------------------------- │
│ 窓際プログラマーの独り言  ：http://blog.livedoor.jp/gushwell/    │
│ 窓際プログラマーの読書三昧：http://gushwell.jugem.jp/            │
│             よろしかったらアクセスしてみてください！             │
└─────────────────────────────────┘
