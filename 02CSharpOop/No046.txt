┏━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━┳━┳━┓
┃☆┃ C#プログラミングレッスン                         ┃＿┃□┃×┃
┣━┻━━━━━━━━━━━━━━━━━━━━━━━━━┻━┻━┻━┫
┃例外処理 (2) 例外の定義                                    No.046 ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

■──────────────────────────────────
■ 例外の定義

C#では、アプリケーション独自の例外を定義することができます。これにより、
より高レベルな（抽象度の高い）例外を扱えるようになります。

例えば、本来存在すべき社員情報が見つからなかった時に、何らかのエラー処
理を行いたいとします。このときに、アプリケーション独自の例外を定義する
と便利です。
実は、例外もクラスであり、例外クラスを定義するには、System.Exceptionク
ラスを継承することになります。
独自の例外を定義するには、以下のように記述します。

class EmployeeNotFoundException : Exception {
   public EmployeeNotFoundException( string message )
    : base( message ) {
   }
}

※ System.Exceptinは、全ての例外のルートクラスになっています。

例外もクラスですので、独自のフィールドやメソッドを追加することも可能で
す。エラー詳細番号のようなフィールドを追加し、ミドルウェアなどが返すエ
ラーコードを入れておきデバッグで役立てる、なんて使い方もできると思いま
す。

■──────────────────────────────────
■ 例外の発生

例外を発生させるには、throw ステートメントを使います。その形式は、

  throw <例外オブジェクト>;

です。
通常は、throwする時に例外オブジェクトを生成しますので、
EmployeeNotFoundException 例外を発生させるには、

  throw new EmployeeNotFoundException("社員がみつかりません");

のように書きます。

実際のアプリケーションでは、

try {
    Employee emp = empmgr.Find(code);  // 社員コードによる検索
    if ( emp == null ) {
        // 必ず見つかるはずなのに、見つからなかった。
        string msg = string.Format("{0}の社員がみつかりません",code);
        throw new  EmployeeNotFoundException(msg);
    }
    ....
} catch (EmployeeNotFoundException e) {
    Console.WriteLine(e.Message);
}

のような記述になるでしょうか。
この例では、 try ブロックの中で、例外をthrowしていますが、あるメソッド
を呼び出し、 呼び出されたメソッド内で、EmployeeNotFoundException例外を
スローしてもかまいません。

例外を使えば、 本来やるべき正しい処理を try ブロックに記述し、エラー処
理はcatch ブロックに記述することになりますので、とても見通しの良いプロ
グラムを書くことができます。
例外を使わずにエラー処理を書こうとすると、正常な処理の流れと、エラー処
理が一つのコードの中で、渾然一体となり、複雑なコードとなってしまう危険
があります。


┌─┬─────────────────────────┬─┬─┬─┐
│☆│ C#プログラミングレッスン  (ぼぼ週刊）            │＿│□│×│
├─┴─────────────────────────┴─┴─┴─┤
│ Published by Gushwell  (Microsoft MVP for Visual C#)             │
│ Copyright (C) 2004-2005 Gushwell All rights reserved.            │
│-------------------- Gushwell's Page ---------------------------- │
│ 窓際プログラマーの独り言  ：http://blog.livedoor.jp/gushwell/    │
│ 窓際プログラマーの読書三昧：http://gushwell.jugem.jp/            │
│             よろしかったらアクセスしてみてください！             │
└─────────────────────────────────┘
