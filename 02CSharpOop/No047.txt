┏━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━┳━┳━┓
┃☆┃ C#プログラミングレッスン                         ┃＿┃□┃×┃
┣━┻━━━━━━━━━━━━━━━━━━━━━━━━━┻━┻━┻━┫
┃例外処理 (3) try-finally                                   No.047 ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

■──────────────────────────────────
■ try-finally

try-finallyは、終了処理を確実に行うための構文です。

try {
    n = int.Parse(Console.ReadLine());   // (*)
    int a = 10 / n;
    Console.WriteLine("答えは {0} です", a);
} finally {
    Console.WriteLine("finally処理");
}

このコードを実行した場合、0 を入力したり、数値文字列でない文字列を入力
すると、(*)の行で例外が発生しますが、この例外が発生した時点で、処理は、
finallyブロックへと移動します。一方、数値文字列を入力した場合は、try 
ブロックを最後まで処理し、最後にfinally ブロックを処理します。つまり、
try-finallyを使えば、例外の発生有無に関わらず終了処理を実行させること
ができます。

では、次のコードの場合はどうでしょうか。

try {
    n = int.Parse(Console.ReadLine());
    if ( n == 0 )
        return;     // (*2)
    int a = 10 / n;
    Console.WriteLine("答えは {0} です", a);
} finally {
    Console.WriteLine("finally処理");
}

(*2)で、return しています。このような場合は、return文に出会うと、
finally処理に制御が移り、その後、当該メソッドからリターンします。
つまり、どんな場合でも確実に、finally処理は実行されるということです。


■──────────────────────────────────
■ どんな時に使えるのか、

このtry-finally構文は、どんな時に利用されるのでしょうか。
よく利用されるのは、データベースやファイルのクローズを行う場面です。
以下に、コードの断片を示します。

 StreamReader sr = new StreamReader("TestFile.txt");
 try {
      String line;
      while ((line = sr.ReadLine()) != null) {
         Console.WriteLine(line);
     }
 } finally {
     sr.Close();
 }

このコードでは、try ブロックの中で、何らかのエラーが発生した時でも確実
にファイルをクローズするようにしています。


■──────────────────────────────────
■ using

先ほどのコードは、 最後にClose処理をしたいだけなのに、かなり面倒なコー
ドを記述しなければなりませんでした。
実は、usingを使うと、もっと簡単に記述できます。

 using (StreamReader sr = new StreamReader("TestFile.txt")) {
     String line;
     while ((line = sr.ReadLine()) != null) {
         Console.WriteLine(line);
     }
 }

以下、.NET Framewrok SDK のドキュメントから抜粋
  --------------------------------------------------------------------
  using ステートメントでインスタンスを作成して、using ステートメントの
  終了時に Dispose メソッドが呼び出されることを保証します。 using ステ
  ートメントが終了するのは、using ステートメントの末尾に到達したときか、
  例外がスローされたなどの理由で、ステートメントの末尾に到達する前に制
  御がステートメント ブロックを離れたときです。
  --------------------------------------------------------------------

usingを使うと、try-finallyブロックが自動生成されますので、実質的に
usingを使ったコードと、try-finallyを使ったコードは、同じ意味になります。
usingステートメントでは、finallyブロックでは、Disposeメソッドを呼び出
す仕様になっています。StreamReaderなど、ファイルアクセスに関するクラス
では、利便性を考慮して、
Disposeと等価なCloseメソッドが用意されていますので、 この場合は、using
ステートメントの最後には、Closeメソッドが呼ばれると考えて良いでしょう。


■──────────────────────────────────
■ try-catch-finally

C#のtryステートメントの一般的な形式は、

 try {
    ...
 } catch {
    ...
 } finally {
    ...
 }

となっており、 一つの try 文の中に、エラー処理と、クリーンアップ処理を
両方書けるようになっています。tryブロックで例外が発生すると、catchブロ
ックに制御が移り、 その後、finallyブロックが実行されます。 
例外が発生しなかった場合には、try ブロックの最後まで処理が進んだあと、
finallyブロックに制御が移ります。
なお、今まで見てきたように、catch, finally どちらか一方は省略可能です。


┌─┬─────────────────────────┬─┬─┬─┐
│☆│ C#プログラミングレッスン  (ぼぼ週刊）            │＿│□│×│
├─┴─────────────────────────┴─┴─┴─┤
│ Published by Gushwell  (Microsoft MVP for Visual C#)             │
│ Copyright (C) 2004-2005 Gushwell All rights reserved.            │
│-------------------- Gushwell's Page ---------------------------- │
│ 窓際プログラマーの独り言  ：http://blog.livedoor.jp/gushwell/    │
│ 窓際プログラマーの読書三昧：http://gushwell.jugem.jp/            │
│             よろしかったらアクセスしてみてください！             │
└─────────────────────────────────┘
