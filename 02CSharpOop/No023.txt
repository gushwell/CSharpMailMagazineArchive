┏━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━┳━┳━┓
┃☆┃ C#プログラミングレッスン                         ┃＿┃□┃×┃
┣━┻━━━━━━━━━━━━━━━━━━━━━━━━━┻━┻━┻━┫
┃アクセス修飾子                                             No.023 ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

今回も MyDateクラスを例に、アクセス修飾子について説明します。
しばらくは、このMyDateクラスを使い、クラスについて解説してゆく予定です。

■──────────────────────────────────
■ MyDateクラスの欠点

前回、作成した MyDateクラスですが、ちょっと困ったことがあります。

 class MyDate {
     public int year;
     public int month;
     public int day;
     public void SetDate(int y, int m, int d) {
         year = y;
         month = m;
         day = d;
     }
     public string Format() {
         return string.Format("{0}年{1}月{2}日",
                                  year,month,day);
     }
 }

それは、

   MyDate date = new MyDate();
   date.SetDate(2005,2,10);
   date.day = 40;

と、存在しえない日付がセットされてしまうということです。

   date.SetDate(2005,2,40);

とやっても正しくない日付がセットされてしまいますが、この２つには本質的
な違いが存在します。 それは、SetDateメソッドでは、メソッド内で日付チェ
ックをし、存在しえない日付をセットできないようにすることが可能ですが、

   date.day = 40;

のようにフィールドに直接代入されてしまうとMyDateクラスでは防ぎようがな
い、ということです。
これを防ごうと思うと、MyDateクラスを利用する側で、正しい日付かどうかを
チェックするコードを書かなくてはなりません。小さなプログラムならばそれ
も良いでしょうが、大きなプログラムだと、あちこちに日付チェックのコード
が書かれることになり、好ましくありません。

つまり、year, month,day というデータは、それぞれ単独で変更できるのは良
くないということです。 このため、year, month, day は外側からは直接アク
セスできないようにします。この時に使うキーワードが privateです。


■──────────────────────────────────
■ private と public キーワード

MyDateクラスをprivateキーワードを使い書き変えてみます。

 class MyDate {
     private int year;      // public を privateに変更
     private int month;     // public を privateに変更
     private int day;       // public を privateに変更
     public void SetDate(int y, int m, int d) {
         year = y;
         month = m;
         day = d;
     }
     public string Format() {
         return string.Format("{0}年{1}月{2}日",
                                  year,month,day);
     }
 }

このようにすることで、 year, month, day はMyDateクラスの外側からは見る
ことができなくなります。実際、Mainメソッドで、

  date.day = 40;

と書くと、コンパイルエラーとなります。

public というのは、privateの逆で、公開することを意味します。
どこからでもアクセスすることが可能です。

なお、 public, privateのように、アクセス許可を指定するキーワードをアク
セス修飾子と呼んでいます。アクセス修飾子には、protected, internal とい
ったキーワードもありますが、これについては、またの機会に説明します。

■──────────────────────────────────
■ 情報隠蔽

このように、外部からデータをアクセスできないようにすることを情報隠蔽と
いいます。
「データを公開することで、いつでもどこでも参照変更可能にしたほうが、便
  利なのにな～」
と思う人もいるかもしれません。しかし、便利な反面、
 ・プログラムの安全性が損なわれる。
 ・プログラムの見通しが悪くなる。
 ・デバッグが困難になる。
 ・硬直したプログラムになり、修正が困難になる。
など、デメリットがあります。

私たちが日頃利用している、様々な機械類は、ほぼ例外なく情報隠蔽されてお
り、内部の構造にアクセスできないようになっています。内部の構造にアクセ
スするのは、修理のときなど特別な場合だけです。
ソフトウェアについても、同じことをやりましょう、ということですね。

でも、日付という概念にとって、year, month, day というのは、内部構造で
はないから隠蔽しなくても、良いのでは、と考えるかもしれません。

  # 実際、year,month,day は、後ほど、別の方法で公開することになります。

そういう意味では、データを隠蔽するのではなく、実装を隠蔽すると言い代え
た方が良いのかもしれません。
内部で、
   int year;
   int month;
   int day;
とデータを保持するるのではなく
   int julianDay;   // ユリウス日
                    // 紀元前4713年1月1日からの連続した経過日数
と保持し、日付を扱うことも可能ですから、使う側に取っては、どちらでも
利用できるように、実装を隠すことが、大切になるわけです。

ちょっと、C#の話題から話が外れました (^ ^;


■──────────────────────────────────
■ アクセス修飾子を省略したら

以下のようにアクセス修飾子を省略した場合、どうなるのでしょうか。

 class MyDate {
     int year;      // public を privateに変更
     int month;     // public を privateに変更
     int day;       // public を privateに変更
     void SetDate(int y, int m, int d) {
         year = y;
         month = m;
         day = d;
     }
     string Format() {
         return string.Format("{0}年{1}月{2}日",
                                  year,month,day);
     }
 }

試していただければ分かると思いますが、 Mainメソッドで、SetDate, Format
を呼び出している箇所で、コンパイルエラーになります。

これは、 SetDate, Formatメソッドが Main メソッドからは見えなくなってい
ることを意味します。クラスのメンバ（フィールド、メソッドなど）で、アク
セス修飾子を省略した場合、private が指定されたものとして扱われます。

┌─┬─────────────────────────┬─┬─┬─┐
│☆│ C#プログラミングレッスン                         │＿│□│×│
├─┴─────────────────────────┴─┴─┴─┤
│ Published by GushWell                                            │
│ Copyright (C) 2004-2005 GushWell All rights reserved.            │
│-------------------- GushWell's Page ---------------------------- │
│ 窓際プログラマーの独り言  ：http://blog.livedoor.jp/gushwell/    │
│ 窓際プログラマーの読書三昧：http://gushwell.jugem.jp/            │
│             よろしかったらアクセスしてみてください！             │
└─────────────────────────────────┘

