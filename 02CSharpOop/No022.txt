┏━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━┳━┳━┓
┃☆┃ C#プログラミングレッスン                         ┃＿┃□┃×┃
┣━┻━━━━━━━━━━━━━━━━━━━━━━━━━┻━┻━┻━┫
┃メソッド                                                   No.022 ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

■──────────────────────────────────
■ メソッドとは

オブジェクト指向の本を読むと、
「クラスは、データと振る舞いをカプセル化したものである」
のような説明がよくされていますが、MyDateクラスは、まだ、データだけを
一つにまとめただけにすぎません。

 class MyDate {
     public int year;
     public int month;
     public int day;
 }

データが存在すれば、必ずそのデータを操作する処理が存在します。これらが
離れ離れにあるよりは、一緒にあったほうが管理しやすいですよね。C#ではこ
の処理を関数としてクラスに定義することができます。この関数のことをC#で
は、メソッドと呼んでいます。

なお、C#では、クラスの外側で、関数を定義することはできません。何らかの
処理をしたい場合には、必ずクラス内のメソッドとして定義する必要がありま
す。
今まで、以下のようなプログラムを何度となく紹介してきました。

 class Program {
     static void Main() {
         Console.WriteLine("Hello world!");
     }
 }

もうお解かりのとおり、これは、Programというクラスを定義し、そのなかに
Mainメソッドを定義しているわけですね。

 ※ static の意味については、後日改めて説明します。

■──────────────────────────────────
■ メソッドの定義

それでは、早速、MyDateクラスにメソッドを定義してみたいと思います。
前回説明したプログラムを再度眺めてみると、以下のような部分があります。

  date1.year = 2004;
  date1.month = 12;
  date1.day = 29;
  date2.year = 2005;
  date2.month = 1;
  date2.day = 10;

この部分は、処理が重複していますね。まずはこの部分をメソッドにしてみま
しょう。

 class MyDate {
     public int year;
     public int month;
     public int day;
     public void SetDate(int y, int m, int d) {
         year = y;
         month = m;
         day = d;
     }
 }

このSetDate がメソッドになります。年月日を受け取り、自分自身のフィール
ドに、セットしています。


■──────────────────────────────────
■ メソッドの呼び出し

SetDate メソッドの使い方は以下の通りです。

  MyDate date1 = new MyDate();
  date1.SetDate(2004,12,29);   // ※
  MyDate date2 = new MyDate();
  date2.SetDate(2005,1,10);    // ※

  ※で示した行が、メソッドを呼び出しているところです。

メソッドを呼び出すには、

  <変数名>.<メソッド名>（引数）

という書式になります。
メソッドを呼び出すには、どのインスタンスに対する処理なのかを明示してあ
げる必要があります。 そうしなかったら、2004,12,29 というデータを複数存
在する（かもしれない）日付インスタンスのどれにセットしたらよいかの区別
がつきません。オブジェクト指向的に言えば、

「date1 というオブジェクト(インスタンス）に対して、 『日付を2004年12月
  29日にセットしてね』とメッセージを送っている」

と言えるでしょうか。 メッセージを受けた date1 オブジェクトは、自分自身
のデータである、year, month,day に受け取った年、月、日をセットする処理
を行うわけです。

■──────────────────────────────────
■ Formatメソッドの追加

MyDateクラスにもうひとつメソッドを追加してみたいと思います。
前回の最後に掲載したプログラムコードの中に、以下のような日付をプリント
するコードがあります。

class Program {
    static void Main(string[] args) {
        ...
    }
    private static void PrintDate(MyDate date) {
        Console.WriteLine("{0}年{1}月{2}日",
                          date.year, date.month, date.day);
    }
}

このPrintDate というメソッドの中の文字列を組み立てている部分をMyDateク
ラスのメソッドとしてみましょう。
以下のようになります。

 class MyDate {
     public int year;
     public int month;
     public int day;
     public void SetDate(int y, int m, int d) {
         year = y;
         month = m;
         day = d;
     }
     public string Format() {
         return string.Format("{0}年{1}月{2}日",
                                  year,month,day);
     }
 }

この MyDate クラスを利用する Program クラスは以下のように変更できます。

 class Program {
    static void Main(string[] args) {
        MyDate[] dates = new MyDate[2];
        dates[0] = new MyDate();
        dates[0].SetDate(2004,12,29);
        dates[1] = new MyDate();
        dates[1].SetDate(2005,1,10);
        foreach ( MyDate dt in dates )
            Console.WriteLine(dt.Format());  // ここを変更
    }
 }

MyDateクラスにメソッドを追加することで、Programクラスと MyDateクラス
の役割がより明確になった思います。

┌─┬─────────────────────────┬─┬─┬─┐
│☆│ C#プログラミングレッスン                         │＿│□│×│
├─┴─────────────────────────┴─┴─┴─┤
│ Published by GushWell                                            │
│ Copyright (C) 2004-2005 GushWell All rights reserved.            │
│-------------------- GushWell's Page ---------------------------- │
│ 窓際プログラマーの独り言  ：http://blog.livedoor.jp/gushwell/    │
│ 窓際プログラマーの読書三昧：http://gushwell.jugem.jp/            │
│             よろしかったらアクセスしてみてください！             │
└─────────────────────────────────┘