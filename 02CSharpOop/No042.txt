┏━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━┳━┳━┓
┃☆┃ C#プログラミングレッスン                         ┃＿┃□┃×┃
┣━┻━━━━━━━━━━━━━━━━━━━━━━━━━┻━┻━┻━┫
┃object                                                     No.042 ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛


■──────────────────────────────────
■ 全てがobject

C#は、全てのデータが、objectから派生しています。
全ての型とは、前回説明した値型も参照型も全てとなります。
そう、int や string も objectから派生しているオブジェクトなのです。
これが、C#の大きな特徴となっています。

No036「継承関係のある変数の代入」で説明したように、 派生クラスのインス
タンスはそのスーパークラスの変数に代入することができます。
つまり、C#では、次のようなコードを書くことができます。

  int n = 10;
  object obj = n;      // intをobjectの変数に代入
  int m = (int)obj;    // intに戻す （キャスト）

object は、 全てのデータ型の最上位のクラスとなっていますので、object型
の変数には、何でも代入することができます。
 ※この便利な性質を利用して、ArrayListやHashtableといったコンテナクラス
   が実現できています。
   ArrayListやHashtableについては、機会がありましたら、別途説明したいと
   思います。
いったん、object型の変数に入れたものを、再度、その型の変数に戻してやる
ときには、キャストをします。


■──────────────────────────────────
■ int, string にもメソッドがある

他の言語を既に経験されている方は、ちょっと不思議に思うかもしれませんが、
intやstringもいわゆるオブジェクトですから、 メソッドやプロパティを持っ
ています。

例えば、
   int n = 10;
   string s = n.ToString();

などのように、整数にも、ToString() というメソッドが使えますし、

   if ( n != int.MaxValue ) {
       ...

と、int の最大値を staticプロパティであるMaxValueで取得することもでき
ます。

string型も同様ですね。

   int len = str.Length;
   string str2 = str.Insert(0,"XYZ");

などのように書くことができます。
string型には、沢山のメソッドが用意されていますので、是非、ヘルプなどで
調べてください。

■──────────────────────────────────
■ C#のデータ型は、CLRの型の別名

C#が用意している基本データ型は、実は、.NET の共通言語ランタイム（Common
Language Runtime)の型のエリアス(別名）になっています。
いくつか例に挙げると
  int    System.Int32
  double System.Double
  bool   System.Boolean
  string System.String

などです。
また、object型も、System.Object の別名です。

これは、 C# でも、VB.NETでも共通言語ランタイムにある同じデータ型を使っ
ていることを意味します。つまり、異なる言語間でデータの相互利用ができる
ようになっています。
さきほど説明した、int や stringのメソッド（やプロパティ）というのは、
.NET の共通言語ランタイム側に用意されているメソッドやプロパティなわけ
です。

┌─┬─────────────────────────┬─┬─┬─┐
│☆│ C#プログラミングレッスン  (ぼぼ週刊）            │＿│□│×│
├─┴─────────────────────────┴─┴─┴─┤
│ Published by Gushwell  (Microsoft MVP for Visual C#)             │
│ Copyright (C) 2004-2005 Gushwell All rights reserved.            │
│-------------------- Gushwell's Page ---------------------------- │
│ 窓際プログラマーの独り言  ：http://blog.livedoor.jp/gushwell/    │
│ 窓際プログラマーの読書三昧：http://gushwell.jugem.jp/            │
│             よろしかったらアクセスしてみてください！             │
└─────────────────────────────────┘

