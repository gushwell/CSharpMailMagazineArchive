┏━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━┳━┳━┓
┃☆┃ C#プログラミングレッスン                         ┃＿┃□┃×┃
┣━┻━━━━━━━━━━━━━━━━━━━━━━━━━┻━┻━┻━┫
┃名前空間(2)                                                No.032 ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

前回に引き続いて、今回も名前空間のお話です。今回は、なぜ名前空間という
ものがあるのかを考えていきたいと思います。

■──────────────────────────────────
■ namespace キーワード

C#では、全てのクラスは、何らかの名前空間に属していることになっています。
ですから、 通常は、以下のように 名前空間を指定し、その中にクラスを定義す
ることになります。

using System;

namespace Gushwell.Sample {
    class Program {
        static void Main(string[] args) {
            Console.WriteLine("Hello! C# world.");
        }
    }
}

上のコードは、Program というクラスは、Gushwell.Sample という名前空間に
属しているということを指定しています。

なお、前回までのプログラムでは、namespace キーワードを使っていませんで
した。このように、名前空間を明示的に指定しないと、既定の名前空間（無名
の名前空間）が作成されます。この無名の名前空間は、グローバル名前空間と
も呼ばれています。


■──────────────────────────────────
■ 何のために名前空間というものがあるのか

名前空間には、以下の２つの目的があります。

１．クラスのカテゴリ分け
    名前空間は、関連するクラスを論理的なカテゴリにグループ分けするのに
    使われます。これにより、クラスの管理を容易にしています。
    プログラムを始めたばかりの人には、この利点はなかなか実感として沸か
    ないと思いますが、大規模なシステムを作成する場合には、とても重要な
    機能です。

２．クラス名の衝突に対処する
    多くのクラスを作成していると、 他の人（or 会社）が作成したクラス名
    と同じクラス名を作成する可能性もあります。
    この２つの同名のクラスを同時に利用しようと思うと、名前の衝突が起こ
    ってしまいます。
    この時に、名前空間を指定することで、両方のクラスを使うことが可能に
    なります。
    例えば、

    namespace Gushwell.Lib {
        class SuperGraph {
            ...
        }
    }

    namespace HogeHoge.Soft {
        class SuperGraph {
            ...
        }
    }

    という２つのSuperGraph クラスを利用したい時に、以下のように完全修飾
    名を指定することで、衝突を回避できます。

    Gushwell.Lib.SuperGraph gr1 = new Gushwell.Lib.SuperGraph();
    HogeHoge.Soft.SuperGraph gr2 = new HogeHoge.Soft.SuperGraph();


■──────────────────────────────────
■ 名前空間のエリアス

さて、先ほどの例では、名前の衝突を防ぐために、完全修飾名を記述していま
した。これでは、長い名前をそのたびにタイプしなければならないので、結構
面倒ですね。 そんな時には、usingのもう一つの機能である、エリアスの指定
を利用します。

  using Gush = Gushwell.Library;
  using Hoge = HogeHoge.Soft;

このようにすれば、プログラム内では、

  Gush.SuperGraph gr1 = new Gush.SuperGraph();
  Hoge.SuperGraph gr2 = new Hoge.SuperGraph();

と記述できるようになります。

┌─┬─────────────────────────┬─┬─┬─┐
│☆│ C#プログラミングレッスン                         │＿│□│×│
├─┴─────────────────────────┴─┴─┴─┤
│ Published by GushWell                                            │
│ Copyright (C) 2004-2005 GushWell All rights reserved.            │
│-------------------- GushWell's Page ---------------------------- │
│ 窓際プログラマーの独り言  ：http://blog.livedoor.jp/gushwell/    │
│ 窓際プログラマーの読書三昧：http://gushwell.jugem.jp/            │
│             よろしかったらアクセスしてみてください！             │
└─────────────────────────────────┘

