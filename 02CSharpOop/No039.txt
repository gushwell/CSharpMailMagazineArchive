┏━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━┳━┳━┓
┃☆┃ C#プログラミングレッスン                         ┃＿┃□┃×┃
┣━┻━━━━━━━━━━━━━━━━━━━━━━━━━┻━┻━┻━┫
┃object                                                     No.039 ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

■──────────────────────────────────
■ object

C#では、あらゆる型は、objectクラスが基底クラスとなります。つまり、クラ
ス階層の頂点にあるのが object クラスとなります。

そのため、クラスを定義する際、以下のように、継承元を指定しなかったとき
には、その継承元である親クラスは、objectクラスとなります。

    class Shape {
        private double x;
        private double y;
        ...
    }

は、

    class Shape : object {
        private double x;
        private double y;
        ...
    }

と同じことです。

このことはとても大きな意味をもっています。それは、全てのクラスは、
objectである、ということです。
つまり、

 Shapeクラスは、objectである
 Triangleクラスも objectである。
 Rectangleクラスも objectである。
 .... クラスも objectである。

という is a 関係が成り立ちますので、

  object o1 = new Triangle(10,20);
  object o2 = new Rectangle(8,15);

という代入が可能になります。
また、

  void Foo(object o) {
     ...
  }

というメソッドがあった場合に、

    Shape shape = new Triangle(10,20);
    Foo(shape);

と書くことができます。 Fooメソッドは、どんなインスタンスも受け取ること
ができるメソッドなわけです。

このことはとても重要です。なぜ、重要なのか、それは、C#と.NET Framework
を使って行くうちに、徐々に理解できると思います。
（すみません、僕の文章能力が低いせいで、簡潔に説明することができません）


■──────────────────────────────────
■ objectクラスのメソッド

objectには、４つのppublicメソッドが定義されています。その４つは、

 1. Equals
 2. GetHashCode
 3. GetType
 4. ToString

です。今は、その使い方の説明はしませんが、最低でも ToString() というメ
ソッドがあることだけは、記憶の片隅に入れておいてください。

この ToStringというメソッドですが、 objectクラスでは、そのクラスのフル
ネームを返す仕様になっています。

    Shape shape = new Triangle(10,20);
    Console.WriteLine(shape.ToString());

とすれば、Shapeというクラス名が出力されます。
この ToString()は、virtualメソッドですので、派生したクラスで、override
することができます。
例えば、

    abstract class Shape  {
        private double x;
        private double y;
        public Shape(double width, double height) {
            x = width;
            y = height;
        }
        public double X {
            get { return x; }
        }
        public double Y {
            get { return y; }
        }
        public abstract double GetArea();

        public override string ToString() {   // ここを追加
            return "(" + x.ToString() + "," + y.ToString() + ")";
        }
    }

と ToString() を overrideした場合、 以下のコードを動かすと、クラス名で
はなく、"(10,20)" という文字列が表示されるようになります。

    Shape shape = new Triangle(10,20);
    Console.WriteLine(shape.ToString());

TriangleのToString() は定義していませんが、親クラスである Shapeクラスの
ToString()を、Triangleは受け継ぎますので、Shapeで定義した ToString()が
呼ばれるという訳です。

┌─┬─────────────────────────┬─┬─┬─┐
│☆│ C#プログラミングレッスン  (ぼぼ週刊）            │＿│□│×│
├─┴─────────────────────────┴─┴─┴─┤
│ Published by Gushwell  (Microsoft MVP for Visual C#)             │
│ Copyright (C) 2004-2005 Gushwell All rights reserved.            │
│-------------------- Gushwell's Page ---------------------------- │
│ 窓際プログラマーの独り言  ：http://blog.livedoor.jp/gushwell/    │
│ 窓際プログラマーの読書三昧：http://gushwell.jugem.jp/            │
│             よろしかったらアクセスしてみてください！             │
└─────────────────────────────────┘

