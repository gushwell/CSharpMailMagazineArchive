┏━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━┳━┳━┓
┃☆┃ C#プログラミングレッスン                         ┃＿┃□┃×┃
┣━┻━━━━━━━━━━━━━━━━━━━━━━━━━┻━┻━┻━┫
┃列挙型                                                     No.044 ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

■──────────────────────────────────
■ 列挙型

複数の関連する定数を扱う場合は、列挙型を使うと便利です。たとえば、曜日
をプログラムで扱う場合には、以下のように、enumキーワードを使い、列挙型
を定義します。

  public enum DayWeek {
     Sunday,
     Monday,
     Tuesday,
     Wednesday,
     Thursday,
     Friday ,
     Saturday
  }

DayWeek は、ユーザが自由に決めてよい名前で、列挙型の名前です。

  ※ 本当は、  DayOfWeek という名前にしたいのですが、 .NET Frameworkで
     DayOfWeekがすでに定義されているため、 混乱を避ける意味で、DayWeek
     としました。
     当たり前ですが、実際のプログラムでは、.NET Framwork の DayOfWeek
     を使ってください。

Sunday から、Saturdayは、列挙型が取りうる値を名前で定義しています。
こうすることで、DayWeekという型が定義され、その取りうる値が、Sunday か
らSaturdayまでの７つに限定することができます。

プログラムで、このDayWeek列挙型を使うには、

  DayWeek dw = DayWeek.Sunday;
  if ( dw == DayWeek.Saturday )
      Console.WriteLine("土曜日です");

のように記述します。 Subday, Saturday の前に、DayWeek という列挙型の名
前が付いてることに注意してください。

■──────────────────────────────────
■ constとの違い

これと同等のことは、以下のように 定数（const）を使っても可能です。

  public class Youbi {
      public const int Sunday    = 0;
      public const int Monday    = 1;
      public const int Tuesday   = 2;
      public const int Wednesday = 3;
      public const int Thursday  = 4;
      public const int Friday    = 5;
      public const int Saturday  = 6;
  }

  int youbi = Youbi.Sunday;
  if (youbi == Youbi.Monday) {
      ...
  }

しかし、 constの場合は、-1 や 7 といったありえない値を代入することがで
きてしまいます。そのため、const よりも、enumを使った方が、プログラムの
堅牢性を高めることができます。

   int youbi = -1;       // これはコンパイルエラーにならない！！
   DayWeek youbi = -1;   // これはコンパイルエラー

  <<補足>>
     C#では、クラスの外側で、定数を定義することができません。
     そのため、ここでは、Youbiクラスの中に、曜日の定数を定義しました。
     なお、 const は、暗黙的に static になっていますので、staticを付け
     る必要はありません。言い方を変えれば、C#では、クラスに属する(つま
     りstaticな）constは、定     義できますが、 インスタンスに属する 
     constを定義することはでできないということです。


■──────────────────────────────────
■ 列挙型の実際の例

この DayWeek 列挙体を使い、 MyDateクラスに、DayOfWeek プロパティを定義
してみます。

public enum DayWeek {
    Sunday,
    Monday,
    Tuesday,
    Wednesday,
    Thursday,
    Friday ,
    Saturday
}

public class MyDate {
    private int year;
    private int month;
    private int day;
    public MyDate(int year, int month, int day) {
        this.year = year;
        this.month = month;
        this.day = day;
    }
    public static bool IsLeapYear(int year) {
        return ((year % 4 == 0) &&
               ((year % 100 != 0) || (year % 400 == 0)));
    }
    public bool IsLeapYear() {
        return MyDate.IsLeapYear(this.year);
    }
    public override string ToString() {
        return string.Format("{0}年{1}月{2}日", year, month, day);
    }
    public int Year {
        get { return year; }
    }
    public int Month {
        get { return month; }
    }
    public int Day {
        get { return day; }
    }
    public DayWeek DayOfWeek {  // ここを追加
        get {
            int[] t = {0, 3, 2, 5, 0, 3, 5, 1, 4, 6, 2, 4};
            int y = year - ((month < 3) ? 1 : 0);
            int dow = (y + y/4 - y/100 + y/400 + t[month-1] + day) % 7;
            return (DayWeek)(dow);
        }
    }
}

この DayOfWeek プロパティでは、 ある計算をし、曜日を求めています。
 ※ 訳け分からない計算式には目をつむってください。

ここで注目すべき点は、計算した結果である int 型の値を DayWeek 型にキャ
ストしていることです。 キャストすることで、int と 列挙体の相互変換が
可能になります。
もちろん、こういったキャストをするには、列挙型のそれぞれの識別子に、ど
んな数が割り当てられているのかを把握しておく必要があります。

また、以下のように、それぞれの識別子に明示的に値を割り当てることもでき
ます。この方が安心できますね。

  public enum DayWeek {
     Sunday    = 0,
     Monday    = 1,
     Tuesday   = 2,
     Wednesday = 3,
     Thursday  = 4,
     Friday    = 5,
     Saturday  = 6
  }

  ※ 明示的に値を割り当てる場合には、0 から始める必要はありません。
     また、1ずつ増加させる必要もありません。

ちなみに、 値を省略した場合には、0から順番に値が割り振られますので、値
を明示しない場合であっても、  Sundayには  0  が, Mondayには 1 が、 ...
Saturdayには 6 が割り当てられています。

最後に、この DayOfWeek プロパティの使用例を載せておきます。

  MyDate dt1 = new MyDate(2005, 3, 17);
  MyDate dt2 = new MyDate(2005, 4, 1);
  if ( dt1.DayOfWeek == dt2.DayOfWeek )
      Console.WriteLine("{0}と{1}の曜日は同じです。",dt1, dt2);
  if ( dt1.DayOfWeek == DayWeek.Sunday )
      Console.WriteLine("{0}は、日曜日です", dt1);


┌─┬─────────────────────────┬─┬─┬─┐
│☆│ C#プログラミングレッスン  (ぼぼ週刊）            │＿│□│×│
├─┴─────────────────────────┴─┴─┴─┤
│ Published by Gushwell  (Microsoft MVP for Visual C#)             │
│ Copyright (C) 2004-2005 Gushwell All rights reserved.            │
│-------------------- Gushwell's Page ---------------------------- │
│ 窓際プログラマーの独り言  ：http://blog.livedoor.jp/gushwell/    │
│ 窓際プログラマーの読書三昧：http://gushwell.jugem.jp/            │
│             よろしかったらアクセスしてみてください！             │
└─────────────────────────────────┘
