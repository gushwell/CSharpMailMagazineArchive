┏━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━┳━┳━┓
┃☆┃ C#プログラミングレッスン                         ┃＿┃□┃×┃
┣━┻━━━━━━━━━━━━━━━━━━━━━━━━━┻━┻━┻━┫
┃継承                                                       No.033 ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛


■──────────────────────────────────
■ 継承とは、

継承とは、あるクラスの性質を受け継ぎ、新しいクラスを作成することです。

  ※ 継承は 派生 とも呼ばれており、派生という言葉を使うことがあります。

例えば、人クラス(Person)から社員クラス(Employee)を作るとしましょう。設
計のダメさ加減は置いといて、以下のような Personクラスがあったとします。

class Person {
    private string name;
    private int    age;
    public string Name {
        get { return name; }
        set { name = value; }
    }
    public int Age {
        get { return age; }
        set { age = value; }
    }
}

このクラスの使用例を以下に示します。

  Person p = new Person();
  p.Name = "山田太郎";
  p.Age = 23;
  Console.WriteLine("{0}は、{1}歳です", p.Name , p.Age);

■──────────────────────────────────
■ 継承の仕方

さて、社員クラス(Employee)では、名前と年齢に加え、社員番号と所属部署名
を扱いたいとします。継承を使えば、Employeeクラスをゼロから作るのではな
く、Personクラスの実装を利用するこが可能になります。
Personクラスから継承した、社員クラス（Employee）は以下の通りです。

class Employee : Person {
    private int id;
    private string deptName;
    public int ID {
        get { return id; }
        set { id = value; }
    }
    public string DeptName {
        get { return deptName; }
        set { deptName = value; }
    }
}

クラス名 Employeeの後に : を付け、 その後に、継承元である Personクラス
を指定します。

 ※ 便宜上、この継承元のクラスを親クラス、継承先のクラスを子クラス、と
    言うこともあります。
    なお、子クラスを継承し新たなクラスを作成することもできます。

継承することで、Employeeクラスは、Personクラスの性質を受け継ぐことにな
ります。 Name,Ageプロパティは、 Employeeクラスに記述してありませんが、
Employeeクラスに存在していることになります。
つまり、Personクラスとの違いだけをEmployeeクラスでは、定義しているわけ
ですね。これを差分プログラミングと言います。

このEmployeeクラスを使った例は、以下の通りです。

  Employee emp = new Employee();
  emp.ID = 100;
  emp.Name = "山田太郎";
  emp.Age = 23;
  emp.DeptName = "第一営業部";
  Console.WriteLine("{0}({1}歳)は、{2}に所属しています。",
         emp.Name, emp.Age, emp.DeptName);


■──────────────────────────────────
■ 継承はどんな時に使うのか

継承は、 一般的に、is a 関係が成り立つときに使うとされています。is a関
係とは、「○○は△△△である」という関係です。今回の例では、
  「社員は人である」
という関係が成り立っています。 こういう時に継承を使います。is a 関係が
成り立たないときには、継承を使ってはいけません。
では、 is a 関係が成り立つときには、必ず継承を使うのか、といわれるとそ
んなことはありません。逆に、ただ、どんな時に継承を使うべきなのかという
のは、とても難しい問題で、C#プログラミングの範囲から逸脱してしまうので、
詳しくは、オブジェクト指向の書籍などを見て下さい。
すくなくとも、「差分プログラミングは便利だから、継承を使おう」という発
想はやめた方が良いでしょう。

┌─┬─────────────────────────┬─┬─┬─┐
│☆│ C#プログラミングレッスン                         │＿│□│×│
├─┴─────────────────────────┴─┴─┴─┤
│ Published by GushWell                                            │
│ Copyright (C) 2004-2005 GushWell All rights reserved.            │
│-------------------- GushWell's Page ---------------------------- │
│ 窓際プログラマーの独り言  ：http://blog.livedoor.jp/gushwell/    │
│ 窓際プログラマーの読書三昧：http://gushwell.jugem.jp/            │
│             よろしかったらアクセスしてみてください！             │
└─────────────────────────────────┘
