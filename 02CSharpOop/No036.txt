┏━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━┳━┳━┓
┃☆┃ C#プログラミングレッスン                         ┃＿┃□┃×┃
┣━┻━━━━━━━━━━━━━━━━━━━━━━━━━┻━┻━┻━┫
┃継承関係のある変数の代入                                   No.036 ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

■──────────────────────────────────
■ 再度 is a 関係

継承というのは、 一般的に、「is a 関係（～は～である）」が成り立つとき
に利用するものとされています。
 ※ is a 関係が成り立つからといって、必ず継承を使うわけではありません。

前回の Shape、Triangle、Rectangle クラスにおいても、
 「三角形は、図形である」
 「四角形は図形である」
となり、is a 関係が成り立っています。
このような関係は、いたるところにありますね。

  「リストボックスはコントロールである」
  「カード支払いは支払いである」
  「従業員は人である」
  「売上や注文は取引である」

これらの関係を、kind of 関係（～は～の一種である）と言う人もいます。
  「三角形は、図形の一種である」
  「四角形は、図形の一種である」
という関係ですね。

■──────────────────────────────────
■ 継承関係のある変数の代入

さて、前回のコードをもう一度みてみましょう。

class Shape {
    private double x;
    private double y;
    public Shape(double width, double height) {
        x = width;
        y = height;
    }
    public double X {
        get { return x; }
    }
    public double Y {
        get { return y; }
    }
}

class Triangle : Shape {
    public Triangle(double width, double height)
        : base(width,height) {
    }
    public double GetArea() {
        return X * Y / 2;
    }
}

class Rectangle : Shape {
    public Rectangle(double width, double height)
        : base(width,height) {
    }
    public double GetArea() {
        return X * Y;
    }
}

このような親子関係がある時には、次のような代入が可能です。

  Shape s1 = new Triangle(10,5);
  Shape s2 = new Rectangle(4,8);

  ※ 子供のクラスのインスタンスを親クラスの変数に代入

普通に考えると、

  Triangle s1 = new Triangle(10,5);
  Rectangle s2 = new Rectangle(4,8);

というように、 newした型と、代入する変数の型は一致させないとエラーにな
りそうですが、子供のクラスは、親（あるいは、先祖クラス）の変数に代入で
きるようになっています。
なぜ、このようなことが可能なのかは、おいおい説明するとして、
「子供のクラスは、親（あるいは、先祖クラス）の変数に代入できる」
ということを覚えておいてください。

「三角形や長方形は、図形だから、図形の変数に代入できる」と考えればよい
でしょう。当然、次のような代入はできませんので、注意してください。

  Rectangle s1 = new Triangle(10,5);
  Triangle s2 = new Shape(4,8);

三角形は長方形ではないし、図形は、三角形とは限りませんからね。

Shape型の変数に代入できるということは、 以下のように配列に同じ配列に、
三角形と長方形を格納することも可能になります。

    Shape[] shapes = new Shape[4];
    shapes[0] = new Triangle(8, 6);
    shapes[1] = new Triangle(10, 5);
    shapes[2] = new Rectangle(5, 3);
    shapes[3] = new Rectangle(8, 5);

このように、親クラスの変数に、子供のクラスのインスタンスを格納すること
に何の意味があるのかは、次回お話します。

┌─┬─────────────────────────┬─┬─┬─┐
│☆│ C#プログラミングレッスン                         │＿│□│×│
├─┴─────────────────────────┴─┴─┴─┤
│ Published by GushWell  (Microsoft MVP for Visual C#)             │
│ Copyright (C) 2004-2005 GushWell All rights reserved.            │
│-------------------- GushWell's Page ---------------------------- │
│ 窓際プログラマーの独り言  ：http://blog.livedoor.jp/gushwell/    │
│ 窓際プログラマーの読書三昧：http://gushwell.jugem.jp/            │
│             よろしかったらアクセスしてみてください！             │
└─────────────────────────────────┘
