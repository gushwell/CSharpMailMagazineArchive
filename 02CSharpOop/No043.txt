┏━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━┳━┳━┓
┃☆┃ C#プログラミングレッスン                         ┃＿┃□┃×┃
┣━┻━━━━━━━━━━━━━━━━━━━━━━━━━┻━┻━┻━┫
┃キャスト、as 演算子、is 演算子                             No.043 ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

今日は、オブジェクトのキャストについてです。

■──────────────────────────────────
■ キャスト

キャストは指定した型に強制的に変換することです。オブジェクトのキャスト
は、以下のように記述します。

  object obj = new Magazine();
  ...
  Magazine mag = (Magazine)obj;   // キャスト

このコードでは、object型のインスタンスを Magazine型の変数に代入するの
に、キャストを使っています。

  Magazine mag = obj;

のように書くことは出来ません。

では、 次のコード（Magazine と People に継承関係が無いと仮定）はどう
でしょうか。

  object obj = new Magazine();
  ...
  People man = (People)obj;

コンパイルは通りますが、実行時に例外が発生してしまいます。
当たり前ですよね。もしこんなことが出来たら大変だ！というのは、意味的な
側面から考えても理解できると思います。

 ※ そういえば、まだ例外を説明していなかったような ...
    そのうち、例外を説明しますね。

-------
ちなみに、キャストは型変換であると最初に説明しましたが、
「キャストとは、指定した型だとみなすことである」
という表現のほうが、一般的には的を得ていると思います。コンピュータがデ
ータの中身を変更して型を変えてしまうのではなく、「指定した型だとみなし
て処理をしてね」とコンピュータにお願いする構文だと考えたほうが、オブジ
ェクトのキャストについて正しい理解が得られると思います。

 # Boxsing, Unboxingの場合は、この表現は正しくありません。
 # ただ、一般的なオブジェクトのキャストは、上記表現が適切だと思います。


■──────────────────────────────────
■ is 演算子

注意深くプログラミングすれば、実行時に例外エラーが発生するのをある程度
回避できますが、場合によっては、実行に型を調べ、該当する型の時だけ、キ
ャストしたいという場合が出てきます。そんな時に使えるのが、is 演算子です。

is 演算子は、オブジェクトが指定された型と互換性があるかどうかをチェッ
クして、bool型で返してくれます。

  object obj = new NoteBook();
  bool b1 = obj is NoteBook;    // (1)
  bool b2 = obj is object;      // (2)
  bool b3 = obj is Magazinel;   // (3)

NoteBookとMagazineに継承関係が無い場合、それぞれ、
 (1): true
 (2): true
 (3): false
が代入されます。

真ん中の式が trueになるのは、NoteBookがobjectの派生クラスであるため
「NoteBookはobjectである」
という関係が成り立つからです。

■──────────────────────────────────
■ as 演算子

as演算子は、丸括弧で括るキャストとは、別のキャストの方法です。

  Magazine mag1 = (Magazine)obj;          // (1)
  Magazine mag2 = obj as Magazine;        // (2)

(1), (2) とも、obj をMagazine型のキャストをしていますが、objがMagazine
型と互換性が無い場合の動作が異なります。(1)の場合、例外が発生し、(2)で
は例外は発生せず、nullが代入されます。

 ※ null とは、C#のキーワードで、「無あるいは空」を意味する定数です。

なお、安全性を高めるために、キャストをする前に、本当に互換性があるのか
を調べてから代入する方法が良く取られます。具体的には、以下のように書き
ます。

  if ( obj is Magazine )
      mag = (Magazine)obj;

  あるいは、

  if ( obj is Magazine )
      mag = obj as Magazine;

と書きます。このように書くことで、objがMagazine型と互換性があるとき
（言い換えると、objがMagazine型かその子孫クラスである時）だけ、キャス
トをするようにできるため、安全性が高まります。

ちなみに、後者は、is  と as の両方で型チェック処理が内部で走るため、
冗長な表現となりますので、前者の書き方が一般的かと思います。

また、as 演算子が null を返してくれることを利用し、

  mag = obj as Magazine;
  if ( mag != null ) {
      ...
  }

と書くこともできます。

┌─┬─────────────────────────┬─┬─┬─┐
│☆│ C#プログラミングレッスン  (ぼぼ週刊）            │＿│□│×│
├─┴─────────────────────────┴─┴─┴─┤
│ Published by Gushwell  (Microsoft MVP for Visual C#)             │
│ Copyright (C) 2004-2005 Gushwell All rights reserved.            │
│-------------------- Gushwell's Page ---------------------------- │
│ 窓際プログラマーの独り言  ：http://blog.livedoor.jp/gushwell/    │
│ 窓際プログラマーの読書三昧：http://gushwell.jugem.jp/            │
│             よろしかったらアクセスしてみてください！             │
└─────────────────────────────────┘


