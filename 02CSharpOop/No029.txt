┏━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━┳━┳━┓
┃☆┃ C#プログラミングレッスン                         ┃＿┃□┃×┃
┣━┻━━━━━━━━━━━━━━━━━━━━━━━━━┻━┻━┻━┫
┃static (2)                                                 No.029 ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

■──────────────────────────────────
■ staticメソッドの制約

staticメソッドからは、そのクラスに定義してある非staticフィールドや非
staticメソッドにアクセスすることができません。

例えば、

class MyDate {
    private int year;
    private int month;
    private int day;
    ...
    public static bool IsLeapYear() {
        return ((year % 4 == 0) &&
               ((year % 100 != 0) || (year % 400 == 0)));
    }
    ...
}

のように、staticメソッドである IsLeapYearから、非staticなメンバーである、
year にアクセスすることはできません。

理由は、通常のフィールド(非static)は、インスタンス毎に保持している値が
異なるからです。
IsLeapYear staticメソッドは、 インスタンスが生成されていない状態でも呼
び出せますので、その時点で、通常の year フィールドは存在していない状態
ですので、アクセスしたくても、アクセスすることは不可能です。
もし、インスタンスが生成されていたとしても、どのインスタンスの year を
アクセスするのか判断できませんし、特定のインスタンスの year フィールド
にアクセスすることは、無意味なことです。

同様に、 staticメソッドから、同一クラス内の 非staticメソッドを呼び出す
こともできません。
staticメソッドというのは、そのクラスのインスタンスを生成していない時に
呼び出せるのですが、そこから、インスタンスを生成しないと呼び出せない、
メソッドを呼び出すことは不可能です。

タイトルでは、制約という言葉を使いましたが、この説明でお分かりのように
本当は制約でもなんでもなく、これが自然な動きなのです。

ここで、もう一度、staticメソッドと非staticメソッドの動作について別の角
度から眺めて見ると、以下のようなことが言えます。

  非staticメソッドは、インスタンスの状態によって、結果が異なります。
  一方、staticメソッドは、インスタンスの状態に影響されません。

■──────────────────────────────────
■ staticフィールドについて

staticフィールドも、インスタンスの状態に影響を受けません。つまり、いく
つインスタンスが生成されていようと、保持している値は一つだけです。
このため、staticフィールドは、インスタンス間で値を共有することができま
す。

例えば、次に示す、Hoge クラスでは、何回、newされたかを、staticフィール
ドを使い、自分自身で管理しています。

class Program {
    static void Main(string[] args) {
        Hoge h1 = new Hoge();
        Hoge h2 = new Hoge();
        Console.WriteLine(Hoge.InstanceCount);
    }
}

class Hoge {
    private static int instanceCount = 0;
    public Hoge() {
        instanceCount++;
    }
    public static int InstanceCount {
        get {
            return instanceCount;
        }
    }
}


┌─┬─────────────────────────┬─┬─┬─┐
│☆│ C#プログラミングレッスン                         │＿│□│×│
├─┴─────────────────────────┴─┴─┴─┤
│ Published by GushWell                                            │
│ Copyright (C) 2004-2005 GushWell All rights reserved.            │
│-------------------- GushWell's Page ---------------------------- │
│ 窓際プログラマーの独り言  ：http://blog.livedoor.jp/gushwell/    │
│ 窓際プログラマーの読書三昧：http://gushwell.jugem.jp/            │
│             よろしかったらアクセスしてみてください！             │
└─────────────────────────────────┘

