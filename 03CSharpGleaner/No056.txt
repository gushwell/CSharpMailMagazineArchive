┏━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━┳━┳━┓
┃☆┃ C#プログラミングレッスン                         ┃＿┃□┃×┃
┣━┻━━━━━━━━━━━━━━━━━━━━━━━━━┻━┻━┻━┫
┃base キーワード                                            No.056 ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

■──────────────────────────────────
■ コンストラクタでのbaseキーワード

すでに、コンストラクタのところで説明してありますが、復習をかねて、再度
説明したいと思います。
以下のコードが、baseキーワードを使った例です。Bookクラスのコンストラク
タの定義時にbaseを使っています。baseを書くことで、親のコンストラクタを
呼び出しているのでしたね。
{ } の外側で、base キーワードを使っていることに注意してください。

    public class Item {
        private string name;
        public Item(string name) {
            this.name = name;
        }
        public Item() {
            this.name = "";
        }
    }

    public class Book : Item {
        private string isbn;
        public Book(string name, string isbn)
            : base(name) {  // 基本クラスのコンストラクタを呼び出す
            this.isbn = isbn;
        }
        public Book()
            : base() {      // 基本クラスのコンストラクタを呼び出す
            this.isbn = "";
        }
    }



■──────────────────────────────────
■ 派生クラスから、基本クラスのメソッドを呼び出す

baseキーワードはもうひとつ別の使い方があります。それは、派生クラスから、
基本クラス（親クラス）のメソッドを呼び出すときに使うものです。

派生クラスから、基本クラスのメソッドを呼び出す場合、通常、単にそのメソ
ッド名を書くことで、基本クラスのメソッドを呼び出すことができますが、派
生クラスでそのメソッドを overrideしていた場合には、 overrideしたメソッ
ドが呼ばれてしまいます。
こういった場合、base キーワードを使い、基本クラスにあるメソッドを呼び
出すことができます。
以下のコードを見てください。

    public class MyBase {
        public virtual void Hoge() {
            Console.WriteLine("MyBase.Hoge");
        }
        public virtual void Moge() {
            Console.WriteLine("MyBase.Moge");
        }
    }

    public class MyDelived : MyBase{
        public void Fuga() {
            Moge();           // 1. MyBase.Hoge
            Hoge();           // 2. MyDelived.Hoge
            base.Hoge();      // 3. MyBase.Hoge
        }
        public override void Hoge() {
            Console.WriteLine("MyDelived.Hoge");
        }
    }

MyDelived の Fuga メソッドを順に見て行きましょう。
１行目(Fugaメソッドの１行目）は、Mogeメソッドを呼び出しています。これ
は、MyDelived には定義されていないメソッドですので、基本クラスのMogeが
呼び出され、

  MyBase.Moge

が表示されます。
２行目の Hoge()の呼び出しでは、自分自身のクラスに、Hogeメソッドが定義
されているので、MyDelived.Hogeが呼び出され、

  MyDelived.Hoge

が表示されます。
3行目の、base.Hoge(); では、基本クラスの Hoge を明示的に呼び出していま
すので、

  MyBase.Hoge

が表示されます。

なお、 override したメソッドから、基本クラスの同名のメソッドを呼び出す
場合にも、以下のように、base キーワードを使います。

  public override void Hoge() {
      base.Hoge();      // 単なる Hoge() だと、無限再帰になる。
      Console.WriteLine("MyDelived.Hoge");
  }

基本クラス（親クラス）とちょっと違うことをやりたい、といった差分プログ
ラミングをするときに、上記のようなコーディングをします。

┌─┬─────────────────────────┬─┬─┬─┐
│☆│ C#プログラミングレッスン  (ぼぼ週刊）            │＿│□│×│
├─┴─────────────────────────┴─┴─┴─┤
│ Published by Gushwell  (Microsoft MVP for Visual C#)             │
│ Copyright (C) 2004-2005 Gushwell All rights reserved.            │
│-------------------- Gushwell's Page ---------------------------- │
│ 窓際プログラマーの独り言  ：http://blog.livedoor.jp/gushwell/    │
│ 窓際プログラマーの読書三昧：http://gushwell.jugem.jp/            │
│             よろしかったらアクセスしてみてください！             │
└─────────────────────────────────┘

