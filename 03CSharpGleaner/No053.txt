┏━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━┳━┳━┓
┃☆┃ C#プログラミングレッスン                         ┃＿┃□┃×┃
┣━┻━━━━━━━━━━━━━━━━━━━━━━━━━┻━┻━┻━┫
┃インデクサ                                                 No.053 ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

先週に引き続き、thisキーワードのお話し。今回は、インデクサです。

■──────────────────────────────────
■ インデクサとは

インデクサを使うと、クラスまたは構造体のインスタンスに、配列と同じ方法
でインデックスによるオブジェクトへのアクセスが可能になります。インデク
サはプロパティと似ていますが、インデクサのアクセサはパラメータを受け取
る点が異なります。

インデクサを定義するには、以下のように thisキーワードを使います。

public class BookList {
   ...
   public Book this[int index]  {
      get {
         // ここに、取得する処理を記述
      }
      set {
         // ここに 代入処理を記述
      }
   }
}

  ※ 実際に、動くコードは最後に示します。

この例では、Book 型のインデクサを定義しています。
this の後ろには、[ ] で、インデクサのパラメータを指定します。これが、
配列のインデックスにあたります。
BookListを使うには、

  BookList books = new BookList();
  books[0] = mybook;          // set が呼び出される
  Book mybook2 = books[0];    // get が呼び出される

のように、配列のように扱うことが可能になります。

  public Book GetBook(int index);
  public void SetBook(int index, Book book);

のようなメソッドを定義しても、同等のことは出来ますが、インデクサのほう
が、より直感的なコードを書くことができ可読性も高まります。


■──────────────────────────────────
■ インデクサのパラメータは、整数以外もＯＫ

インデクサの特徴は、インデックスに、、整数以外も指定することができると
いう点です。
ですから、

  books["ISBN4-949999-08-7"] = myBook;

のように、文字列を受け取るインデクサや、  独自のクラスを受け取るインデ
クサを定義することもできます。

文字列を取る場合には、

   public Book this[string ISBN]  {
      ...

のようにパラメータの型を string にし、それに合った、コードを get set 
の中で記述します。


■──────────────────────────────────
■ インデクサのオーバーロード

同じクラスで、複数のインデクサを定義することが可能です。その場合は、
メソッドのオーバーロードと同様に、パラメータのシグネチャを別々にする
必要があります。型だけを変えたインデクサを定義することはできません。

   public Book this [int index]  { ... }
   public Book this [string ISBN]  { ... }


■──────────────────────────────────
■ サンプルコード

最後に、実際に動くコードを示します。
BookListが、インデクサを定義しているクラスになります。
この例では、内部で、配列を保持していますが、ArrayListやHashTableなどで
Bookオブジェクトを保持しておくような実装もあると思います。

using System;

namespace Gushwell.Sample {
    public class Book {
        public string name;
        public string author;
        public string publisher;
        public Book(string name, string author, string publisher) {
            this.name = name;
            this.author = author;
            this.publisher = publisher;
        }
    }

    public class BookList {
        private Book[] myArray = new Book[10];
        public Book this[int index] {
            get {
                if (index < 0 || 10 <= index)
                    return null;
                else
                    return myArray[index];
            }
            set {
                if (0 <= index && index < 10)
                    myArray[index] = value;
            }
        }
    }

    class Program {
        static void Main(string[] args) {
            BookList books = new BookList();
            books[0] = new Book("C#入門", "Gushwell", "ABC出版");
            books[1] = new Book("はじめてのC#", "山田太郎", 
                                                "ソフトプレス");
            for (int i = 0; i < 10; i++) {
                Book book = books[i];
                if (book != null)
                    Console.WriteLine(book.name);
            }
        }
    }

}

┌─┬─────────────────────────┬─┬─┬─┐
│☆│ C#プログラミングレッスン  (ぼぼ週刊）            │＿│□│×│
├─┴─────────────────────────┴─┴─┴─┤
│ Published by Gushwell  (Microsoft MVP for Visual C#)             │
│ Copyright (C) 2004-2005 Gushwell All rights reserved.            │
│-------------------- Gushwell's Page ---------------------------- │
│ 窓際プログラマーの独り言  ：http://blog.livedoor.jp/gushwell/    │
│ 窓際プログラマーの読書三昧：http://gushwell.jugem.jp/            │
│             よろしかったらアクセスしてみてください！             │
└─────────────────────────────────┘
