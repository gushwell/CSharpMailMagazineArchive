┏━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━┳━┳━┓
┃☆┃ C#プログラミングレッスン                         ┃＿┃□┃×┃
┣━┻━━━━━━━━━━━━━━━━━━━━━━━━━┻━┻━┻━┫
┃checked と unchecked                                       No.062 ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

今回は、算術演算時のオーバーフローチックに関する構文 checked キーワー
ドと unchecked キーワードについて説明します。

■──────────────────────────────────
■ checked ステートメント

checked キーワードを使うと、整数型の算術演算および変換で、オーバーフロ
ーが発生した時に、例外を発生させることができます。

class Program {
    static void Main(string[] args) {
        short x = 32767;
        short y = 1;
        short z;
        try {
            z = checked((short)(x + y));    // (*)
        } catch (System.OverflowException e) {
            System.Console.WriteLine(e.ToString());
        }
        System.Console.ReadLine();
    }
}

上記例では、(*)で示した x + y の結果は、shortの範囲を超えてしまいます。
checked で囲むことで、例外が発生させることができます。

(short) でキャストしているのは、short + shortの結果は int型になり、
そのままでは、int型の変数 z に代入できないからです。

ちなみに、
       z = (short)checked(x + y);
とキャストの位置を変えると、例外は発生しません。それは、繰り返しになり
ますが、short + shortの結果は int型になるのｄ、オーバーフローが発生し
ないからです。

なお、checked が省略された通常の演算では、オーバーフローがチェックされ
るかどうかは、コンパイラオプションや環境設定などの外部要因によって決ま
ります。確実にオーバーフローチェックを行いたい場合は、checked を使って
ください。


■──────────────────────────────────
■ もうひとつの書き方

checked には、もう1つの書き方があります。

    try {
        checked {
            z = (short)(x + y);
        }
    } catch (System.OverflowException e) {
        System.Console.WriteLine(e.ToString());
    }

のように、{ } で囲まれたブロック内がチェックの対象となります。
ちなみに、コンパイル時にオーバーフローが発生することが分かる場合には、
コンパイルエラーとなります。試しに、

    const short x = 32767;
    const short y = 1;

とすると、コンパイル時にエラーとなってくれます。


■──────────────────────────────────
■ unchecked

uncheckedは、checkedとは逆に、整数型の算術演算や変換に対して、オーバー
フローチェックを抑制する働きがあります。

記述の仕方は、checkedと同じです。

    z = unchecked((short)(x + y));

    unchecked {
        z = (short)(x + y);
    }

の２つの書き方があります。


■──────────────────────────────────
■ コンパイラオプション /checked

コンパイラ オプション /checked+ を使用すると、unchecked キーワードのス
コープに明示的には存在しないすべての整数算術は、オーバーフローのチェッ
クが行われます。
つまり、コンパイラオプションと組み合わせることで、ある特定の場所だけ、
オーバーフローチェックを行ったり、逆に、特定の箇所だけ、チェックを外し
たりすることができます。

チェックを抑制する場合は、/checked- とします。

┌─┬─────────────────────────┬─┬─┬─┐
│☆│ C#プログラミングレッスン  (ぼぼ週刊）            │＿│□│×│
├─┴─────────────────────────┴─┴─┴─┤
│ Published by Gushwell  (Microsoft MVP for Visual C#)             │
│ Copyright (C) 2004-2005 Gushwell All rights reserved.            │
│-------------------- Gushwell's Page ---------------------------- │
│ 窓際プログラマーの独り言  ：http://blog.livedoor.jp/gushwell/    │
│ 窓際プログラマーの読書三昧：http://gushwell.jugem.jp/            │
│             よろしかったらアクセスしてみてください！             │
└─────────────────────────────────┘

