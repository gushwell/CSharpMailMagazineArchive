┏━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━┳━┳━┓
┃☆┃ C#プログラミングレッスン                         ┃＿┃□┃×┃
┣━┻━━━━━━━━━━━━━━━━━━━━━━━━━┻━┻━┻━┫
┃可変個数の引数                                             No.051 ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

■──────────────────────────────────
■ params

params キーワードを使用して、可変個引数リストを引数にとるメソッドを定
義することができます。
たとえば、引数で渡した数値の合計を求める Sum メソッドを考えてみましょ
う。

  int n1 = Sum(1,2,3);
  int n2 = Sum(1,2,3,4,5);
  int n3 = Sum(1,2,3,4,5,6,7,8,9);

と、引数をいくつでも指定できれば、便利ですよね。このようなメソッドを書
くときに利用するのが、params キーワードです。

では、さっそく、Sumメソッドの定義をみてみましょう。

static int Sum(params int[] nums) {
    int ans = 0;
    for ( i = 0; i < nums.Length; i++ ) {
        ans += nums[i];
    }
    return ans;
}

paramsキーワードが可変個数の引数を受け取るための、キーワードなのですが、
Sumメソッドは、引数の先頭にあるparamsキーワードを取ってしまうと、int型
の配列を受け取り、その合計を求めているメソッドと同じですね。
そうです、可変個数の引数を受け取る側のメソッドは、配列としてデータを受
け取るのと同じ処理をすればよいのです。
params と指定することで、可変個数の引数だということを明示しているわけ
です。

配列として受け取れるわけですから、いくつのデータが渡ってきたのかは、
Lengthプロパティで知ることができます。

なお、1 つのメソッド宣言内では、params キーワード以後にパラメータを追
加することはできません。一つのメソッドには、1 つの params キーワードだ
けが使用できます。

もちろん、params の前に、通常の引数を指定することはできます。
その最も有名なのが Console.WriteLineメソッドですね。

  Console.WriteLine("{0}:{1}:{2}",hh,mm,ss);

のように、２番目以降の引数が、可変個数の引数となっています。
この Console.WriteLineメソッドのシグネチャは、以下の通りです。

 public static void WriteLine(
    string format,
    params object[] arg
 );


■──────────────────────────────────
■ 可変引数を他のメソッドの引数にする。

受け取った可変個数のデータを、別のメソッドに渡すこともできます。
その例を以下に示します。

  static void MyDebugWriteLine(string format,params object[] args) {
      string s = string.Format(format, args);
      Debug.WriteLine(s);
  }

このようなメソッドを定義すれば、Console.WriteLineと同じような感覚で、
デバッグ情報を出力できます。


┌─┬─────────────────────────┬─┬─┬─┐
│☆│ C#プログラミングレッスン  (ぼぼ週刊）            │＿│□│×│
├─┴─────────────────────────┴─┴─┴─┤
│ Published by Gushwell  (Microsoft MVP for Visual C#)             │
│ Copyright (C) 2004-2005 Gushwell All rights reserved.            │
│-------------------- Gushwell's Page ---------------------------- │
│ 窓際プログラマーの独り言  ：http://blog.livedoor.jp/gushwell/    │
│ 窓際プログラマーの読書三昧：http://gushwell.jugem.jp/            │
│             よろしかったらアクセスしてみてください！             │
└─────────────────────────────────┘

