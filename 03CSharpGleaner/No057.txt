┏━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━┳━┳━┓
┃☆┃ C#プログラミングレッスン                         ┃＿┃□┃×┃
┣━┻━━━━━━━━━━━━━━━━━━━━━━━━━┻━┻━┻━┫
┃internalアクセス修飾子                                     No.057 ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

public, private, protected といったアクセス修飾子については、 既に説明
していますが、 アクセス修飾子には、もうひとつ、internal というアクセス
修飾子が存在します。今日は、この internal について説明します。


■──────────────────────────────────
■ internal クラス

internal は、同じアセンブリ内でのみアクセス可能という意味です。

つまり、 MyAssembly.dll にある、 MyClass が internal 指定だとすると、
MyClass は、 MyAssembly.dll 内のクラスからはアクセスが可能ですが、他の
アセンブリからはアクセスすることが出来ません。

実際のコードで試してみましょう。

まず、VisualStudio.NETのプロジェクトの新規作成で、クラスライブラリを選
択し、新しいプロジェクトを作成します。このプロジェクトの名前は、
「MyAssembly」としましょう。ソースには、以下のように記述してください。

using System;

namespace Gushwell.Sample {
    internal class MyClass1 {
        public void Hoge() {
            Console.WriteLine("MyClass1.Hoge");
        }
    }
}

これで、コンパイルし、MyAssembly.dll が出来ていることを確認してください。

次に、ソリューションエクスプローラの画面で、ソリューションを選択し、右
クリックし、[追加]-[新しいプロジェクト] で新しいプロジェクトを追加して
ください。この時のプロジェクトの種類は、「コンソールアプリケーション」
とします。プロジェクト名は、「MyApp」 としましょう。
コンソールアプリケーションのソースは、以下のように記述します。

using System;

namespace Gushwell.Sample {
    class Program {
        static void Main(string[] args) {
            MyClass1 mc1 = new MyClass1();
            mc1.Hoge();
        }
    }
}

次に、 ソリューションエクスプローラの[参照設定]を右クリックし、[参照の
追加]を選択し、 [プロジェクト]のページで、MyAssemblyを選択し、OKボタン
を押します。これで、MyAppアセンブリから、MyAssembly の中のクラスを利用
できるようになります。
では、コンパイルしてみましょう。コンパイルすると、「MyClass1はアクセス
できない保護レベルになっている」といったエラーになるはずです。これは、
MyClass1 のアクセスレベルがinternal になっているからです。

MyClass1 のアクセス修飾子を、internal から public に変更すれば、無事コ
ンパイルできるはずです。


■──────────────────────────────────
■ internal メソッド

internal キーワードは、 クラスだけではなく、メソッドなどのメンバーにも
適用することができます。MyClass1 を次のように書き変えてください。

    public class MyClass1 {
        public void Hoge() {
            Console.WriteLine("MyClass1.Hoge");
        }
        internal void Moge() {
            Console.WriteLine("MyClass1.Moge");
        }
    }


MyApp プロジェクトの、Main メソッドも以下のように書き変えます。

    class Program {
        static void Main(string[] args) {
            MyClass1 mc1 = new MyClass1();
            mc1.Hoge();
            mc1.Moge();
        }
    }


これでコンパイルすると、最後の Moge() を呼んでいるところで、エラーにな
るのが確認できると思います。
MyClass1, Hoge は public なので、MyApp.exeアセンブリからアクセスできま
すが、Moge はinternal なので、アクセスできません。


なお、クラスのメソッドなどのメンバーには、protected と internal を組み
合わせた指定が可能です。 これは、基本は、internal と同じなのですが、そ
のクラスから派生したクラスに限って、他のアセンブリであっても、アクセス
を許可するという指定になります。

    public class MyClass1 {
        public void Hoge() {
            Console.WriteLine("MyClass1.Hoge");
        }
        protected internal void Moge() {
            Console.WriteLine("MyClass1.Moge");
        }
    }

    ※ 同一アセンブリからMogeをアクセスできる。
       また、別アセンブリであっても、派生クラスならば、Mogeにアクセス
       することが可能。


■──────────────────────────────────
■ クラスのアクセス修飾子を省略すると、

では、class に付いているアクセス修飾子を省略するとどうなるのでしょうか。
アクセス修飾子を省略すると、internalが指定されたと見なされます。ちょっ
と、試してみましょう。
MyClass を以下のように書き変えます。

    class MyClass1 {      // ここを変更
        public void Hoge() {
            Console.WriteLine("MyClass1.Hoge");
        }
        internal void Moge() {
            Console.WriteLine("MyClass2.Moge");
        }
    }

これで、 コンパイルすると、Main メソッドの、先頭行でエラーとなります。
すくなくとも、 アクセス修飾子が省略されると、public でないことはこれで
確認できます。
internal かどうかを確認するには、 もう少し、コードを書かないといけない
のですが、これは読者の皆さん自身で確認してみてください。

今回は、ちょっと長めの説明になってしまいました。では、今日はこの辺で。

┌─┬─────────────────────────┬─┬─┬─┐
│☆│ C#プログラミングレッスン  (ぼぼ週刊）            │＿│□│×│
├─┴─────────────────────────┴─┴─┴─┤
│ Published by Gushwell  (Microsoft MVP for Visual C#)             │
│ Copyright (C) 2004-2005 Gushwell All rights reserved.            │
│-------------------- Gushwell's Page ---------------------------- │
│ 窓際プログラマーの独り言  ：http://blog.livedoor.jp/gushwell/    │
│ 窓際プログラマーの読書三昧：http://gushwell.jugem.jp/            │
│             よろしかったらアクセスしてみてください！             │
└─────────────────────────────────┘
