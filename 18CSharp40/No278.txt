
■━ [C#プログラミングレッスン] ━━━━━━━━━━━━━━━ No.278 ━□
  
 「C#4.0 編」-- Office 相互運用
                                                             by Gushwell  
□━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━■


■□───────────────────────────────────
■□ Office 相互運用


C#4.0で導入された「名前付き引数」「省略可能な引数」「dynamic」などを使うこ
とで、Office API オブジェクトへのアクセスがとても簡単になりました。

以下に示すコードは、C#3.0で、Wordアプリケーションを起動し、Sample.docxフ
ァイルを開くコードです。

  using Word = Microsoft.Office.Interop.Word;
  ...

  Word.Application wordApplication = new Word.Application { Visible = true };
  object missingValue = System.Reflection.Missing.Value;
  object readOnlyValue = true;  // 変数に代入してから値を渡す必要があった
  object fileName = @"D:\temp\Sample.docx";
  wordApplication.Documents.Open(ref fileName,
      ref missingValue, ref readOnlyValue, ref missingValue, ref missingValue,
      ref missingValue, ref missingValue, ref missingValue, ref missingValue,
      ref missingValue, ref missingValue, ref missingValue, ref missingValue,
      ref missingValue, ref missingValue, ref missingValue);


これが、C#4.0になると、次のようなコードになります。


  using Word = Microsoft.Office.Interop.Word;
  ...

  Word.Application wordApplication = new  Word.Application { Visible = true };
  wordApplication.Documents.Open(@"D:\temp\Sample.docx",  ReadOnly: true);


どうです、とても簡単になりましたね。
引数の指定において、ref指定が無くなったのに気が付かれたと思います。C#4.0
では、COM呼び出しに限定して、引数の参照渡し時の ref キーワードを省略でき
るようになりました。そのため、見かけ上は値渡しのようなコードを書けるよう
になっています。
これによりリテラル値を直接引数に書けるために、コードがとてもすっきりとしま
した。


もう一つ、例をお見せします。これは、Excelを起動し、セルに値を埋め込む
コードです。

  using Excel = Microsoft.Office.Interop.Excel;

  ...
  
  public class Books {
        public string Title { get; set; }
        public string Author { get; set; }
        public int Pages { get; set; }
  }

  ...

     var books = new List<Books> {
         new Books { Title = "こころ", Author = "夏目漱石", Pages = 456 },
         new Books { Title = "銀河鉄道の夜", Author = "宮沢賢治", Pages = 456 },
         new Books { Title = "金閣寺", Author = "三島由紀夫", Pages = 456 },
     };

     var excelApp = new Excel.Application();
     excelApp.Visible = true;
     excelApp.Workbooks.Add();
     Excel.Worksheet workSheet = excelApp.ActiveSheet;
     workSheet.Cells[1, "A"] = "Title";
     workSheet.Cells[1, "B"] = "Author";
     workSheet.Cells[1, "C"] = "Pages";
     int row = 1;
     foreach (var book in books) {
         row++;
         workSheet.Cells[row, "A"] = book.Title;
         workSheet.Cells[row, "B"] = book.Author;
         workSheet.Cells[row, "C"] = book.Pages;
     }
     workSheet.Columns[1].AutoFit();  // ★
     workSheet.Columns[2].AutoFit();
     workSheet.Columns[3].AutoFit();
     System.Runtime.InteropServices.Marshal.ReleaseComObject(workSheet);
     System.Runtime.InteropServices.Marshal.ReleaseComObject(excelApp);


★印で示したコードに注目してください。ここで、dynamicが使われています。
C#3.0では、workSheet.Columns[1] が object を返すために、

  ((Excel.Range)workSheet.Columns[1]).AutoFit();

とキャストし、AutoFitメソッドを呼び出す必要がありました。
しかし、C#4.0では、COM呼び出しにおける戻り値の objectは、dynamicに自動変
換されるため、キャストすることなく、AutoFitメソッドを呼び出すことができま
す。

--------------------------------------------------------------------------

今年の、メールマガジン「C#プログラミングレッスン」は、今号が最後となります。
C#4.0の話題は、ジェネリッククラスの共変性と反変性が残されていますが、
それについては、来年ということで。

少し早いですが、それでは、皆さん良いお年をお迎えください。

─────────────────────────────────────
『C#プログラミングレッスン』  (ぼぼ週刊）                                 
 ☆皆さまからの感想をお待ちしています。http://gushwell.ifdef.jp/mail.html 
─────────────────────────────────────
 Published by Gushwell.                                                   
   Copyright (C) 2004-2010 Gushwell All rights reserved.                  
   Microsoft MVP for Visual C#(Apr 2005 - Mar 2011)                       
                                                                          
 ■Gushwell's Page                                                        
 窓際プログラマ─の独り言 - C#の話題を中心に: http://gushwell.ldblog.jp/  
 Gushwell's C# Programming Page             : http://gushwell.ifdef.jp/   
 Gushwell's F# Programming Diary            : http://techbank.jp/gushwell/
 Gushwellの読書ノート                       : http://gushwell.jugem.jp/   
                                                                          
 ■コミュニティtechbank.jp (http://techbank.jp/)                          
 Gushwellが参加している技術系コミュニティです。                           
 有志メンバーによるBlogでの技術情報発信も行っています。                   
─────────────────────────────────────

