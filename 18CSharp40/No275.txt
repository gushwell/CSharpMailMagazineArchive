
■━ [C#プログラミングレッスン] ━━━━━━━━━━━━━━━ No.275 ━□
  
 「C#4.0 編」-- dynamicが使える場面(1)
                                                             by Gushwell  
□━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━■

今回から数回に分けて、dynamicが具体的にどのような場面で使えるのかについて
考えてみたいと思います。


■□───────────────────────────────────
■□ ジェネリックスクラスで算術演算

ジェネリッククラスで指定した型パラメータのオブジェクトに対し、加減乗除
の演算を行いたい場合にdynamicが利用できます。

以下のコードを見てください。

  static IEnumerable<int> Diff(IEnumerable<int> xs) {
      var ite = xs.GetEnumerator();
      if (ite.MoveNext())
          for (int prev = ite.Current; ite.MoveNext(); prev = ite.Current) {
              yield return ite.Current - prev;
          }
  }


このDiffメソッドは、隣り合うどうしの値の差を求めるメソッドです。
IEnumerable<int>を引数に受け取っていますので、int[]、List<int> などを受け
取ることができます。
たとえば、

  var nums = new List<int> { 1, 2, 3, 5, 8 };
  foreach (var n in Diff(nums))
      Console.WriteLine(n)

といった呼び出しが行えます。
結果は、

  1
  1
  2
  3

となります。
では、この‘Diffメソッドを double, decimal, long など他の数値型でも使える
ようにするにはどうすれば良いでしょうか。

ジェネリックスを理解している人は、


  static IEnumerable<T> Diff<T>(IEnumerable<T> xs) {
      var ite = xs.GetEnumerator();
      if (ite.MoveNext())
          for (T prev = ite.Current; ite.MoveNext(); prev = ite.Current) {
              yield return ite.Current - prev;
          }
  }


というコードを書きたいと思うはずですが、残念ながらこのコードはコンパイル
エラーになってしまいます。

それは、

  yield return ite.Current - prev;

において、マイナス演算子が使えないからです。このDiffメソッドには、任意の
型を指定できますが、その型が － 演算子を使えるとはかぎらないため、コンパ
イルすることができないのです。
where 指定で数値型に限定できれば良いのかもしれませんが、C#にはそのような
指定は用意されていません。

そこで、dynamic の出番です。


  static IEnumerable<T> Diff<T>(IEnumerable<T> xs) {
      var ite = xs.GetEnumerator();
      if (ite.MoveNext())
          for (T prev = ite.Current; ite.MoveNext(); prev = ite.Current) {
              yield return (dynamic)ite.Current - (dynamic)prev;
          }
  }


とdynanic にキャストすることで、引き算をすることが可能になります。つまり、
C#3.0では不可能だったコードが書けるようになるのです。

もちろん、－演算子が使えない型が渡ってきた場合は、実行時例外になります。
ここで示した手法を使えば、加減乗除をジェネリッククラスで利用することが可
能になります。


─────────────────────────────────────
『C#プログラミングレッスン』  (ぼぼ週刊）                                 
 ☆皆さまからの感想をお待ちしています。http://gushwell.ifdef.jp/mail.html 
─────────────────────────────────────
 Published by Gushwell.                                                   
   Copyright (C) 2004-2010 Gushwell All rights reserved.                  
   Microsoft MVP for Visual C#(Apr 2005 - Mar 2011)                       
                                                                          
 ■Gushwell's Page                                                        
 窓際プログラマ─の独り言 - C#の話題を中心に: http://gushwell.ldblog.jp/  
 Gushwell's C# Programming Page             : http://gushwell.ifdef.jp/   
 Gushwell's F# Programming Diary            : http://techbank.jp/gushwell/
 Gushwellの読書ノート                       : http://gushwell.jugem.jp/   
                                                                          
 ■コミュニティtechbank.jp (http://techbank.jp/)                          
 Gushwellが参加している技術系コミュニティです。                           
 有志メンバーによるBlogでの技術情報発信も行っています。                   
─────────────────────────────────────
