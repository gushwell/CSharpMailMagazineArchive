
■━ [C#プログラミングレッスン] ━━━━━━━━━━━━━━━ No.274 ━□
  
 「C#4.0 編」-- dynamicとは
                                                             by Gushwell  
□━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━■

■□───────────────────────────────────
■□ dynamicとは

C#4.0では、dynamic という新しい型が導入されました。
このdynamic型は、object型と同様あらゆるオブジェクトを扱うことができます。
object型と大きく異なるのは、コンパイル時には静的な型チェックはバイパスされ
実行時までそのチェックが引き伸ばされるということです。

では、dynamicを使った簡単なコードをみてみましょう。


  dynamic a = 10;
  dynamic b = DateTime.Today;

  Console.WriteLine("{0} {1}",a,a.GetType());
  Console.WriteLine("{0} {1}",b,b.GetType());

  a = "dynamic";   // ★ a に別の型を再代入
  Console.WriteLine("{0} {1}", a, a.GetType());


出力は、以下のようになります。

  10 System.Int32
  2010/11/26 0:00:00 System.DateTime
  dynamic System.String


dynamic 宣言した変数には、あらゆるオブジェクトを格納できます。★の行のよう
に、別の型を再代入することもできます。

これだけだと、表面上は、objectと変わりありませんので、もう少し、dynamicら
しい例をお見せしましょう

ここに２つのクラスが定義されています。


  class Hoge {
      public string DoSomething(int n) {
          return (n + n).ToString();
      }
  }

  class Fuga {
      public int DoSomething(int n) {
          return n * 3;
      }
  }


この２つのクラスは、同じメソッド DoSomething をもっていますが、継承関係に
はありません。この２つのクラスに対して、以下のようなコードが書けます。


    public void CallSomething(dynamic val) {
        dynamic r = val.DoSomething(2);
        Console.WriteLine(r);
    }

    private void Execute() {
        Hoge hoge = new Hoge();
        CallSomething(hoge);
        Fuga fuga = new Fuga();
        CallSomething(fuga);
    }


CallSomethingメソッドは、dynamic型のオブジェクトを引数に取り、DoSomething
メソッドを呼び出し、その戻り値を表示しています。

引数valのクラスに、DoSomethingメソッドが含まれているかどうかは、コンパイル
時にはわかりませんが、エラーにはなりません。

DoSomethingが返す値も、その型がわかりませんので、dynamic型として受け取り、
Console.WriteLineに渡しています。WriteLineは、objectを引数に取りますので、
dynamicも受け取るることができます。

Executeメソッドでは、CallSomethineメソッドを２回呼び出しています。それぞれ
引数には、Hoge, Fuga というオブジェクト（DoSomethingメソッドを持っている）
が渡りますので、CallSomethineメソッド内では、DoSomethingメソッドを呼び出す
ことができます。

結果は、
  4
  6
と表示されます。

なお、

  CallSomething("Hello");

と呼び出した場合、文字列型には、DoSomethingメソッドは存在しないので、実行
時にMicrosoft.CSharp.RuntimeBinder.RuntimeBinderException 例外が発生します。

繰り返しになりますが、dynamic では、メソッドの呼び出し、プロパティの参照、
演算子の使用などの正確さは、実行時に判断されます。コンパイル時には判断され
ません。

もうひとつ、興味深い例をお見せしましょう。
dynamicは、あらゆる操作が可能であると見做されますから、四則演算をするコー
ドも書くことができます。


  private static dynamic TwiceIt(dynamic val) {
      return val + val;
  }


このメソッドに対し、


  Console.WriteLine(TwiceIt(5));
  Console.WriteLine(TwiceIt(1.2));
  Console.WriteLine(TwiceIt("Hello"));


といった呼び出しが可能です。
結果は、

  10
  2.4
  "HelloHello"

です。もちろん、

  TwiceIt(DateTime.Now)

という呼び出しは、実行時例外になります。

このように dynamicは、とても柔軟性がありますが、コンパイル時には、間違い
が指摘されないため、C#の持つ型安全性という特徴を大きく損なうものです。
そのため、利用する上では注意が必要だと思います。
また、インテリセンスが効きませんので、dynamicを多用するとタイプミスも増え、
デバッグに多くの時間を取られるのではと思われます。

私も、まだC#4.0を使いこなしているとは言えない状況のため、どんな場面で
dynamicを利用したら良いのか、迷うところではありますが、いくつかの場面に絞
られると感じています。
それらについては、次回以降、説明したいと思います。


─────────────────────────────────────
『C#プログラミングレッスン』  (ぼぼ週刊）                                 
 ☆皆さまからの感想をお待ちしています。http://gushwell.ifdef.jp/mail.html 
─────────────────────────────────────
 Published by Gushwell.                                                   
   Copyright (C) 2004-2010 Gushwell All rights reserved.                  
   Microsoft MVP for Visual C#(Apr 2005 - Mar 2011)                       
                                                                          
 ■Gushwell's Page                                                        
 窓際プログラマ─の独り言 - C#の話題を中心に: http://gushwell.ldblog.jp/  
 Gushwell's C# Programming Page             : http://gushwell.ifdef.jp/   
 Gushwell's F# Programming Diary            : http://techbank.jp/gushwell/
 Gushwellの読書ノート                       : http://gushwell.jugem.jp/   
                                                                          
 ■コミュニティtechbank.jp (http://techbank.jp/)                          
 Gushwellが参加している技術系コミュニティです。                           
 有志メンバーによるBlogでの技術情報発信も行っています。                   
─────────────────────────────────────
