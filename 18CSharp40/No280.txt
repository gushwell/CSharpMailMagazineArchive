■━ [C#プログラミングレッスン] ━━━━━━━━━━━━━━━ No.280 ━□
  
 「C#4.0 編」-- ジェネリッククラスの反変性
                                                             by Gushwell  
□━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━■
■ ジェネリッククラスの反変性の基礎

  Action<object> action = (object o) => Console.WriteLine(o);

というコードで考えてみます。
このactionデリゲートは、objectを引数に取るわけですから、その派生型である
string も受けとることができます。
ということは、

  action("hello");

という呼び出しも可能です。
つまり、

  Action<object> action = (object o) => Console.WriteLine(o);
  Action<string> strAction = action;   // ★
  strAction("Hello");

というコードは許されるはずです。★の行が反変性の部分になります。
この行だけみると、object -> string  というダウンキャストが行われているよう
で、ちょっと危険なコードに見えますが、actionに代入されたラムダ式は、引数に、
stringを渡しても大丈夫ですから、actionを Action<string> に代入しても問題な
いはずです。

共変性とは逆に、string -> object という変換とは逆の
 Action<object> → Action<string> 
という逆向きの変換が行われているので、これを反変性と呼ぶと覚えてください。

ちょっと共変性よりは理解するのに苦労すると思いますが、ここはじっくりと考え
理解してください。


□━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━■
■ ジェネリッククラスの反変性の実用例

では、もう少しましな例をお見せします。
List<T>.Sort(IComparer<T> comparer) メソッドを例に、反変性の説明をします。

  public class BaseType {
      public int Id { get; set;}
  }

  public class DelivedType : BaseType { }

  class MyComarer : IComparer<BaseType> {
      public int Compare(BaseType x, BaseType y) {
          return x.Id - y.Id;
      }
  }

  List<DelivedType> list = new List<DelivedType>();
  list.Sort(new MyComarer());


上記コードの最後の２行は、

  List<DelivedType> list = new List<DelivedType>();
  IComparer<DelivedType> comp = new MyComarer(); // ★
  list.Sort(comp);

と書き換えることができますが、★の行が反変性の部分になります。
Compareメソッドには、DelivedTypeのインスタンスを渡しても問題ないのだから、
List<DelivedType>のSortメソッド内で利用する比較クラスは、DelivedTypeも受け
取れる、IComparer<BaseType> で問題ないはずです。

DelivedType -> BaseType という変換とは逆向きの 
 IComparer<BaseType> → IComparer<DelivedType> 
という変換が行われていることを再度確認してください。


□━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━■
■ C#3.0では

C#3.0では、この反変性が認められていなかったため、

 List<DelivedType> list = new List<DelivedType>();

という list に対しては、Sortメソッドで受け取れるのは、IComparer<DelivedType>
を実装した比較クラスだけだでした。

そのため、BaseTypeから派生した もう一つのクラス DelivedType2があった場合、

  class MyComarer1 : IComparer<DelivedType> {
      public int Compare(DelivedType x, DelivedType y) {
          return x.Id - y.Id;
      }
  }

  class MyComarer2 : IComparer<DelivedType2> {
      public int Compare(DelivedType2 x, DelivedType2 y) {
          return x.Id - y.Id;
      }
  }

  List<DelivedType> list1 = new List<DelivedType>();
  list1.Sort(new MyComarer1());

  List<DelivedType2> list2 = new List<DelivedType2>();
  list2.Sort(new MyComarer2());


と2つの Comparerクラスを用意する必要がありましたが、
C#4.0になり、

   class MyComarer : IComparer<BaseType> {
       public int Compare(BaseType x, BaseType y) {
           return x.Id - y.Id;
       }
   }

   List<DelivedType> list1 = new List<DelivedType>();
   list1.Sort(new MyComarer());

   List<DelivedType> list2 = new List<DelivedType>();
   list2.Sort(new MyComarer());

と一つのComparerクラスでOKとなりました。

--------------------------------------------------------------------------

今回で「C#4.0編」は終了です。カスタムクラスで共変性、反変性をサポートする
方法については、それほど需要はないだろうという判断で割愛します。
さらっと説明すると、in、outがそのためのキーワードです

 public interface IEnumerator<out T> { ... }

とoutを指定すると共変性、

 public interface IComparer<in T>

と in を指定すると、反変性がサポートされるようになります。

次回は、「.NET Framework4編」を予定しています。2週間ほどお休みをいただいた
後に再開します。
それでは、お楽しみに。

─────────────────────────────────────
『C#プログラミングレッスン』  (ぼぼ週刊）                                 
 ☆皆さまからの感想をお待ちしています。http://gushwell.ifdef.jp/mail.html 
─────────────────────────────────────
 Published by Gushwell.                                                   
   Copyright (C) 2011 Gushwell All rights reserved.                       
   Microsoft MVP for Visual C#(Apr 2005 - Mar 2011)                       
                                                                          
 ■Gushwell's Page                                                        
 Gushwell's C# Dev Notes           : http://gushwell.ldblog.jp/           
 Gushwell's C# Programming Page    : http://gushwell.ifdef.jp/            
 Gushwell's F# Programming Diary   : http://techbank.jp/gushwell/         
 Gushwellの読書ノート              : http://gushwell.jugem.jp/            
                                                                          
 ■コミュニティtechbank.jp (http://techbank.jp/)                          
 Gushwellが参加している技術系コミュニティです。                           
 有志メンバーによるBlogでの技術情報発信も行っています。                   
─────────────────────────────────────
